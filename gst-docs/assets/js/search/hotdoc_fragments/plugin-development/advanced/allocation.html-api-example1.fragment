fragment_downloaded_cb({"url":"plugin-development/advanced/allocation.html#api-example1","fragment":"API example\nThere can be many different GstBufferPool implementations; they are all\nsubclasses of the GstBufferPool base class. For this example, we will\nassume we somehow have access to a buffer pool, either because we created\nit ourselves or because we were given one as a result of the ALLOCATION\nquery, as we will see below.\nThe GstBufferPool is initially in the inactive state so that we can\nconfigure it. Trying to configure a GstBufferPool that is not in the\ninactive state will fail. Likewise, trying to activate a bufferpool that\nis not configured will also fail.\nThe configuration of a GstBufferPool is maintained in a generic\nGstStructure that can be obtained with gst_buffer_pool_get_config().\nConvenience methods exist to get and set the configuration options in\nthis structure. After updating the structure, it is set as the current\nconfiguration in the GstBufferPool again with\ngst_buffer_pool_set_config().\nThe following options can be configured on a GstBufferPool:\nThe caps of the buffers to allocate.\nThe size of the buffers. This is the suggested size of the buffers\nin the pool. The pool might decide to allocate larger buffers to add\npadding.\nThe minimum and maximum amount of buffers in the pool. When minimum\nis set to \\> 0, the bufferpool will pre-allocate this amount of\nbuffers. When maximum is not 0, the bufferpool will allocate up to\nmaximum amount of buffers.\nThe allocator and parameters to use. Some bufferpools might ignore\nthe allocator and use its internal one.\nOther arbitrary bufferpool options identified with a string. a\nbufferpool lists the supported options with\ngst_buffer_pool_get_options() and you can ask if an option is\nsupported with gst_buffer_pool_has_option(). The option can be\nenabled by adding it to the configuration structure with\ngst_buffer_pool_config_add_option (). These options are used to\nenable things like letting the pool set metadata on the buffers or\nto add extra configuration options for padding, for example.\nAfter the configuration is set on the bufferpool, the pool can be\nactivated with gst_buffer_pool_set_active (pool, TRUE). From that\npoint on you can use gst_buffer_pool_acquire_buffer () to retrieve a\nbuffer from the pool, like this:\nIt is important to check the return value of the acquire function\nbecause it is possible that it fails: When your element shuts down, it\nwill deactivate the bufferpool and then all calls to acquire will return\nGST_FLOW_FLUSHING.\nAll buffers that are acquired from the pool will have their pool member\nset to the original pool. When the last ref is decremented on the\nbuffer, GStreamer will automatically call\ngst_buffer_pool_release_buffer() to release the buffer back to the\npool. You (or any other downstream element) don't need to know if a\nbuffer came from a pool, you can just unref it.\n\n\nThe caps of the buffers to allocate.\n\n\nThe size of the buffers. This is the suggested size of the buffers\nin the pool. The pool might decide to allocate larger buffers to add\npadding.\n\n\nThe minimum and maximum amount of buffers in the pool. When minimum\nis set to \\> 0, the bufferpool will pre-allocate this amount of\nbuffers. When maximum is not 0, the bufferpool will allocate up to\nmaximum amount of buffers.\n\n\nThe allocator and parameters to use. Some bufferpools might ignore\nthe allocator and use its internal one.\n\n\nOther arbitrary bufferpool options identified with a string. a\nbufferpool lists the supported options with\ngst_buffer_pool_get_options() and you can ask if an option is\nsupported with gst_buffer_pool_has_option(). The option can be\nenabled by adding it to the configuration structure with\ngst_buffer_pool_config_add_option (). These options are used to\nenable things like letting the pool set metadata on the buffers or\nto add extra configuration options for padding, for example.\n\n\n"});