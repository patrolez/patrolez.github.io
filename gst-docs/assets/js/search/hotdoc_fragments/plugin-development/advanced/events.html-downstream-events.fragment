fragment_downloaded_cb({"url":"plugin-development/advanced/events.html#downstream-events","fragment":"Downstream events\nDownstream events are received through the sink pad's event handler, as\nset using gst_pad_set_event_function () when the pad was created.\nDownstream events can travel in two ways: they can be in-band\n(serialised with the buffer flow) or out-of-band (travelling through the\npipeline instantly, possibly not in the same thread as the streaming\nthread that is processing the buffers, skipping ahead of buffers being\nprocessed or queued in the pipeline). The most common downstream events\n(SEGMENT, CAPS, TAG, EOS) are all serialised with the buffer flow.\nHere is a typical event function:\nIf your element is chain-based, you will almost always have to implement\na sink event function, since that is how you are notified about\nsegments, caps and the end of the stream.\nIf your element is exclusively loop-based, you may or may not want a\nsink event function (since the element is driving the pipeline it will\nknow the length of the stream in advance or be notified by the flow\nreturn value of gst_pad_pull_range(). In some cases even loop-based\nelements may receive events from upstream though (for example audio\ndecoders with an id3demux or apedemux element in front of them, or\ndemuxers that are being fed input from sources that send additional\ninformation about the stream in custom events, as DVD sources do).\n"});