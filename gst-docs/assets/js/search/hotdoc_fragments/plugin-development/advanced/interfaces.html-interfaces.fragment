fragment_downloaded_cb({"url":"plugin-development/advanced/interfaces.html#interfaces","fragment":"Interfaces\nPreviously, in the chapter Adding Properties, we have\nintroduced the concept of GObject properties of controlling an element's\nbehaviour. This is very powerful, but it has two big disadvantages: first of\nall, it is too generic, and second, it isn't dynamic.\nThe first disadvantage is related to the customizability of the end-user\ninterface that will be built to control the element. Some properties are\nmore important than others. Some integer properties are better shown in\na spin-button widget, whereas others would be better represented by a\nslider widget. Such things are not possible because the UI has no actual\nmeaning in the application. A UI widget that represents a bitrate\nproperty is the same as a UI widget that represents the size of a video,\nas long as both are of the same GParamSpec type. Another problem is\nthat things like parameter grouping, function grouping, or parameter\ncoupling are not really possible.\nThe second problem with parameters is that they are not dynamic. In\nmany cases, the allowed values for a property are not fixed, but depend\non things that can only be detected at runtime. The names of inputs for\na TV card in a video4linux source element, for example, can only be\nretrieved from the kernel driver when we've opened the device; this only\nhappens when the element goes into the READY state. This means that we\ncannot create an enum property type to show this to the user.\nThe solution to those problems is to create very specialized types of\ncontrols for certain often-used controls. We use the concept of\ninterfaces to achieve this. The basis of this all is the glib\nGTypeInterface type. For each case where we think it's useful, we've\ncreated interfaces which can be implemented by elements at their own\nwill.\nOne important note: interfaces do not replace properties. Rather,\ninterfaces should be built next to properties. There are two important\nreasons for this. First of all, properties can be more easily\nintrospected. Second, properties can be specified on the commandline\n(gst-launch-1.0).\n"});