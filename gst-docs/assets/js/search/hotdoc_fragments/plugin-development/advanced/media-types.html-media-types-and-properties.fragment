fragment_downloaded_cb({"url":"plugin-development/advanced/media-types.html#media-types-and-properties","fragment":"Media Types and Properties\nThere is a very large set of possible media types that may be used to pass\ndata between elements. Indeed, each new element that is defined may use\na new data format (though unless at least one other element recognises\nthat format, it will be useless since nothing will be\nable to link with it).\nIn order for media types to be useful, and for systems like autopluggers to\nwork, it is necessary that all elements agree on the media type definitions,\nand which properties are required for each media type. The GStreamer framework\nitself simply provides the ability to define media types and parameters, but\ndoes not fix the meaning of media types and parameters, and does not enforce\nstandards on the creation of new media types. This is a matter for a policy to\ndecide, not technical systems to enforce.\nFor now, the policy is simple:\nDo not create a new media type if you could use one which already exists.\nIf creating a new media type, discuss it first with the other GStreamer\ndevelopers, on at least one of: IRC, mailing lists.\nTry to ensure that the name for a new format does not\nconflict with anything else created already, and is not a more\ngeneralised name than it should be. For example: \"audio/compressed\"\nwould be too generalised a name to represent audio data compressed\nwith an mp3 codec. Instead \"audio/mp3\" might be an appropriate name,\nor \"audio/compressed\" could exist and have a property indicating the\ntype of compression used.\nEnsure that, when you do create a new media type, you specify it clearly,\nand get it added to the list of known media types so that other developers\ncan use the media type correctly when writing their elements.\n\n\nDo not create a new media type if you could use one which already exists.\n\n\nIf creating a new media type, discuss it first with the other GStreamer\ndevelopers, on at least one of: IRC, mailing lists.\n\n\nTry to ensure that the name for a new format does not\nconflict with anything else created already, and is not a more\ngeneralised name than it should be. For example: \"audio/compressed\"\nwould be too generalised a name to represent audio data compressed\nwith an mp3 codec. Instead \"audio/mp3\" might be an appropriate name,\nor \"audio/compressed\" could exist and have a property indicating the\ntype of compression used.\n\n\nEnsure that, when you do create a new media type, you specify it clearly,\nand get it added to the list of known media types so that other developers\ncan use the media type correctly when writing their elements.\n\n\n"});