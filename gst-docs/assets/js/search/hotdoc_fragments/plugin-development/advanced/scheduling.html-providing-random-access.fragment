fragment_downloaded_cb({"url":"plugin-development/advanced/scheduling.html#providing-random-access","fragment":"Providing random access\nIn the previous section, we have talked about how elements (or pads)\nthat are activated to drive the pipeline using their own task, must use\npull-mode scheduling on their sinkpads. This means that all pads linked\nto those pads need to be activated in pull-mode. Source pads activated\nin pull-mode must implement a _get_range ()-function set using\ngst_pad_set_getrange_function (), and that function will be called\nwhen the peer pad requests some data with gst_pad_pull_range (). The\nelement is then responsible for seeking to the right offset and\nproviding the requested data. Several elements can implement random\naccess:\nData sources, such as a file source, that can provide data from any\noffset with reasonable low latency.\nFilters that would like to provide a pull-mode scheduling over the\nwhole pipeline.\nParsers who can easily provide this by skipping a small part of\ntheir input and are thus essentially \"forwarding\" getrange requests\nliterally without any own processing involved. Examples include tag\nreaders (e.g. ID3) or single output parsers, such as a WAVE parser.\nThe following example will show how a _get_range ()-function can be implemented in a source element:\nIn practice, many elements that could theoretically do random access,\nmay in practice often be activated in push-mode scheduling anyway, since\nthere is no downstream element able to start its own task. Therefore, in\npractice, those elements should implement both a _get_range ()-function and a _chain ()-function (for filters and parsers) or a _get_range ()-function and be prepared to start their own task by providing\n_activate_* ()-functions (for source elements).\n\n\nData sources, such as a file source, that can provide data from any\noffset with reasonable low latency.\n\n\nFilters that would like to provide a pull-mode scheduling over the\nwhole pipeline.\n\n\nParsers who can easily provide this by skipping a small part of\ntheir input and are thus essentially \"forwarding\" getrange requests\nliterally without any own processing involved. Examples include tag\nreaders (e.g. ID3) or single output parsers, such as a WAVE parser.\n\n\n"});