fragment_downloaded_cb({"url":"plugin-development/advanced/allocation.html#implementing-a-metadata-api","fragment":"Implementing a metadata API\nNext we can make an implementation for a registered metadata API GType.\nThe implementation details of a metadata API are kept in a GstMetaInfo\nstructure that you make available to the users of your metadata API\nimplementation with a my_example_meta_get_info () function and a\nconvenience MY_EXAMPLE_META_INFO macro. You also provide a method to\nadd your metadata implementation to a GstBuffer. Your\nmy-example-meta.h header file will need these additions:\nLet's have a look at how these functions are implemented in the\nmy-example-meta.c file.\ngst_meta_register () registers the implementation details, like the\nAPI that you implement and the size of the metadata structure, alongside\nmethods to initialize and free the memory area. You can also implement a\ntransform function that will be called when a certain transformation\n(identified by the quark and quark specific data) is performed on a\nbuffer.\nLastly, you implement a gst_buffer_add_*_meta() that adds the metadata\nimplementation to a buffer and sets the values of the metadata.\n"});