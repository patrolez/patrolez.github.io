fragment_downloaded_cb({"url":"plugin-development/advanced/events.html#upstream-events","fragment":"Upstream events\nUpstream events are generated by an element somewhere downstream in the\npipeline (example: a video sink may generate navigation events that\ninform upstream elements about the current position of the mouse\npointer). This may also happen indirectly on request of the application,\nfor example when the application executes a seek on a pipeline this seek\nrequest will be passed on to a sink element which will then in turn\ngenerate an upstream seek event.\nThe most common upstream events are seek events, Quality-of-Service\n(QoS) and reconfigure events.\nAn upstream event can be sent using the gst_pad_send_event function.\nThis function simply calls the default event handler of that pad. The\ndefault event handler of pads is gst_pad_event_default, and it\nbasically sends the event to the peer of the internally linked pad. So\nupstream events always arrive on the src pad of your element and are\nhandled by the default event handler except if you override that handler\nto handle it yourself. There are some specific cases where you have to\ndo that:\nIf you have multiple sink pads in your element. In that case you\nwill have to decide which one of the sink pads you will send the\nevent to (if not all of them).\nIf you need to handle that event locally. For example a navigation\nevent that you will want to convert before sending it upstream, or a\nQoS event that you want to handle.\nThe processing you will do in that event handler does not really matter\nbut there are important rules you have to absolutely respect because one\nbroken element event handler is breaking the whole pipeline event\nhandling. Here they are:\nAlways handle events you won't handle using the default\ngst_pad_event_default method. This method will depending on the\nevent, forward the event or drop it.\nIf you are generating some new event based on the one you received\ndon't forget to gst_event_unref the event you received.\nEvent handler functions are supposed to return TRUE or FALSE\nindicating if the event has been handled or not. Never simply return\nTRUE/FALSE in that handler except if you really know that you have\nhandled that event.\nRemember that the event handler might be called from a different\nthread than the streaming thread, so make sure you use appropriate\nlocking everywhere.\n\n\nIf you have multiple sink pads in your element. In that case you\nwill have to decide which one of the sink pads you will send the\nevent to (if not all of them).\n\n\nIf you need to handle that event locally. For example a navigation\nevent that you will want to convert before sending it upstream, or a\nQoS event that you want to handle.\n\n\n\n\nAlways handle events you won't handle using the default\ngst_pad_event_default method. This method will depending on the\nevent, forward the event or drop it.\n\n\nIf you are generating some new event based on the one you received\ndon't forget to gst_event_unref the event you received.\n\n\nEvent handler functions are supposed to return TRUE or FALSE\nindicating if the event has been handled or not. Never simply return\nTRUE/FALSE in that handler except if you really know that you have\nhandled that event.\n\n\nRemember that the event handler might be called from a different\nthread than the streaming thread, so make sure you use appropriate\nlocking everywhere.\n\n\n"});