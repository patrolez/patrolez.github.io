fragment_downloaded_cb({"url":"plugin-development/advanced/allocation.html#define-the-metadata-api","fragment":"Define the metadata API\nFirst we need to define what our API will look like and we have to\nregister this API to the system. This is important because the API\ndefinition will be used when elements negotiate what kind of metadata\nthey will exchange. The API definition also contains arbitrary tags that\ngive hints about what the metadata contains. This is important when we\nsee how metadata is preserved as buffers pass through the pipeline.\nIf you are making a new implementation of an existing API, you can skip\nthis step and move directly to the implementation.\nFirst we start with making the my-example-meta.h header file that will\ncontain the definition of the API and structure for our metadata.\nThe metadata API definition consists of the definition of the structure\nthat holds a gint and a string. The first field in the structure must be\na GstMeta.\nWe also define a my_example_meta_api_get_type () function that will\nregister our metadata API definition and a convenience\ngst_buffer_get_my_example_meta () macro that simply finds and returns the\nmetadata with our new API.\nLet's have a look at how the my_example_meta_api_get_type ()\nfunction is implemented in the my-example-meta.c file:\nAs you can see, it simply uses the gst_meta_api_type_register ()\nfunction to register a name and some tags for the API. The result is a\nnew GType pointer that defines the newly registered API.\n"});