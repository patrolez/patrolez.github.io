fragment_downloaded_cb({"url":"plugin-development/advanced/request.html#sometimes-pads","fragment":"Sometimes pads\nA “sometimes” pad is a pad that is created under certain conditions, but\nnot in all cases. This mostly depends on stream content: demuxers will\ngenerally parse the stream header, decide what elementary (video, audio,\nsubtitle, etc.) streams are embedded inside the system stream, and will\nthen create a sometimes pad for each of those elementary streams. At its\nown choice, it can also create more than one instance of each of those\nper element instance. The only limitation is that each newly created pad\nshould have a unique name. Sometimes pads are disposed when the stream\ndata is disposed, too (i.e. when going from PAUSED to the READY state).\nYou should not dispose the pad on EOS, because someone might\nre-activate the pipeline and seek back to before the end-of-stream\npoint. The stream should still stay valid after EOS, at least until the\nstream data is disposed. In any case, the element is always the owner of\nsuch a pad.\nThe example code below will parse a text file, where the first line is a\nnumber (n). The next lines all start with a number (0 to n-1), which is\nthe number of the source pad over which the data should be sent.\nThe code to parse this file and create the dynamic “sometimes” pads,\nlooks like this:\nNote that we use a lot of checks everywhere to make sure that the\ncontent in the file is valid. This has two purposes: first, the file\ncould be erroneous, in which case we prevent a crash. The second and\nmost important reason is that - in extreme cases - the file could be\nused maliciously to cause undefined behaviour in the plugin, which might\nlead to security issues. Always assume that the file could be used to\ndo bad things.\n"});