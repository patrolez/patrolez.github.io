fragment_downloaded_cb({"url":"plugin-development/advanced/media-types.html#typefind-functions-and-autoplugging","fragment":"Typefind Functions and Autoplugging\nWith only defining the types, we're not yet there. In order for a\nrandom data file to be recognized and played back as such, we need a way\nof recognizing their type out of the blue. For this purpose,\n“typefinding” was introduced. Typefinding is the process of detecting\nthe type of a data stream. Typefinding consists of two separate parts:\nfirst, there's an unlimited number of functions that we call typefind\nfunctions, which are each able to recognize one or more types from an\ninput stream. Then, secondly, there's a small engine which registers and\ncalls each of those functions. This is the typefind core. On top of this\ntypefind core, you would normally write an autoplugger, which is able to\nuse this type detection system to dynamically build a pipeline around an\ninput stream. Here, we will focus only on typefind functions.\nA typefind function usually lives in\ngst-plugins-base/gst/typefind/gsttypefindfunctions.c, unless there's a\ngood reason (like library dependencies) to put it elsewhere. The reason\nfor this centralization is to reduce the number of plugins that need to\nbe loaded in order to detect a stream's type. Below is an example that\nwill recognize AVI files, which start with a “RIFF” tag, then the size\nof the file and then an “AVI” tag:\nNote that gst-plugins/gst/typefind/gsttypefindfunctions.c has some\nsimplification macros to decrease the amount of code. Make good use of\nthose if you want to submit typefinding patches with new typefind\nfunctions.\nAutoplugging has been discussed in great detail in the Application\nDevelopment Manual.\n"});