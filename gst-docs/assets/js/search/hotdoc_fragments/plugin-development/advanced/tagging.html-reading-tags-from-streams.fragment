fragment_downloaded_cb({"url":"plugin-development/advanced/tagging.html#reading-tags-from-streams","fragment":"Reading Tags from Streams\nThe basic object for tags is a GstTagList. An element that is reading\ntags from a stream should create an empty taglist and fill this with\nindividual tags. Empty tag lists can be created with gst_tag_list_new (). Then, the element can fill the list using gst_tag_list_add () or gst_tag_list_add_values (). Note that elements often read\nmetadata as strings, but the values in the taglist might not necessarily\nbe strings - they need to be of the type the tag was registered as (the\nAPI documentation for each predefined tag should contain the type). Be\nsure to use functions like gst_value_transform () to make sure that\nyour data is of the right type. After data reading, you can send the\ntags downstream with the TAG event. When the TAG event reaches the sink,\nit will post the TAG message on the pipeline's GstBus for the\napplication to pick up.\nWe currently require the core to know the GType of tags before they are\nbeing used, so all tags must be registered first. You can add new tags\nto the list of known tags using gst_tag_register (). If you think the\ntag will be useful in more cases than just your own element, it might be\na good idea to add it to gsttag.c instead. That's up to you to decide.\nIf you want to do it in your own element, it's easiest to register the\ntag in one of your class init functions, preferably _class_init ().\n"});