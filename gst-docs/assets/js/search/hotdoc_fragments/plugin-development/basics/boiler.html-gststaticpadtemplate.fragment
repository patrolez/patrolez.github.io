fragment_downloaded_cb({"url":"plugin-development/basics/boiler.html#gststaticpadtemplate","fragment":"GstStaticPadTemplate\nA GstStaticPadTemplate is a description of a pad that the element will\n(or might) create and use. It contains:\nA short name for the pad.\nPad direction.\nExistence property. This indicates whether the pad exists always (an\n“always” pad), only in some cases (a “sometimes” pad) or only if the\napplication requested such a pad (a “request” pad).\nSupported types by this element (capabilities).\nFor example:\nThose pad templates are registered during the _class_init () function\nwith the gst_element_class_add_pad_template (). For this function you\nneed a handle to the GstPadTemplate which you can create from the static\npad template with gst_static_pad_template_get (). See below for more\ndetails on this.\nPads are created from these static templates in the element's _init ()\nfunction using gst_pad_new_from_static_template (). In order to create\na new pad from this template using gst_pad_new_from_static_template (), you will need to declare the pad template as a global variable. More on\nthis subject in Specifying the pads.\nThe last argument in a template is its type or list of supported types.\nIn this example, we use 'ANY', which means that this element will accept\nall input. In real-life situations, you would set a media type and\noptionally a set of properties to make sure that only supported input\nwill come in. This representation should be a string that starts with a\nmedia type, then a set of comma-separates properties with their\nsupported values. In case of an audio filter that supports raw integer\n16-bit audio, mono or stereo at any samplerate, the correct template\nwould look like this:\nValues surrounded by curly brackets (“{” and “}”) are lists, values\nsurrounded by square brackets (“[” and “]”) are ranges. Multiple sets\nof types are supported too, and should be separated by a semicolon\n(“;”). Later, in the chapter on pads, we will see how to use types\nto know the exact format of a stream: Specifying the pads.\n\n\nA short name for the pad.\n\n\nPad direction.\n\n\nExistence property. This indicates whether the pad exists always (an\n“always” pad), only in some cases (a “sometimes” pad) or only if the\napplication requested such a pad (a “request” pad).\n\n\nSupported types by this element (capabilities).\n\n\n"});