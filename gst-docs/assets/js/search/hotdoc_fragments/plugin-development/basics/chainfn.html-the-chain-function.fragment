fragment_downloaded_cb({"url":"plugin-development/basics/chainfn.html#the-chain-function","fragment":"The chain function\nThe chain function is the function in which all data processing takes\nplace. In the case of a simple filter, _chain () functions are mostly\nlinear functions - so for each incoming buffer, one buffer will go out,\ntoo. Below is a very simple implementation of a chain function:\nObviously, the above doesn't do much useful. Instead of printing that\nthe data is in, you would normally process the data there. Remember,\nhowever, that buffers are not always writeable.\nIn more advanced elements (the ones that do event processing), you may\nwant to additionally specify an event handling function, which will be\ncalled when stream-events are sent (such as caps, end-of-stream,\nnewsegment, tags, etc.).\nIn some cases, it might be useful for an element to have control over\nthe input data rate, too. In that case, you probably want to write a\nso-called loop-based element. Source elements (with only source pads)\ncan also be get-based elements. These concepts will be explained in\nthe advanced section of this guide, and in the section that specifically\ndiscusses source pads.\n"});