fragment_downloaded_cb({"url":"plugin-development/element-types/base-classes.html#writing-a-sink","fragment":"Writing a sink\nSinks are special elements in GStreamer. This is because sink elements\nhave to take care of preroll, which is the process that takes care\nthat elements going into the GST_STATE_PAUSED state will have buffers\nready after the state change. The result of this is that such elements\ncan start processing data immediately after going into the\nGST_STATE_PLAYING state, without requiring to take some time to\ninitialize outputs or set up decoders; all that is done already before\nthe state-change to GST_STATE_PAUSED successfully completes.\nPreroll, however, is a complex process that would require the same code\nin many elements. Therefore, sink elements can derive from the\nGstBaseSink base-class, which does preroll and a few other utility\nfunctions automatically. The derived class only needs to implement a\nbunch of virtual functions and will work automatically.\nThe base class implements much of the synchronization logic that a sink\nhas to perform.\nThe GstBaseSink base-class specifies some limitations on elements,\nthough:\nSink elements can derive from GstBaseSink using the usual GObject\nconvenience macro G_DEFINE_TYPE ():\nThe advantages of deriving from GstBaseSink are numerous:\nDerived implementations barely need to be aware of preroll, and do\nnot need to know anything about the technical implementation\nrequirements of preroll. The base-class does all the hard work.\nLess code to write in the derived class, shared code (and thus\nshared bugfixes).\nThere are also specialized base classes for audio and video, let's look\nat those a bit.\n\nIt requires that the sink only has one sinkpad. Sink elements that\nneed more than one sinkpad, must make a manager element with\nmultiple GstBaseSink elements inside.\n\n\n\nDerived implementations barely need to be aware of preroll, and do\nnot need to know anything about the technical implementation\nrequirements of preroll. The base-class does all the hard work.\n\n\nLess code to write in the derived class, shared code (and thus\nshared bugfixes).\n\n\n"});