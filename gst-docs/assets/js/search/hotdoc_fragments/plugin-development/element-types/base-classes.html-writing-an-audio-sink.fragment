fragment_downloaded_cb({"url":"plugin-development/element-types/base-classes.html#writing-an-audio-sink","fragment":"Writing an audio sink\nEssentially, audio sink implementations are just a special case of a\ngeneral sink. An audio sink has the added complexity that it needs to\nschedule playback of samples. It must match the clock selected in the\npipeline against the clock of the audio device and calculate and\ncompensate for drift and jitter.\nThere are two audio base classes that you can choose to derive from,\ndepending on your needs: GstAudioBasesink and GstAudioSink. The\naudiobasesink provides full control over how synchronization and\nscheduling is handled, by using a ringbuffer that the derived class\ncontrols and provides. The audiosink base-class is a derived class of\nthe audiobasesink, implementing a standard ringbuffer implementing\ndefault synchronization and providing a standard audio-sample clock.\nDerived classes of this base class merely need to provide a _open (), _close () and a _write () function implementation, and some optional functions. This should\nsuffice for many sound-server output elements and even most interfaces.\nMore demanding audio systems, such as Jack, would want to implement the\nGstAudioBaseSink base-class.\nThe GstAudioBaseSink has little to no limitations and should fit\nvirtually every implementation, but is hard to implement. The\nGstAudioSink, on the other hand, only fits those systems with a simple\nopen () / close () / write () API (which practically means pretty much all of them), but has the\nadvantage that it is a lot easier to implement. The benefits of this\nsecond base class are large:\nAutomatic synchronization, without any code in the derived class.\nAlso automatically provides a clock, so that other sinks (e.g. in\ncase of audio/video playback) are synchronized.\nFeatures can be added to all audiosinks by making a change in the\nbase class, which makes maintenance easy.\nDerived classes require only three small functions, plus some\nGObject boilerplate code.\nIn addition to implementing the audio base-class virtual functions,\nderived classes can (should) also implement the GstBaseSink set_caps () and get_caps () virtual functions for negotiation.\n\n\nAutomatic synchronization, without any code in the derived class.\n\n\nAlso automatically provides a clock, so that other sinks (e.g. in\ncase of audio/video playback) are synchronized.\n\n\nFeatures can be added to all audiosinks by making a change in the\nbase class, which makes maintenance easy.\n\n\nDerived classes require only three small functions, plus some\nGObject boilerplate code.\n\n\n"});