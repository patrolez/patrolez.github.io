fragment_downloaded_cb({"url":"plugin-development/element-types/base-classes.html#writing-a-source","fragment":"Writing a source\nIn the previous part, particularly Providing random access,\nwe have learned that some types of elements can provide random access. This\napplies most definitely to source elements reading from a randomly seekable\nlocation, such as file sources. However, other source elements may be better\ndescribed as a live source element, such as a camera source, an audio\ncard source and such; those are not seekable and do not provide\nbyte-exact access. For all such use cases, GStreamer provides two base\nclasses: GstBaseSrc for the basic source functionality, and\nGstPushSrc, which is a non-byte exact source base-class. The\npushsource base class itself derives from basesource as well, and thus\nall statements about the basesource apply to the pushsource, too.\nThe basesrc class does several things automatically for derived classes,\nso they no longer have to worry about it:\nFixes to GstBaseSrc apply to all derived classes automatically.\nAutomatic pad activation handling, and task-wrapping in case we get\nassigned to start a task ourselves.\nThe GstBaseSrc may not be suitable for all cases, though; it has\nlimitations:\nIt is possible to use special memory, such as X server memory pointers\nor mmap ()'ed memory areas, as data pointers in buffers returned from\nthe create() virtual function.\n\n\nFixes to GstBaseSrc apply to all derived classes automatically.\n\n\nAutomatic pad activation handling, and task-wrapping in case we get\nassigned to start a task ourselves.\n\n\n\nThere is one and only one sourcepad. Source elements requiring\nmultiple sourcepads must implement a manager bin and use multiple\nsource elements internally or make a manager element that uses a\nsource element and a demuxer inside.\n\n"});