fragment_downloaded_cb({"url":"plugin-development/appendix/checklist-element.html#debugging","fragment":"Debugging\nElements should never use their standard output for debugging\n(using functions such as printf () or g_print ()). Instead, elements should use the logging\nfunctions provided by GStreamer, named GST_DEBUG (), GST_LOG (),\nGST_INFO (), GST_WARNING () and GST_ERROR (). The various\nlogging levels can be turned on and off at runtime and can thus be\nused for solving issues as they turn up. Instead of GST_LOG () (as\nan example), you can also use GST_LOG_OBJECT () to print the object that you're logging output for.\nIdeally, elements should use their own debugging category. Most\nelements use the following code to do that:\nAt runtime, you can turn on debugging using the commandline option\n--gst-debug=myelement:5.\nElements should use GST_DEBUG_FUNCPTR when setting pad functions\nor overriding element class methods, for example:\nThis makes debug output much easier to read later on.\nElements that are aimed for inclusion into one of the GStreamer\nmodules should ensure consistent naming of the element name,\nstructures and function names. For example, if the element type is\nGstYellowFooDec, functions should be prefixed with\ngst_yellow_foo_dec_ and the element should be registered as\n'yellowfoodec'. Separate words should be separate in this scheme, so\nit should be GstFooDec and gst_foo_dec, and not GstFoodec and\ngst_foodec.\n\n\nElements should never use their standard output for debugging\n(using functions such as printf () or g_print ()). Instead, elements should use the logging\nfunctions provided by GStreamer, named GST_DEBUG (), GST_LOG (),\nGST_INFO (), GST_WARNING () and GST_ERROR (). The various\nlogging levels can be turned on and off at runtime and can thus be\nused for solving issues as they turn up. Instead of GST_LOG () (as\nan example), you can also use GST_LOG_OBJECT () to print the object that you're logging output for.\n\n\nIdeally, elements should use their own debugging category. Most\nelements use the following code to do that:\nGST_DEBUG_CATEGORY_STATIC (myelement_debug);\n#define GST_CAT_DEFAULT myelement_debug\n\n[..]\n\nstatic void\ngst_myelement_class_init (GstMyelementClass *klass)\n{\n[..]\n  GST_DEBUG_CATEGORY_INIT (myelement_debug, \"myelement\",\n               0, \"My own element\");\n}\n\n\nAt runtime, you can turn on debugging using the commandline option\n--gst-debug=myelement:5.\n\n\nElements should use GST_DEBUG_FUNCPTR when setting pad functions\nor overriding element class methods, for example:\ngst_pad_set_event_func (myelement->srcpad,\n    GST_DEBUG_FUNCPTR (my_element_src_event));\n\n\nThis makes debug output much easier to read later on.\n\n\nElements that are aimed for inclusion into one of the GStreamer\nmodules should ensure consistent naming of the element name,\nstructures and function names. For example, if the element type is\nGstYellowFooDec, functions should be prefixed with\ngst_yellow_foo_dec_ and the element should be registered as\n'yellowfoodec'. Separate words should be separate in this scheme, so\nit should be GstFooDec and gst_foo_dec, and not GstFoodec and\ngst_foodec.\n\n\n"});