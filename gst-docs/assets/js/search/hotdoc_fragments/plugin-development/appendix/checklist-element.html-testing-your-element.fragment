fragment_downloaded_cb({"url":"plugin-development/appendix/checklist-element.html#testing-your-element","fragment":"Testing your element\ngst-launch is not a good tool to show that your element is\nfinished. Applications such as Rhythmbox and Totem (for GNOME) or\nAmaroK (for KDE) are. gst-launch will not test various things\nsuch as proper clean-up on reset, event handling, querying and so\non.\nParsers and demuxers should make sure to check their input. Input\ncannot be trusted. Prevent possible buffer overflows and the like.\nFeel free to error out on unrecoverable stream errors. Test your\ndemuxer using stream corruption elements such as breakmydata\n(included in gst-plugins). It will randomly insert, delete and\nmodify bytes in a stream, and is therefore a good test for\nrobustness. If your element crashes when adding this element, your\nelement needs fixing. If it errors out properly, it's good enough.\nIdeally, it'd just continue to work and forward data as much as\npossible.\nDemuxers should not assume that seeking works. Be prepared to work\nwith unseekable input streams (e.g. network sources) as well.\nSources and sinks should be prepared to be assigned another clock\nthan the one they expose themselves. Always use the provided clock\nfor synchronization, else you'll get A/V sync issues.\n\n\ngst-launch is not a good tool to show that your element is\nfinished. Applications such as Rhythmbox and Totem (for GNOME) or\nAmaroK (for KDE) are. gst-launch will not test various things\nsuch as proper clean-up on reset, event handling, querying and so\non.\n\n\nParsers and demuxers should make sure to check their input. Input\ncannot be trusted. Prevent possible buffer overflows and the like.\nFeel free to error out on unrecoverable stream errors. Test your\ndemuxer using stream corruption elements such as breakmydata\n(included in gst-plugins). It will randomly insert, delete and\nmodify bytes in a stream, and is therefore a good test for\nrobustness. If your element crashes when adding this element, your\nelement needs fixing. If it errors out properly, it's good enough.\nIdeally, it'd just continue to work and forward data as much as\npossible.\n\n\nDemuxers should not assume that seeking works. Be prepared to work\nwith unseekable input streams (e.g. network sources) as well.\n\n\nSources and sinks should be prepared to be assigned another clock\nthan the one they expose themselves. Always use the provided clock\nfor synchronization, else you'll get A/V sync issues.\n\n\n"});