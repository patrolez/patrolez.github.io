fragment_downloaded_cb({"url":"frequently-asked-questions/troubleshooting.html#what-can-i-do-if-i-get-a-segmentation-fault","fragment":"What can I do if I get a segmentation fault?\nThe GStreamer application I used stops with a segmentation fault. What can I do?\nThe first point of contact for any problems with a GStreamer application\nshould be the developers of that application. They will be able to investigate\nwhether the problem lies with the application or with GStreamer, and will pass\non any issues to GStreamer developers if needed.\nThere are two things you can do. If you compiled GStreamer with\nspecific optimization compilation flags, you should try recompiling\nGStreamer, the application and the plug-ins without any optimization\nflags. This allows you to verify if the problem is due to optimization\nor due to bad code. Second, it will also allow you to provide a\nreasonable backtrace in case the segmentation fault still occurs.\nThe second thing you can do is look at the backtrace to get an idea of\nwhere things are going wrong, or give us an idea of what is going wrong.\nTo provide a backtrace, you should\n(If the application is in a source tree instead of installed on the\nsystem, you might want to put \"libtool\" before \"gdb\")\nat the (gdb) prompt\nType \"run\" at the (gdb) prompt and wait for the application to\nsegfault. The application will run a lot slower, however.\nAfter the segfault, type \"bt\" to get a backtrace. This is a stack of\nfunction calls detailing the path from main () to where the code is\ncurrently at.\nIf the application you're trying to debug contains threads, it is\nalso useful to do\nand get backtraces of all of the threads involved, by switching to a\ndifferent thread using \"thread (number)\" and then again requesting a\nbacktrace using \"bt\".\n"});