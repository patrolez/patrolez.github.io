fragment_downloaded_cb({"url":"frequently-asked-questions/developing.html#what-kind-of-versioning-scheme-does-gstreamer-use","fragment":"What kind of versioning scheme does GStreamer use?\nFor public releases, GStreamer uses a standard MAJOR.MINOR.MICRO\nversion scheme. If the release consists of mostly bug fixes or\nincremental changes, the MICRO version is incremented. If the release\ncontains big changes, the MINOR version is incremented. A change in the\nMAJOR version indicates incompatible API or ABI changes, which happens\nvery rarely (the last one dates back to 2012). This is also known as\nsemantic versioning.\nEven MINOR numbers indicate stable releases: 1.0.x, 1.2.x, 1.4.x, 1.6.x,\n1.8.x, and 1.10.x are our stable release series. Odd MINOR numbers are used\nfor unstable development releases and prereleases which should only be\nused temporarily for testing; your help in testing these tarballs and packages\nis very much appreciated!\nDuring the development cycle, GStreamer also uses a fourth or NANO\nnumber. If this number is 1, then it's a git development version. Any\ntarball or package that has a nano number of 1 is made from git and thus\nnot supported. Additionally, if you didn't get this package or tarball\nfrom the GStreamer team, don't have high hopes on it doing whatever you\nwant it to do.\n"});