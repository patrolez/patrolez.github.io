fragment_downloaded_cb({"url":"deploying/index.html#shared-vs-private-gstreamer-deployment","fragment":"Shared vs. private GStreamer deployment\nYou can install GStreamer in the target machine in the same way\nyou installed it in your development machine, you can deploy it\nprivately, or you can even customize it before deploying. Here you have\na few options:\nShared GStreamer\nGStreamer is installed independently of your application, as a prerequisite, in a common place in the target computer (C:\\Program Files, for example). You application uses an environment variable to locate it.\nPrivate GStreamer with dynamic linking\nYour application deploys GStreamer to a private folder.\nPrivate GStreamer with static linking\nYour application links statically against GStreamer, so it effectively becomes part of your application binary.\nThe following pages give further directions for some of the above\noptions.\n\nIf more than one application in the target computer uses GStreamer, it is installed only once and shared, reducing disk usage.\n\n\nTampering or corruption of the shared GStreamer installation can make your application fail.\n\n\nYour GStreamer is independent of other applications, so it does not get corrupted if other applications mess with their installations.\n\n\nIf multiple applications in the target computer use GStreamer, it won’t be shared, consuming more disk space.\n\n\nYour GStreamer is independent of other applications, so it does not get corrupted if other applications mess with their installations.\nDeployment for ordinary users is easier as you have fewer files.\nThis is your only choice on iOS.\n\n\nIf multiple applications in the target computer use GStreamer, it won’t be shared, consuming more disk space.\nYou need to provide the required files for your users to re-link your application against a modified GStreamer as required by the license.\n\n\nPlatform-specific packaging methods:\n\nFor Mac OS X\n\nFor Windows\n\n\n\nMultiplatform deployment using\nCerbero\n\n\nFor Mac OS X\n\nFor Windows\n\n\n\n\n\n\n\n\n\n\n\nPros\nCons\n\n\n\n\n\nShared GStreamer\nGStreamer is installed independently of your application, as a prerequisite, in a common place in the target computer (C:\\Program Files, for example). You application uses an environment variable to locate it.\n\n\nIf more than one application in the target computer uses GStreamer, it is installed only once and shared, reducing disk usage.\n\n\nTampering or corruption of the shared GStreamer installation can make your application fail.\n\n\n\n\nPrivate GStreamer with dynamic linking\nYour application deploys GStreamer to a private folder.\n\n\nYour GStreamer is independent of other applications, so it does not get corrupted if other applications mess with their installations.\n\n\nIf multiple applications in the target computer use GStreamer, it won’t be shared, consuming more disk space.\n\n\n\n\nPrivate GStreamer with static linking\nYour application links statically against GStreamer, so it effectively becomes part of your application binary.\n\n\nYour GStreamer is independent of other applications, so it does not get corrupted if other applications mess with their installations.\nDeployment for ordinary users is easier as you have fewer files.\nThis is your only choice on iOS.\n\n\nIf multiple applications in the target computer use GStreamer, it won’t be shared, consuming more disk space.\nYou need to provide the required files for your users to re-link your application against a modified GStreamer as required by the license.\n\n\n\n\n"});