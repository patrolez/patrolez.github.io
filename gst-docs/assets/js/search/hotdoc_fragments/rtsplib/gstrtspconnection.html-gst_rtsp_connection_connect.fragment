fragment_downloaded_cb({"url":"rtsplib/gstrtspconnection.html#gst_rtsp_connection_connect","fragment":"\n\tgst_rtsp_connection_connect\n\n\n\tGstRtsp.RTSPConnection.prototype.connect\n\n\n\tGstRtsp.RTSPConnection.connect\n\nAttempt to connect to the url of conn made with\ngst_rtsp_connection_create. If timeout is NULL this function can block\nforever. If timeout contains a valid timeout, this function will return\nGST_RTSP_ETIMEOUT after the timeout expired.\nThis function can be cancelled with gst_rtsp_connection_flush.\nParameters:\na GstRTSPConnection\na GTimeVal timeout\nGST_RTSP_OK when a connection could be made.\n\n\tdeprecated\t\t\t: 1.18\n\t\t\nAttempt to connect to the url of conn made with\nGstRtsp.prototype.rtsp_connection_create. If timeout is null this function can block\nforever. If timeout contains a valid timeout, this function will return\nGstRtsp.RTSPResult.ETIMEOUT after the timeout expired.\nThis function can be cancelled with GstRtsp.RTSPConnection.prototype.flush.\nParameters:\na GstRtsp.RTSPConnection\na GTimeVal timeout\nGstRtsp.RTSPResult.OK when a connection could be made.\n\n\tdeprecated\t\t\t: 1.18\n\t\t\nAttempt to connect to the url of conn made with\nGstRtsp.rtsp_connection_create. If timeout is None this function can block\nforever. If timeout contains a valid timeout, this function will return\nGstRtsp.RTSPResult.ETIMEOUT after the timeout expired.\nThis function can be cancelled with GstRtsp.RTSPConnection.flush.\nParameters:\na GstRtsp.RTSPConnection\na GTimeVal timeout\nGstRtsp.RTSPResult.OK when a connection could be made.\n\n\tdeprecated\t\t\t: 1.18\n\t\t\n"});