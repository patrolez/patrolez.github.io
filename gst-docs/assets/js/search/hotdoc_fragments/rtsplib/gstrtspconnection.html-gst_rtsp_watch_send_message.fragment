fragment_downloaded_cb({"url":"rtsplib/gstrtspconnection.html#gst_rtsp_watch_send_message","fragment":"\n\tgst_rtsp_watch_send_message\n\n\n\tGstRtsp.RTSPWatch.prototype.send_message\n\n\n\tGstRtsp.RTSPWatch.send_message\n\nSend a message using the connection of the watch. If it cannot be sent\nimmediately, it will be queued for transmission in watch. The contents of\nmessage will then be serialized and transmitted when the connection of the\nwatch becomes writable. In case the message is queued, the ID returned in\nid will be non-zero and used as the ID argument in the message_sent\ncallback.\nParameters:\na GstRTSPWatch\na GstRTSPMessage\nlocation for a message ID or NULL\nGST_RTSP_OK on success.\nSend a message using the connection of the watch. If it cannot be sent\nimmediately, it will be queued for transmission in watch. The contents of\nmessage will then be serialized and transmitted when the connection of the\nwatch becomes writable. In case the message is queued, the ID returned in\nid will be non-zero and used as the ID argument in the message_sent\ncallback.\nParameters:\na GstRtsp.RTSPWatch\na GstRtsp.RTSPMessage\nReturns a tuple made of:\nGstRtsp.RTSPResult.OK on success.\nGstRtsp.RTSPResult.OK on success.\nSend a message using the connection of the watch. If it cannot be sent\nimmediately, it will be queued for transmission in watch. The contents of\nmessage will then be serialized and transmitted when the connection of the\nwatch becomes writable. In case the message is queued, the ID returned in\nid will be non-zero and used as the ID argument in the message_sent\ncallback.\nParameters:\na GstRtsp.RTSPWatch\na GstRtsp.RTSPMessage\nReturns a tuple made of:\nGstRtsp.RTSPResult.OK on success.\nGstRtsp.RTSPResult.OK on success.\n"});