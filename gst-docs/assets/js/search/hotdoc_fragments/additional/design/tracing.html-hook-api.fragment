fragment_downloaded_cb({"url":"additional/design/tracing.html#hook-api","fragment":"Hook api\nWeâ€™ll wrap interesting api calls with two macros, e.g. gst_pad_push():\nTODO(ensonic): gcc has some magic for wrapping functions -\nhttp://gcc.gnu.org/onlinedocs/gcc/Constructing-Calls.html -\nhttp://www.clifford.at/cfun/gccfeat/#gccfeat05.c\nTODO(ensonic): we should eval if we can use something like jump_label\nin the kernel - http://lwn.net/Articles/412072/ +\nhttp://lwn.net/Articles/435215/ -\nhttp://lxr.free-electrons.com/source/kernel/jump_label.c -\nhttp://lxr.free-electrons.com/source/include/linux/jump_label.h -\nhttp://lxr.free-electrons.com/source/arch/x86/kernel/jump_label.c\nTODO(ensonic): liblttng-ust provides such a mechanism for user-space -\nbut this is mostly about logging traces - it is linux specific :/\nIn addition to api hooks we should also provide timer hooks. Interval\ntimers are useful to get e.g. resource usage snapshots. Also absolute\ntimers might make sense. All this could be implemented with a clock\nthread. We can use another env-var GST_TRACE_TIMERS=\"100ms,75ms\" to\nconfigure timers and then pass them to the tracers like,\nGST_TRACERS=\"rusage(timer=100ms);meminfo(timer=75ms)\". Maybe we can\ncreate them ad-hoc and avoid the GST_TRACE_TIMERS var.\nHooks (* already implemented)\n"});