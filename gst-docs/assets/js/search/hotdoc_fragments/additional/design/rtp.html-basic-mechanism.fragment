fragment_downloaded_cb({"url":"additional/design/rtp.html#basic-mechanism","fragment":"Basic mechanism\nrtpbin knows for which session ids the given auxiliary element belong\nto. It's done through \"set-aux-send\", for rtpauxsend kind, and through\n\"set-aux-receive\" for rtpauxreceive kind. You can call those signals as\nmuch as needed for each auxiliary element. So for aux elements that work\nin SSRC-multiplexed mode this signal action is called only one time.\nThe user has to call those action signals before to request the\ndifferents rtpbin pads. rtpbin is in charge to link those auxiliary\nelements with the sessions, and on receiver side, rtpbin has also to\nhandle the link with ssrcdemux.\nrtpbin never knows if the given rtpauxsend is actually a rtprtxsend\nelement or another aux element. rtpbin never knows if the given\nrtpauxreceive is actually a rtprtxreceive element or another aux\nelement. rtpbin has to be kept generic so that more aux elements can be\nadded later without changing rtpbin.\nIt's currently not possible to use rtpbin with auxiliary stream from\ngst-launch. We can discuss about having the ability for rtpbin to\ninstanciate itself the special aux elements rtprtxsend and rtprtxreceive\nbut they need to be configured (\"payload-type\" and \"payload-types\"\nproperties) to make retransmission work. So having several rtprtxsend\nand rtprtxreceive in a rtpbin would require a lot of properties to\nmanage them form rtpbin. And for each auxiliary elements.\nIf you want to use rtprtxreceive and rtprtpsend from gst-launch you have\nto use rtpsession, ssrcdemux and rtpjitterbuffer elements yourself. See\ngtk-doc of rtprtxreceive for an example.\n"});