fragment_downloaded_cb({"url":"additional/design/sparsestreams.html#still-framemenu-support","fragment":"Still frame/menu support\nStill frames in DVD menus are different because they do not introduce a gap\nin the data timestamps. Instead, they represent a pause in the presentation\nof a stream. Correctly performing the wait requires some synchronisation with\ndownstream elements.\nIn this scenario, an upstream element that wants to execute a still frame\nperforms the following steps:\nSend all data before the still frame wait\nSend a DRAIN event to ensure that all data has been played\ndownstream.\nwait on the clock for the required duration, possibly interrupting\nif necessary due to an intervening activity (such as a user\nnavigation)\nFLUSH the pipeline using a normal flush sequence (FLUSH_START,\nchain-lock, FLUSH_STOP)\nSend a SEGMENT to restart playback with the next timestamp in the\nstream.\nThe upstream element performing the wait must only do so when in the PLAYING\nstate. During PAUSED, the clock will not be running, and may not even have\nbeen distributed to the element yet.\nDRAIN is a new event that will block on a src pad until all data downstream\nhas been played out.\nFlushing after completing the still wait is to ensure that data after the wait\nis played correctly. Without it, sinks will consider the first buffers\n(x seconds, where x is the duration of the wait that occurred) to be\narriving late at the sink, and they will be discarded instead of played.\n\n\nSend all data before the still frame wait\n\n\nSend a DRAIN event to ensure that all data has been played\ndownstream.\n\n\nwait on the clock for the required duration, possibly interrupting\nif necessary due to an intervening activity (such as a user\nnavigation)\n\n\nFLUSH the pipeline using a normal flush sequence (FLUSH_START,\nchain-lock, FLUSH_STOP)\n\n\nSend a SEGMENT to restart playback with the next timestamp in the\nstream.\n\n\n"});