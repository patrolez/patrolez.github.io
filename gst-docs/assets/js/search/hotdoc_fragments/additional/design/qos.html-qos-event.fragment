fragment_downloaded_cb({"url":"additional/design/qos.html#qos-event","fragment":"QoS event\nThe QoS event is generated by an element that synchronizes against the\nclock. It travels upstream and contains the following fields:\ntype: GST_TYPE_QOS_TYPE: The type of the QoS event, we have the\nfollowing types and the default type is GST_QOS_TYPE_UNDERFLOW:\nGST_QOS_TYPE_OVERFLOW:  an element is receiving buffers too fast and can't\nkeep up processing them. Upstream should reduce the rate.\nGST_QOS_TYPE_UNDERFLOW: an element is receiving buffers too slowly\nand has to drop them because they are too late. Upstream should\nincrease the processing rate.\nGST_QOS_TYPE_THROTTLE:  the application is asking to add extra delay\nbetween buffers, upstream is allowed to drop buffers\ntimestamp: G_TYPE_UINT64: The timestamp on the buffer that\ngenerated the QoS event. These timestamps are expressed in total\nrunning_time in the sink so that the value is ever increasing.\njitter: G_TYPE_INT64: The difference of that timestamp against the\ncurrent clock time. Negative values mean the timestamp was on time.\nPositive values indicate the timestamp was late by that amount. When\nbuffers are received in time and throttling is not enabled, the QoS\ntype field is set to OVERFLOW. When throttling, the jitter contains\nthe throttling delay added by the application and the type is set to\nTHROTTLE.\nproportion: G_TYPE_DOUBLE: Long term prediction of the ideal rate\nrelative to normal rate to get optimal quality.\nThe rest of this document deals with how these values can be calculated\nin a sink and how the values can be used by other elements to adjust\ntheir operations.\n\n\ntype: GST_TYPE_QOS_TYPE: The type of the QoS event, we have the\nfollowing types and the default type is GST_QOS_TYPE_UNDERFLOW:\n\n\nGST_QOS_TYPE_OVERFLOW:  an element is receiving buffers too fast and can't\nkeep up processing them. Upstream should reduce the rate.\n\n\nGST_QOS_TYPE_UNDERFLOW: an element is receiving buffers too slowly\nand has to drop them because they are too late. Upstream should\nincrease the processing rate.\n\n\nGST_QOS_TYPE_THROTTLE:  the application is asking to add extra delay\nbetween buffers, upstream is allowed to drop buffers\n\n\n\n\ntimestamp: G_TYPE_UINT64: The timestamp on the buffer that\ngenerated the QoS event. These timestamps are expressed in total\nrunning_time in the sink so that the value is ever increasing.\n\n\njitter: G_TYPE_INT64: The difference of that timestamp against the\ncurrent clock time. Negative values mean the timestamp was on time.\nPositive values indicate the timestamp was late by that amount. When\nbuffers are received in time and throttling is not enabled, the QoS\ntype field is set to OVERFLOW. When throttling, the jitter contains\nthe throttling delay added by the application and the type is set to\nTHROTTLE.\n\n\nproportion: G_TYPE_DOUBLE: Long term prediction of the ideal rate\nrelative to normal rate to get optimal quality.\n\n\n\n\nGST_QOS_TYPE_OVERFLOW:  an element is receiving buffers too fast and can't\nkeep up processing them. Upstream should reduce the rate.\n\n\nGST_QOS_TYPE_UNDERFLOW: an element is receiving buffers too slowly\nand has to drop them because they are too late. Upstream should\nincrease the processing rate.\n\n\nGST_QOS_TYPE_THROTTLE:  the application is asking to add extra delay\nbetween buffers, upstream is allowed to drop buffers\n\n\n"});