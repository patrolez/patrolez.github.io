fragment_downloaded_cb({"url":"additional/design/orc-integration.html#advanced-usage","fragment":"Advanced Usage\nThe Holy Grail of Orc usage is to programmatically generate Orc code at\nruntime, have liborc compile it into binary code at runtime, and then\nexecute this code. Currently, the best example of this is in\nSchroedinger. An example of how this would be used is audioconvert:\ngiven an input format, channel position manipulation, dithering and\nquantizing configuration, and output format, a Orc code generator would\ncreate an OrcProgram, add the appropriate instructions to do each step\nbased on the configuration, and then compile the program. Successfully\ncompiling the program would return a function pointer that can be called\nto perform the operation.\nThis sort of advanced usage requires structural changes to current\nplugins (e.g., audioconvert) and will probably be developed\nincrementally. Moreover, if such code is intended to be used without Orc\nas strict build/runtime requirement, two codepaths would need to be\ndeveloped and tested. For this reason, until GStreamer requires Orc, I\nthink it's a good idea to restrict such advanced usage to the cog plugin\nin -bad, which requires Orc.\n"});