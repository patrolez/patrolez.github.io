fragment_downloaded_cb({"url":"additional/design/adaptive-demuxer.html#stream-selection","fragment":"Stream Selection\nWhen sending GST_EVENT_STREAM_COLLECTION downstream, the adaptive demuxer also\nspecifies on the event that it can handle stream-selection. Downstream elements\n(i.e. decodebin3) won't attempt to do any selection but will\nhandle/decode/expose all the streams provided by the adaptive demuxer (including\nstreams that get added/removed at runtime).\nWhen handling a GST_EVENT_SELECT_STREAMS, the adaptive demuxer will:\nThe actual changes in output (because of a stream selection change) are done in\nthe output thread\nIf a track is no longer selected and there are no candidate replacement tracks\nof the same type, the associated output/pad is removed and the track is\ndrained.\nIf a track is selected and doesn't have a candidate replacement slot of the\nsame type, a new output/pad is added for that track\nIf a track is selected and has a candidate replacement slot, it will only be\nswitched if the track it is replacing is empty OR when it has enough\nbuffering so the switch can happen without re-triggering buffering.\n\nmark the requested tracks as selected (and no-longer requested ones as not\nselected)\ninstruct the streams associated to no-longer selected tracks to stop\nset the current output position on streams associated to newly selected\ntracks and instruct them to be started\nreturn\n\n\n\nIf a track is no longer selected and there are no candidate replacement tracks\nof the same type, the associated output/pad is removed and the track is\ndrained.\n\n\nIf a track is selected and doesn't have a candidate replacement slot of the\nsame type, a new output/pad is added for that track\n\n\nIf a track is selected and has a candidate replacement slot, it will only be\nswitched if the track it is replacing is empty OR when it has enough\nbuffering so the switch can happen without re-triggering buffering.\n\n\n"});