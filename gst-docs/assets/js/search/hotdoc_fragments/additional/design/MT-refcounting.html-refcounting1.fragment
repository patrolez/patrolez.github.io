fragment_downloaded_cb({"url":"additional/design/MT-refcounting.html#refcounting1","fragment":"refcounting\nAll new objects created have the FLOATING flag set. This means that the object\nis not owned or managed yet by anybody other than the one holding a reference\nto the object. The object in this state has a reference count of 1.\nVarious object methods can take ownership of another object, this means that\nafter calling a method on object A with an object B as an argument, the object\nB is made sole property of object A. This means that after the method call you\nare not allowed to access the object anymore unless you keep an extra\nreference to the object. An example of such a method is the _bin_add() method.\nAs soon as this function is called in a Bin, the element passed as an argument\nis owned by the bin and you are not allowed to access it anymore without\ntaking a _ref() before adding it to the bin. The reason being that after the\n_bin_add() call disposing the bin also destroys the element.\nTaking ownership of an object happens through the process of \"sinking\" the\nobject. the _sink() method on an object will decrease the refcount of the\nobject if the FLOATING flag is set. The act of taking ownership of an object\nis then performed as a _ref() followed by a _sink() call on the object.\nThe float/sink process is very useful when initializing elements that will\nthen be placed under control of a parent. The floating ref keeps the object\nalive until it is parented, and once the object is parented you can forget\nabout it.\nalso see relations\n"});