fragment_downloaded_cb({"url":"additional/design/progress.html#progress-reporting","fragment":"Progress Reporting\nThis document describes the design and use cases for the progress\nreporting messages.\nPROGRESS messages are posted on the bus to inform the application about\nthe progress of asynchronous operations in the pipeline. This should not\nbe confused with asynchronous state changes.\nWe accommodate for the following requirements:\nApplication is informed when an async operation starts and\ncompletes.\nIt should be possible for the application to generically detect\ncommon operations and incorporate their progress into the GUI.\nApplications can cancel pending operations by doing regular state\nchanges.\nApplications should be able to wait for completion of async\noperations.\nWe allow for the following scenarios:\nElements want to inform the application about asynchronous DNS\nlookups and pending network requests. This includes starting and\ncompleting the lookup.\nElements opening devices and resources asynchronously.\nApplications having more freedom to implement timeout and\ncancelation of operations that currently block the state changes or\nhappen invisibly behind the scenes.\n\n\nApplication is informed when an async operation starts and\ncompletes.\n\n\nIt should be possible for the application to generically detect\ncommon operations and incorporate their progress into the GUI.\n\n\nApplications can cancel pending operations by doing regular state\nchanges.\n\n\nApplications should be able to wait for completion of async\noperations.\n\n\n\n\nElements want to inform the application about asynchronous DNS\nlookups and pending network requests. This includes starting and\ncompleting the lookup.\n\n\nElements opening devices and resources asynchronously.\n\n\nApplications having more freedom to implement timeout and\ncancelation of operations that currently block the state changes or\nhappen invisibly behind the scenes.\n\n\n"});