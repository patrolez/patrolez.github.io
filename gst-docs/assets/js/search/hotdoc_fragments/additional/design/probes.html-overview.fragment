fragment_downloaded_cb({"url":"additional/design/probes.html#overview","fragment":"Overview\nThe function gst_pad_add_probe() is used to add a probe to a pad. It accepts a\nprobe type mask and a callback.\nThe function returns a gulong that uniquely identifies the probe and that can\nbe used to remove the probe with gst_pad_remove_probe():\nThe mask parameter is a bitwise or of the following flags:\nWhen adding a probe with the IDLE or BLOCK flag, the probe will become a\nblocking probe (see below). Otherwise the probe will be a DATA probe.\nThe datatype and scheduling selector flags are used to select what kind of\ndatatypes and scheduling modes should be allowed in the callback.\nThe blocking flags must match the triggered probe exactly.\nThe probe callback is defined as:\nA probe info structure is passed as an argument and its type is guaranteed\nto match the mask that was used to register the callback. The data item in the\ninfo contains type specific data, which is usually the data item that is blocked\nor NULL when no data item is present.\nThe probe can return any of the following return values:\nGST_PAD_PROBE_OK is the normal return value. _DROP will drop the item that is\ncurrently being probed. GST_PAD_PROBE_REMOVE: remove the currently executing probe from the\nlist of probes.\nGST_PAD_PROBE_PASS is relevant for blocking probes and will temporarily unblock the\npad and let the item through, it will then block again on the next item.\n"});