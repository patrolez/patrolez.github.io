fragment_downloaded_cb({"url":"additional/design/rtp.html#basic-mechanism2","fragment":"Basic mechanism\nThe same rtprtxreceive instance can receive several master streams and\nseveral retransmission streams. So it will try to dynamically associate\nan rtx ssrc with its master ssrc, so that it can reconstruct the original\nfrom the proper rtx packet.\nThe algorithm is based on the fact that seqnums of different streams\n(considering all master and all rtx streams) evolve at a different rate.\nIt means that the initial seqnum is random for each one and the offset\ncould also be different. So that they are statistically all different at\na given time. If bad luck then the association is delayed to the next\nrtx request.\nThe algorithm also needs to know if a given packet is an rtx packet or\nnot. To know this information there is the rtx-payload-types property.\nFor now the user has to configure it but later it will automatically\nretreive this information from SDP. It needs to know if the current\npacket is rtx or not in order to know if it can extract the OSN from the\npayload. Otherwise it would extract the OSN even on master streams which\nmeans nothing and so it could do bad things. In theory maybe it could\nwork but we have this information in SDP so why not use it to avoid\nbad associations.\nNote that it also means that several master streams can have the same\npayload type. And also several rtx streams can have the same payload\ntype. So the information from SDP which gives us which rtx payload type\nbelongs to a given master payload type is not enough to do the association\nbetween rtx ssrc and master ssrc.\nrtprtxreceive works in SSRC-multiplexed mode, so it always has one sink\nand src pad.\n"});