fragment_downloaded_cb({"url":"additional/design/tracing.html#livegraphers","fragment":"live-graphers\nMaybe we can even feed the log into existing live graphers, with a\nlittle driver * https://github.com/dkogan/feedgnuplot\nshould tracers log into the debug.log or into a separate log?\nseparate log\nuse a binary format?\nworse performance (we’re writing two logs at the same time)\nneed to be careful when people to GST_DEBUG_CHANNEL=stderr and\nGST_TRACE_CHANNEL=stderr (use a shared channel, but what about the\nformats?)\ndebug log\nthe tracer subsystem would need to log the GST_TRACE at a level\nthat is active\nshould the tracer call gst_debug_category_set_threshold() to\nensure things work, even though the levels don’t make a lot of sense\nhere\nmake logging a tracer (a hook in gst_debug_log_valist(), move\ngst_debug_log_default() to the tracer module)\nlog all debug log to the tracer log, some of the current logging\nstatements can be replaced by generic logging as shown in the\nlog-tracer\nadd tools/gst-debug to extract a human readable debug log from the\ntrace log\nwe could maintain a list of log functions, where\ngst_tracer_log_trace() is the default one. This way e.g.\ngst-validate could consume the traces directly.\nwhen hooking into a timer, should we just have some predefined\nintervals?\ncan we add a tracer module that registers the timer hook? then we\ncould do GST_TRACER=\"timer(10ms);rusage\" right now the tracer hooks\nare defined as an enum though.\nwhen connecting to a running app, we can’t easily get the current\nstate if logging is using a socket, as past events are not\nexplicitly stored, we could determine the current topology and emit\nevents with GST_CLOCK_TIME_NONE as ts to indicate that the events\nare synthetic.\nwe need stable ids for scopes (threads, elements, pads)\nthe address can be reused\nwe can use gst_util_seqnum_next()\nsomething like gst_object_get_path_string() won’t work as\nobjects are initially without parent\nright now the tracing-hooks are enabled/disabled from configure with\n--{enable,disable}-gst-tracer-hooks The tracer code and the plugins\nare still built though. We should add a\n--{enable,disable}-gst-tracer to disabled the whole system,\nallthough this is a bit confusing with the --{enable,disable}-trace\noption we have already.\n\n\nshould tracers log into the debug.log or into a separate log?\n\n\nseparate log\n\n\nuse a binary format?\n\n\nworse performance (we’re writing two logs at the same time)\n\n\nneed to be careful when people to GST_DEBUG_CHANNEL=stderr and\nGST_TRACE_CHANNEL=stderr (use a shared channel, but what about the\nformats?)\n\n\ndebug log\n\n\nthe tracer subsystem would need to log the GST_TRACE at a level\nthat is active\n\n\nshould the tracer call gst_debug_category_set_threshold() to\nensure things work, even though the levels don’t make a lot of sense\nhere\n\n\nmake logging a tracer (a hook in gst_debug_log_valist(), move\ngst_debug_log_default() to the tracer module)\n\n\nlog all debug log to the tracer log, some of the current logging\nstatements can be replaced by generic logging as shown in the\nlog-tracer\n\n\nadd tools/gst-debug to extract a human readable debug log from the\ntrace log\n\n\nwe could maintain a list of log functions, where\ngst_tracer_log_trace() is the default one. This way e.g.\ngst-validate could consume the traces directly.\n\n\nwhen hooking into a timer, should we just have some predefined\nintervals?\n\n\ncan we add a tracer module that registers the timer hook? then we\ncould do GST_TRACER=\"timer(10ms);rusage\" right now the tracer hooks\nare defined as an enum though.\n\n\nwhen connecting to a running app, we can’t easily get the current\nstate if logging is using a socket, as past events are not\nexplicitly stored, we could determine the current topology and emit\nevents with GST_CLOCK_TIME_NONE as ts to indicate that the events\nare synthetic.\n\n\nwe need stable ids for scopes (threads, elements, pads)\n\n\nthe address can be reused\n\n\nwe can use gst_util_seqnum_next()\n\n\nsomething like gst_object_get_path_string() won’t work as\nobjects are initially without parent\n\n\nright now the tracing-hooks are enabled/disabled from configure with\n--{enable,disable}-gst-tracer-hooks The tracer code and the plugins\nare still built though. We should add a\n--{enable,disable}-gst-tracer to disabled the whole system,\nallthough this is a bit confusing with the --{enable,disable}-trace\noption we have already.\n\n\n"});