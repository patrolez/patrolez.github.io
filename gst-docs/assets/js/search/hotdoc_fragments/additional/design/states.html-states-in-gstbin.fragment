fragment_downloaded_cb({"url":"additional/design/states.html#states-in-gstbin","fragment":"States in GstBin\nA GstBin manages the state of its children. It does this by propagating\nthe state changes performed on it to all of its children. The\n_set_state() function on a bin will call the _set_state() function\non all of its children, that are not already in the target state or in a\nchange state to the target state.\nThe children are iterated from the sink elements to the source elements.\nThis makes sure that when changing the state of an element, the\ndownstream elements are in the correct state to process the eventual\nbuffers. In the case of a downwards state change, the sink elements will\nshut down first which makes the upstream elements shut down as well\nsince the _push() function returns a GST_FLOW_FLUSHING error.\nIf all the children return SUCCESS, the function returns SUCCESS as\nwell.\nIf one of the children returns FAILURE, the function returns FAILURE as\nwell. In this state it is possible that some elements successfully\nchanged state. The application can check which elements have a changed\nstate, which were in error and which were not affected by iterating the\nelements and calling _get_state() on the elements.\nIf after calling the state function on all children, one of the children\nreturned ASYNC, the function returns ASYNC as well.\nIf after calling the state function on all children, one of the children\nreturned NO_PREROLL, the function returns NO_PREROLL as well.\nIf both NO_PREROLL and ASYNC children are present, NO_PREROLL is\nreturned.\nThe current state of the bin can be retrieved with _get_state().\nIf the bin is performing an ASYNC state change, it will automatically\nupdate its current state fields when it receives state messages from the\nchildren.\n"});