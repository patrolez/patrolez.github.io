fragment_downloaded_cb({"url":"additional/design/framestep.html#audiovideo-pipeline-in-paused","fragment":"audio/video pipeline in PAUSED\napp sets the pipeline to PAUSED to block on the preroll picture\napp seeks to required position in the stream. This can be done\nwith a positive or negative rate depending on the required frame\nstepping direction.\napp steps frames (in GST_FORMAT_DEFAULT or GST_FORMAT_BUFFER) or an\namount of time on the video sink. The pipeline loses its PAUSED state until\nthe required number of frames have been skipped, it then prerolls again. This\nskipping is purely done in the sink.\nsink posts STEP_DONE with amount of frames stepped and\ncorresponding time interval.\nthe app skips the same amount of time on the audiosink to align\nthe streams again. When huge amount of video frames are skipped,\nthere needs to be enough queueing in the pipeline to compensate\nfor the accumulated audio.\n\n\napp sets the pipeline to PAUSED to block on the preroll picture\n\n\napp seeks to required position in the stream. This can be done\nwith a positive or negative rate depending on the required frame\nstepping direction.\n\n\napp steps frames (in GST_FORMAT_DEFAULT or GST_FORMAT_BUFFER) or an\namount of time on the video sink. The pipeline loses its PAUSED state until\nthe required number of frames have been skipped, it then prerolls again. This\nskipping is purely done in the sink.\n\n\nsink posts STEP_DONE with amount of frames stepped and\ncorresponding time interval.\n\n\nthe app skips the same amount of time on the audiosink to align\nthe streams again. When huge amount of video frames are skipped,\nthere needs to be enough queueing in the pipeline to compensate\nfor the accumulated audio.\n\n\n"});