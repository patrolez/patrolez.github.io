fragment_downloaded_cb({"url":"additional/design/trickmodes.html#client-side-backwards-trickmode","fragment":"client side backwards trickmode\nFor backwards playback the following rules apply:\nthe rate in the SEGMENT is less than 0.0.\nthe SEGMENT start position is less than the stop position, playback\nwill however happen from stop to start in reverse.\nthe time member in the SEGMENT is set to the stream time of the\nstart position.\nFor plugins the following rules apply:\nA source plugin sends data in chunks starting from the last chunk of\nthe file. The actual bytes are not reversed. Each chunk that is not\nforward continuous with the previous chunk is marked with a DISCONT\nflag.\nA demuxer accumulates the chunks. As soon as a keyframe is found,\neverything starting from the keyframe up to the accumulated data is\nsent downstream. Timestamps on the buffers are set starting from the\nstop position to start, effectively going backwards. Chunks are\nmarked with DISCONT when they are not forward continuous with the\nprevious buffer.\nA video decoder decodes and accumulates all decoded frames. If a\nbuffer with a DISCONT, SEGMENT or EOS is received, all accumulated\nframes are sent downsteam in reverse.\nAn audio decoder decodes and accumulates all decoded audio. If a\nbuffer with a DISCONT, SEGMENT or EOS is received, all accumulated\naudio is sent downstream in reverse order. Some audio codecs need\nthe previous data buffer to decode the current one, in that case,\nthe previous DISCONT buffer needs to be combined with the last\nnon-DISCONT buffer to generate the last bit of output.\nA sink reverses (for audio) and retimestamps (audio, video) the\nbuffers before playing them back. Retimestamping occurs relative to\nthe stop position, making the timestamps increase again and suitable\nfor synchronizing against the clock. Audio sinks also have to\nperform simple resampling before playing the samples.\nfor transcoding, audio and video resamplers can be used to reverse,\nresample and retimestamp the buffers. Any rate adjustments performed\non the media must be added to the applied_rate and subtracted from\nthe rate members in the SEGMENT\nevent.\nIn SKIP mode, the same algorithm as for forward SKIP mode can be used.\n\n\nthe rate in the SEGMENT is less than 0.0.\n\n\nthe SEGMENT start position is less than the stop position, playback\nwill however happen from stop to start in reverse.\n\n\nthe time member in the SEGMENT is set to the stream time of the\nstart position.\n\n\n\n\nA source plugin sends data in chunks starting from the last chunk of\nthe file. The actual bytes are not reversed. Each chunk that is not\nforward continuous with the previous chunk is marked with a DISCONT\nflag.\n\n\nA demuxer accumulates the chunks. As soon as a keyframe is found,\neverything starting from the keyframe up to the accumulated data is\nsent downstream. Timestamps on the buffers are set starting from the\nstop position to start, effectively going backwards. Chunks are\nmarked with DISCONT when they are not forward continuous with the\nprevious buffer.\n\n\nA video decoder decodes and accumulates all decoded frames. If a\nbuffer with a DISCONT, SEGMENT or EOS is received, all accumulated\nframes are sent downsteam in reverse.\n\n\nAn audio decoder decodes and accumulates all decoded audio. If a\nbuffer with a DISCONT, SEGMENT or EOS is received, all accumulated\naudio is sent downstream in reverse order. Some audio codecs need\nthe previous data buffer to decode the current one, in that case,\nthe previous DISCONT buffer needs to be combined with the last\nnon-DISCONT buffer to generate the last bit of output.\n\n\nA sink reverses (for audio) and retimestamps (audio, video) the\nbuffers before playing them back. Retimestamping occurs relative to\nthe stop position, making the timestamps increase again and suitable\nfor synchronizing against the clock. Audio sinks also have to\nperform simple resampling before playing the samples.\n\n\nfor transcoding, audio and video resamplers can be used to reverse,\nresample and retimestamp the buffers. Any rate adjustments performed\non the media must be added to the applied_rate and subtracted from\nthe rate members in the SEGMENT\nevent.\n\n\n"});