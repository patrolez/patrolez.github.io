fragment_downloaded_cb({"url":"additional/design/overview.html#elements","fragment":"Elements\nThe smallest building blocks in a pipeline are elements. An element\nprovides a number of pads which can be source or sinkpads. Sourcepads\nprovide data and sinkpads consume data. Below is an example of an ogg\ndemuxer element that has one pad that takes (sinks) data and two source\npads that produce data.\nAn element can be in four different states: NULL, READY, PAUSED,\nPLAYING. In the NULL and READY state, the element is not processing any\ndata. In the PLAYING state it is processing data. The intermediate\nPAUSED state is used to preroll data in the pipeline. A state change can\nbe performed with gst_element_set_state().\nAn element always goes through all the intermediate state changes. This\nmeans that when an element is in the READY state and is put to PLAYING,\nit will first go through the intermediate PAUSED state.\nAn element state change to PAUSED will activate the pads of the element.\nFirst the source pads are activated, then the sinkpads. When the pads\nare activated, the pad activate function is called. Some pads will start\na thread (GstTask) or some other mechanism to start producing or\nconsuming data.\nThe PAUSED state is special as it is used to preroll data in the\npipeline. The purpose is to fill all connected elements in the pipeline\nwith data so that the subsequent PLAYING state change happens very\nquickly. Some elements will therefore not complete the state change to\nPAUSED before they have received enough data. Sink elements are required\nto only complete the state change to PAUSED after receiving the first\ndata.\nNormally the state changes of elements are coordinated by the pipeline\nas explained in states.\nDifferent categories of elements exist:\nsource elements: these are elements that do not consume data but\nonly provide data for the pipeline.\nsink elements: these are elements that do not produce data but\nrenders data to an output device.\ntransform elements: these elements transform an input stream in a\ncertain format into a stream of another format.\nEncoder/decoder/converters are examples.\ndemuxer elements: these elements parse a stream and produce several\noutput streams.\nmixer/muxer elements: combine several input streams into one output\nstream.\nOther categories of elements can be constructed (see klass).\n\n\nsource elements: these are elements that do not consume data but\nonly provide data for the pipeline.\n\n\nsink elements: these are elements that do not produce data but\nrenders data to an output device.\n\n\ntransform elements: these elements transform an input stream in a\ncertain format into a stream of another format.\nEncoder/decoder/converters are examples.\n\n\ndemuxer elements: these elements parse a stream and produce several\noutput streams.\n\n\nmixer/muxer elements: combine several input streams into one output\nstream.\n\n\n"});