fragment_downloaded_cb({"url":"additional/design/events.html#segment","fragment":"SEGMENT\nA segment event is sent downstream by an element to indicate that the\nfollowing group of buffers start and end at the specified positions. The\nnewsegment event also contains the playback speed and the applied rate\nof the stream.\nSince the stream time is always set to 0 at start and after a seek, a 0\npoint for all next bufferâ€™s timestamps has to be propagated through the\npipeline using the SEGMENT event.\nBefore sending buffers, an element must send a SEGMENT event. An element\nis free to refuse buffers if they were not preceded by a SEGMENT event.\nElements that sync to the clock should store the SEGMENT start and end\nvalues and subtract the start value from the buffer timestamp before\ncomparing it against the stream time (see clocks).\nAn element is allowed to send out buffers with the SEGMENT start time\nalready subtracted from the timestamp. If it does so, it needs to send a\ncorrected SEGMENT downstream, ie, one with start time 0.\nA SEGMENT event should be generated as soon as possible in the pipeline\nand is usually generated by a demuxer or source. The event is generated\nbefore pushing the first buffer and after a seek, right before pushing\nthe new buffer.\nThe SEGMENT event should be sent from the streaming thread and should be\nserialized with the buffers.\nBuffers should be clipped within the range indicated by the newsegment\nevent start and stop values. Sinks must drop buffers with timestamps out\nof the indicated segment range.\n"});