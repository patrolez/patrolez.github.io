fragment_downloaded_cb({"url":"additional/design/subtitle-overlays.html#background","fragment":"Background\nSubtitles can be muxed in containers or come from an external source.\nSubtitles come in many shapes and colours. Usually they are either\ntext-based (incl. 'pango markup'), or bitmap-based (e.g. DVD subtitles\nand the most common form of DVB subs). Bitmap based subtitles are\nusually compressed in some way, like some form of run-length encoding.\nSubtitles are currently decoded and rendered in subtitle-format-specific\noverlay elements. These elements have two sink pads (one for raw video\nand one for the subtitle format in question) and one raw video source\npad.\nThey will take care of synchronising the two input streams, and of\ndecoding and rendering the subtitles on top of the raw video stream.\nDigression: one could theoretically have dedicated decoder/render\nelements that output an AYUV or ARGB image, and then let a videomixer\nelement do the actual overlaying, but this is not very efficient,\nbecause it requires us to allocate and blend whole pictures (1920x1080\nAYUV = 8MB, 1280x720 AYUV = 3.6MB, 720x576 AYUV = 1.6MB) even if the\noverlay region is only a small rectangle at the bottom. This wastes\nmemory and CPU. We could do something better by introducing a new format\nthat only encodes the region(s) of interest, but we don't have such a\nformat yet, and are not necessarily keen to rewrite this part of the\nlogic in playbin at this point - and we can't change existing elements'\nbehaviour, so would need to introduce new elements for this.\nPlaybin supports outputting compressed formats, i.e. it does not force\ndecoding to a raw format, but is happy to output to a non-raw format as\nlong as the sink supports that as well.\nIn case of certain hardware-accelerated decoding APIs, we will make use\nof that functionality. However, the decoder will not output a raw video\nformat then, but some kind of hardware/API-specific format (in the caps)\nand the buffers will reference hardware/API-specific objects that the\nhardware/API-specific sink will know how to handle.\n"});