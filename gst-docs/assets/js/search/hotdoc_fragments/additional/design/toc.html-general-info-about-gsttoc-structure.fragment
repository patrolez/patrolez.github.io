fragment_downloaded_cb({"url":"additional/design/toc.html#general-info-about-gsttoc-structure","fragment":"General info about GstToc structure\nGstToc introduces a general way to handle chapters within multimedia\nformats. GstToc can be represented as tree structure with arbitrary\nhierarchy. Tree item can be either of two types: sequence or\nalternative. Sequence types acts like a part of the media data, for\nexample audio track in CUE sheet, or part of the movie. Alternative\ntypes acts like some kind of selection to process a different version of\nthe media content, for example DVD angles. GstToc has one constraint on\nthe tree structure: it does not allow different entry types on the same\nlevel of the hierarchy, i.e. you shouldn’t have editions and chapters\nmixed together. Here is an example of right TOC:\nHere are two editions (alternatives), the first contains two chapters\n(sequence type), and the second has only one chapter. And here is an\nexample of invalid TOC:\nHere you have edition1 and chapter1 mixed on the same level of\nhierarchy, and such TOC will be considered broken.\nGstToc has entries field of GList type which consists of children\nitems. Each item is of type GstTocEntry. Also GstToc has list of tags\nand GstStructure called info. Please, use GstToc.info and\nGstTocEntry.info fields this way: create a GstStructure, put all info\nrelated to your element there and put this structure into the info\nfield under the name of your element. Some fields in the info\nstructure can be used for internal purposes, so you should use it in the\nway described above to not to overwrite already existent fields.\nLet’s look at GstTocEntry a bit closer. One of the most important fields\nis uid, which must be unique for each item within the TOC. This is\nused to identify each item inside TOC, especially when element receives\nTOC select event with UID to seek on. Field subentries of type GList\ncontains children items of type GstTocEntry. Thus you can achieve\narbitrary hierarchy level. Field type can be either\nGST_TOC_ENTRY_TYPE_CHAPTER or GST_TOC_ENTRY_TYPE_EDITION which\ncorresponds to chapter or edition type of item respectively. Field\ntags is a list of tags related to the item. And field info is\nsimilar to GstToc.info described above.\nSo, a little more about managing GstToc. Use gst_toc_new() and\ngst_toc_unref() to create/free it. GstTocEntry can be created using\ngst_toc_entry_new(). While building GstToc you can set start and stop\ntimestamps for each item using gst_toc_entry_set_start_stop() and\nloop_type and repeat_count using gst_toc_entry_set_loop(). The\nbest way to process already created GstToc is to recursively go through\nthe entries and subentries fields.\nApplications and plugins should not rely on TOCs having a certain kind\nof structure, but should allow for different alternatives. For example,\na simple CUE sheet embedded in a file may be presented as a flat list of\ntrack entries, or could have a top-level edition node (or some other\nalternative type entry) with track entries underneath that node; or even\nmultiple top-level edition nodes (or some other alternative type\nentries) each with track entries underneath, in case the source file has\nextracted a track listing from different sources).\n"});