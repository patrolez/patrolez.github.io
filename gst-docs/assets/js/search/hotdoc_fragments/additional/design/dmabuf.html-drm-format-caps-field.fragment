fragment_downloaded_cb({"url":"additional/design/dmabuf.html#drm-format-caps-field","fragment":"DRM format caps field\nThe GstCapsFeatures memory:DMABuf is usually used to negotiate DMA\nbuffers. It is recommended to allow DMAbuf to flow without the\nGstCapsFeatures memory:DMABuf if the DRM-modifier is linear.\nBut also, in order to negotiate memory:DMABuf thoroughly, it's required\nto match the DRM-modifiers between upstream and downstream. Otherwise video\nsinks might end rendering wrong frames assuming linear access.\nBecause DRM-fourcc and DRM-modifier are both necessary to render frames\nDMABuf-backed, we now consider both as a pair and combine them together to\nassure uniqueness. In caps, we use a : to link them together and write in\nthe mode of DRM_FORMAT:DRM_MODIFIER, which represents a totally new single video\nformat. For example, NV12:0x0100000000000002 is a new video format\ncombined by video format NV12 and the modifier 0x0100000000000002. It's\nnot NV12 and it's not its subset either.\nDRM_FORMAT can be printed by using\nGST_FOURCC_FORMAT and GST_FOURCC_ARGS macros from the\nDRM_FORMAT_* constants, it is NOT a GstVideoFormat, so it would be\ndifferent from the content of the format field in a non-dmabuf caps.\nA modifier must always be present, except if the modifier is linear,\nthen it should not be included, so NV12:0x0000000000000000 is\ninvalid, it must be drm-format=NV12. DRM fourcc are used\ninstead of a GstVideoFormat to make it easier for non-GStreamer\ndevelopers to understand what the system is trying to achieve.\nPlease note that this form of video format only appears within\nmemory:DMABuf feature. It must not appear in any other video caps\nfeature.\nUnlike other type of video buffers, DMABuf frames might not be mappable and\nits internal format is opaque to the user. Then, unless the modifier is\nlinear (0x0000000000000000) or some other well known tiled format such as\nNV12_4L4, NV12_16L16, NV12_64Z32, NV12_16L32S, etc. (which are defined in\nvideo-format.h), we always use GST_VIDEO_FORMAT_DMA_DRM in\nGstVideoFormat enum to represent its video format.\nIn order to not misuse this new format with the common video format, in\nmemory:DMABuf feature, the traditional format should be set to DMA_DRM.\nAnd a new drm-format field in caps is introduced to represent the video\nformat in details(the composing of fourcc:modifier).\nSo a DMABuf-backed video caps may look like:\nAnd when we call a video info API such as gst_video_info_from_caps() with\nthis caps, it should return an video format as GST_VIDEO_FORMAT_DMA_DRM,\nleaving other fields unchanged as normal video caps.\nIn addition, a new structure\nis introduced to represent more info of DMA video caps. User should use\nthis DMABuf related API such as gst_drm_video_info_from_caps() to recognize\nthe video format and parse the DMA info from caps.\n"});