fragment_downloaded_cb({"url":"additional/design/overview.html#pipeline-ready","fragment":"Pipeline READY\nWhen a running pipeline is set from the PLAYING to READY state, the\nfollowing actions occur in the pipeline:\nGoing to the intermediate PAUSED state will block all elements in the\n_push() functions. This happens because the sink element blocks on the\nfirst buffer it receives.\nSome elements might be performing blocking operations in the PLAYING\nstate that must be unblocked when they go into the PAUSED state. This\nmakes sure that the state change happens very fast.\nIn the next PAUSED to READY state change the pipeline has to shut down\nand all streaming threads must stop sending data. This happens in the\nfollowing sequence:\nThe upstream elements finish their _chain() function because the\ndownstream element returned an error code (FLUSHING) from the _push()\nfunctions. These error codes are eventually returned to the element that\nstarted the streaming thread (filesrc), which pauses the thread and\ncompletes the state change.\nThis sequence of events ensure that all elements are unblocked and all\nstreaming threads stopped.\n\nalsasink to PAUSED:  alsasink blocks and completes the state change on the\nnext sample. If the element was EOS, it does not wait for a sample to complete\nthe state change.\nmp3dec to PAUSED:    nothing\nfilesrc to PAUSED:   nothing\n\n\nalsasink to READY:   alsasink unblocks from the _chain() function and returns\na FLUSHING return value to the peer element. The sinkpad is deactivated and\nbecomes unusable for sending more data.\nmp3dec to READY:     the pads are deactivated and the state change completes\nwhen mp3dec leaves its _chain() function.\nfilesrc to READY:    the pads are deactivated and the thread is paused.\n\n"});