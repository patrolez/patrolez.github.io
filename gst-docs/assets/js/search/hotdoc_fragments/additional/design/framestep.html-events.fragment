fragment_downloaded_cb({"url":"additional/design/framestep.html#events","fragment":"events\nA new GST_EVENT_STEP event is introduced to start the step operation.\nThe step event is created with the following fields in the structure:\nformat GST_TYPE_FORMAT: The format of the step units\namount G_TYPE_UINT64: The amount of units to step. A 0 amount\nimmediately completes and can be used to cancel the current step and resume\nnormal non-stepping behaviour to the end of the segment. A -1 amount steps\nuntil the end of the segment.\nrate G_TYPE_DOUBLE: The rate at which the frames should be stepped in\nPLAYING mode. 1.0 is the normal playback speed and direction of the segment,\n2.0 is double speed. A speed of 0.0 is not allowed. When performing a flushing\nstep, the speed is not relevant. Note that we don't allow negative rates here,\nuse a seek with a negative rate first to reverse the playback direction.\nflush G_TYPE_BOOLEAN: when flushing is TRUE, the step is performed\nimmediately:\nIn the PAUSED state the pipeline loses the PAUSED state, the\nrequested amount of data is skipped and the pipeline prerolls again\nwhen a non-intermediate step completes. When the pipeline was\nstepping while the event is sent, the current step operation is\nupdated with the new amount and format. The sink will do a best\neffort to comply with the new amount.\nIn the PLAYING state, the pipeline loses the PLAYING state, the\nrequested amount of data is skipped (not rendered) from the previous\nSTEP request or from the position of the last PAUSED if no previous\nSTEP operation was performed. The pipeline goes back to the PLAYING\nstate when a non-intermediate step completes.\nWhen flushing is FALSE, the step will be performed later.\nIn the PAUSED state the step will be done when going to PLAYING. Any\nprevious step operation will be overridden with the new STEP event.\nIn the PLAYING state the step operation will be performed after the\ncurrent step operation completes. If there was no previous step\noperation, the step operation will be performed from the position of\nthe last PAUSED state.\nintermediate G_TYPE_BOOLEAN: Signal that this step operation is an\nintermediate step, part of a series of step operations. It is mostly\ninteresting for stepping in the PAUSED state because the sink will only perform\na preroll after a non-intermediate step operation completes. Intermediate steps\nare useful to flush out data from other sinks in order to not cause excessive\nqueueing. In the PLAYING state the intermediate flag has no visual effect. In\nall states, the intermediate flag is passed to the corresponding\nGST_MESSAGE_STEP_DONE.\nThe application will create a STEP event to start or stop the stepping\noperation. Both stepping in PAUSED and PLAYING can be performed by means\nof the flush flag.\nThe event is usually sent to the pipeline, which will typically\ndistribute the event to all of its sinks. For some use cases, like frame\nstepping on video frames only, the event should only be sent to the\nvideo sink and upon reception of the STEP_DONE message, one can step\nthe other sinks to align the streams again.\nFor large stepping amounts, there needs to be enough queueing in front\nof all the sinks. If large steps need to be performed, they can be split\nup into smaller step operations using the \"intermediate\" flag on the\nstep.\nSince the step event does not update the base_time of any of the\nelements, the sinks should keep track of the amount of stepped data in\norder to remain synchronized against the clock.\n\n\nformat GST_TYPE_FORMAT: The format of the step units\n\n\namount G_TYPE_UINT64: The amount of units to step. A 0 amount\nimmediately completes and can be used to cancel the current step and resume\nnormal non-stepping behaviour to the end of the segment. A -1 amount steps\nuntil the end of the segment.\n\n\nrate G_TYPE_DOUBLE: The rate at which the frames should be stepped in\nPLAYING mode. 1.0 is the normal playback speed and direction of the segment,\n2.0 is double speed. A speed of 0.0 is not allowed. When performing a flushing\nstep, the speed is not relevant. Note that we don't allow negative rates here,\nuse a seek with a negative rate first to reverse the playback direction.\n\n\nflush G_TYPE_BOOLEAN: when flushing is TRUE, the step is performed\nimmediately:\n\n\nIn the PAUSED state the pipeline loses the PAUSED state, the\nrequested amount of data is skipped and the pipeline prerolls again\nwhen a non-intermediate step completes. When the pipeline was\nstepping while the event is sent, the current step operation is\nupdated with the new amount and format. The sink will do a best\neffort to comply with the new amount.\n\n\nIn the PLAYING state, the pipeline loses the PLAYING state, the\nrequested amount of data is skipped (not rendered) from the previous\nSTEP request or from the position of the last PAUSED if no previous\nSTEP operation was performed. The pipeline goes back to the PLAYING\nstate when a non-intermediate step completes.\n\n\nWhen flushing is FALSE, the step will be performed later.\n\n\nIn the PAUSED state the step will be done when going to PLAYING. Any\nprevious step operation will be overridden with the new STEP event.\n\n\nIn the PLAYING state the step operation will be performed after the\ncurrent step operation completes. If there was no previous step\noperation, the step operation will be performed from the position of\nthe last PAUSED state.\n\n\n\n\nintermediate G_TYPE_BOOLEAN: Signal that this step operation is an\nintermediate step, part of a series of step operations. It is mostly\ninteresting for stepping in the PAUSED state because the sink will only perform\na preroll after a non-intermediate step operation completes. Intermediate steps\nare useful to flush out data from other sinks in order to not cause excessive\nqueueing. In the PLAYING state the intermediate flag has no visual effect. In\nall states, the intermediate flag is passed to the corresponding\nGST_MESSAGE_STEP_DONE.\n\n\n\n\nIn the PAUSED state the pipeline loses the PAUSED state, the\nrequested amount of data is skipped and the pipeline prerolls again\nwhen a non-intermediate step completes. When the pipeline was\nstepping while the event is sent, the current step operation is\nupdated with the new amount and format. The sink will do a best\neffort to comply with the new amount.\n\n\nIn the PLAYING state, the pipeline loses the PLAYING state, the\nrequested amount of data is skipped (not rendered) from the previous\nSTEP request or from the position of the last PAUSED if no previous\nSTEP operation was performed. The pipeline goes back to the PLAYING\nstate when a non-intermediate step completes.\n\n\nWhen flushing is FALSE, the step will be performed later.\n\n\nIn the PAUSED state the step will be done when going to PLAYING. Any\nprevious step operation will be overridden with the new STEP event.\n\n\nIn the PLAYING state the step operation will be performed after the\ncurrent step operation completes. If there was no previous step\noperation, the step operation will be performed from the position of\nthe last PAUSED state.\n\n\n"});