fragment_downloaded_cb({"url":"additional/design/playback-gapless.html#switching-play-items","fragment":"Switching play items\nSwitching play items requires special attention since it needs to be done\n\"atomically\". We need to ensure it is done by a single thread. This is done by\nhaving a lock (play_items_lock) which is taken whenever we need to modify the\nlist of play items and which play item is the current input/output.\nWe need to ensure the streaming thread(s) that were previously used are\nstopped. Since we are only dealing with push-based sources this is simple: we\nwait for the moment EOS is pushed on the last pad of the play item.\nAnother important consideration is that we need to ensure the thread that does\nthe switch is not the previous streaming thread (it needs to be stopped).\nIn order to solve those issues, the actual replacement of the inputs will always\nhappen from the streaming thread of the new play item, i.e. the one we wish to\nmake the current input. This is done in a pad block probe on the new item source\npad. Whenever a buffer (or GAP event) is received, we check whether we can\nswitch:\nIf the current input play item is completely EOS, the switch can happen\nimmediately. This will always be the case in instant-uri scenario and if the\ncurrent input play item is pull-based.\nIf the current input play item is not completely EOS, the probe waits on the\nGCond input_source_drained. This is the case that will commonly happen in\ngapless push-based scenarios, since we are waiting for the current input play\nitem to be finished.\nOnce the switch can happen, we unlink all pads from decodebin3 and attempt to\nmatch compatible new source pads from urisourcebin to decodebin3. If new\nsink pads are required they are requested, and if some sink pads are no longer\nneeded or do not match they are released.\nOnce all pads are linked, the new play item is set as the current play item.\n\n\nIf the current input play item is completely EOS, the switch can happen\nimmediately. This will always be the case in instant-uri scenario and if the\ncurrent input play item is pull-based.\n\n\nIf the current input play item is not completely EOS, the probe waits on the\nGCond input_source_drained. This is the case that will commonly happen in\ngapless push-based scenarios, since we are waiting for the current input play\nitem to be finished.\n\n\n"});