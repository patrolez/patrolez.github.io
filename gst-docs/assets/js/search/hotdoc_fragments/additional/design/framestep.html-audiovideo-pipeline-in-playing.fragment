fragment_downloaded_cb({"url":"additional/design/framestep.html#audiovideo-pipeline-in-playing","fragment":"audio/video pipeline in PLAYING\napp sets the pipeline to PAUSED to block on the preroll picture\napp seeks to required position in the stream. This can be done\nwith a positive or negative rate depending on the required frame\nstepping direction.\napp configures frames steps (in GST_FORMAT_DEFAULT or\nGST_FORMAT_BUFFER or an amount of time on the sink. The step event has\na flag indicating live stepping so that the stepping will only happens in\nPLAYING.\napp sets pipeline to PLAYING. The pipeline continues PLAYING\nuntil it consumed the amount of time.\nsink posts STEP_DONE with amount of frames stepped and\ncorresponding time interval. The sink will then wait for another\nstep event. Since the STEP_DONE message was emitted by the sink\nwhen it handed off the buffer to the device, there is usually\nsufficient time to queue a new STEP event so that one can\nseamlessly continue stepping.\n\n\napp sets the pipeline to PAUSED to block on the preroll picture\n\n\napp seeks to required position in the stream. This can be done\nwith a positive or negative rate depending on the required frame\nstepping direction.\n\n\napp configures frames steps (in GST_FORMAT_DEFAULT or\nGST_FORMAT_BUFFER or an amount of time on the sink. The step event has\na flag indicating live stepping so that the stepping will only happens in\nPLAYING.\n\n\napp sets pipeline to PLAYING. The pipeline continues PLAYING\nuntil it consumed the amount of time.\n\n\nsink posts STEP_DONE with amount of frames stepped and\ncorresponding time interval. The sink will then wait for another\nstep event. Since the STEP_DONE message was emitted by the sink\nwhen it handed off the buffer to the device, there is usually\nsufficient time to queue a new STEP event so that one can\nseamlessly continue stepping.\n\n\n"});