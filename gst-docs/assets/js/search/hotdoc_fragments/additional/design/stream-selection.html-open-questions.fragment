fragment_downloaded_cb({"url":"additional/design/stream-selection.html#open-questions","fragment":"Open Questions\n~~Is a FLUSHING flag for stream-selection required or not?~~\nThis would make the handler of the SELECT_STREAMS event send FLUSH START/STOP before switching to the other streams. This is tricky when dealing\nwhere situations where we keep some streams and only switch some others. Do we\nflush all streams? Do we only flush the new streams, potentially resulting in\ndelay to fully switch?  Furthermore, due to efficient buffering in\ndecodebin3, the switching time has been minimized extensively, to the point\nwhere flushing might not bring a noticeable improvement.\nNote: This flushing capability was not needed in the end. Leveraging\nminimal buffering in decodebin3 and various other elements allows\nalmost-instantaneous stream switching without this.\nStore the stream collection in bins/pipelines?\nA Bin/Pipeline could store all active collection internally, so that it could\nbe queried later on. This could be useful to then get, on any pipeline, at any\npoint in time, the full list of collections available without having to listen\nto all COLLECTION messages on the bus. This would require fixing the \"is a\ncollection a replacement or not\" issue first.\nWhen switching to new collections, should decodebin3 make any effort to\nmap corresponding streams from the old to new PMT - that is, try and stick\nto the english language audio track, for example?  Alternatively, rely on\nthe app to do such smarts with stream-select messages?\nNote: If an application listens synchronously to the collection bus\nmessages, it can indeed decide which streams it wants to select. And therefore\nstick to the (new) english audio track.\n\n\n~~Is a FLUSHING flag for stream-selection required or not?~~\nThis would make the handler of the SELECT_STREAMS event send FLUSH START/STOP before switching to the other streams. This is tricky when dealing\nwhere situations where we keep some streams and only switch some others. Do we\nflush all streams? Do we only flush the new streams, potentially resulting in\ndelay to fully switch?  Furthermore, due to efficient buffering in\ndecodebin3, the switching time has been minimized extensively, to the point\nwhere flushing might not bring a noticeable improvement.\nNote: This flushing capability was not needed in the end. Leveraging\nminimal buffering in decodebin3 and various other elements allows\nalmost-instantaneous stream switching without this.\n\n\nStore the stream collection in bins/pipelines?\nA Bin/Pipeline could store all active collection internally, so that it could\nbe queried later on. This could be useful to then get, on any pipeline, at any\npoint in time, the full list of collections available without having to listen\nto all COLLECTION messages on the bus. This would require fixing the \"is a\ncollection a replacement or not\" issue first.\n\n\nWhen switching to new collections, should decodebin3 make any effort to\nmap corresponding streams from the old to new PMT - that is, try and stick\nto the english language audio track, for example?  Alternatively, rely on\nthe app to do such smarts with stream-select messages?\nNote: If an application listens synchronously to the collection bus\nmessages, it can indeed decide which streams it wants to select. And therefore\nstick to the (new) english audio track.\n\n\n"});