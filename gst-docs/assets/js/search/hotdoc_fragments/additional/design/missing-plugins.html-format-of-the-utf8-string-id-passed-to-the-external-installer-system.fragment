fragment_downloaded_cb({"url":"additional/design/missing-plugins.html#format-of-the-utf8-string-id-passed-to-the-external-installer-system","fragment":"Format of the (UTF-8) string ID passed to the external installer system\nThe string is made up of several fields, separated by '|' characters.\nThe fields are:\nplugin system identifier, ie. \"gstreamer\" This identifier determines\nthe format of the rest of the detail string. Automatic plugin\ninstallers should not process detail strings with unknown\nidentifiers. This allows other plugin-based libraries to use the\nsame mechanism for their automatic plugin installation needs, or for\nthe format to be changed should it turn out to be insufficient.\nplugin system version, e.g. \"1.0\" This is required so that when\nthere is a GStreamer-2.0 or GStreamer-3.0 at some point in future,\nthe different major versions can still co-exist and use the same\nplugin install mechanism in the same way.\napplication identifier, e.g. \"totem\" This may also be in the form of\n\"pid/12345\" if the program name can’t be obtained for some reason.\nhuman-readable localised description of the required component, e.g.\n\"Vorbis audio decoder\"\nidentifier string for the required component, e.g.\nurisource-(PROTOCOL_REQUIRED) e.g. urisource-http or urisource-rtsp\nelement-(ELEMENT_REQUIRED), e.g. element-videoconvert\ndecoder-(CAPS_REQUIRED) e.g. decoder-audio/x-vorbis or\ndecoder-application/ogg or decoder-audio/mpeg, mpegversion=(int)4 or\ndecoder-video/mpeg, systemstream=(boolean)true, mpegversion=(int)2\nencoder-(CAPS_REQUIRED) e.g. encoder-audio/x-vorbis\noptional further fields not yet specified\nAn entire ID string might then look like this, for example:\ngstreamer|0.10|totem|Vorbis audio decoder|decoder-audio/x-vorbis\nPlugin installers parsing this ID string should expect further fields also\nseparated by '|' symbols and either ignore them, warn the user, or error\nout when encountering them.\nThe human-readable description string is provided by the libgstbaseutils\nlibrary that can be found in gst-plugins-base versions >= 0.10.12 and can\nalso be used by demuxers to find out the codec names for taglists from given\ncaps in a unified and consistent way.\nApplications can create these detail strings using the function\ngst_missing_plugin_message_get_installer_detail() on a given missing-plugin\nmessage.\n\n\nplugin system identifier, ie. \"gstreamer\" This identifier determines\nthe format of the rest of the detail string. Automatic plugin\ninstallers should not process detail strings with unknown\nidentifiers. This allows other plugin-based libraries to use the\nsame mechanism for their automatic plugin installation needs, or for\nthe format to be changed should it turn out to be insufficient.\n\n\nplugin system version, e.g. \"1.0\" This is required so that when\nthere is a GStreamer-2.0 or GStreamer-3.0 at some point in future,\nthe different major versions can still co-exist and use the same\nplugin install mechanism in the same way.\n\n\napplication identifier, e.g. \"totem\" This may also be in the form of\n\"pid/12345\" if the program name can’t be obtained for some reason.\n\n\nhuman-readable localised description of the required component, e.g.\n\"Vorbis audio decoder\"\n\n\nidentifier string for the required component, e.g.\n\n\nurisource-(PROTOCOL_REQUIRED) e.g. urisource-http or urisource-rtsp\n\n\nelement-(ELEMENT_REQUIRED), e.g. element-videoconvert\n\n\ndecoder-(CAPS_REQUIRED) e.g. decoder-audio/x-vorbis or\ndecoder-application/ogg or decoder-audio/mpeg, mpegversion=(int)4 or\ndecoder-video/mpeg, systemstream=(boolean)true, mpegversion=(int)2\n\n\nencoder-(CAPS_REQUIRED) e.g. encoder-audio/x-vorbis\n\n\noptional further fields not yet specified\n\n\n\n\nAn entire ID string might then look like this, for example:\ngstreamer|0.10|totem|Vorbis audio decoder|decoder-audio/x-vorbis\n\n\nPlugin installers parsing this ID string should expect further fields also\nseparated by '|' symbols and either ignore them, warn the user, or error\nout when encountering them.\n\n\nThe human-readable description string is provided by the libgstbaseutils\nlibrary that can be found in gst-plugins-base versions >= 0.10.12 and can\nalso be used by demuxers to find out the codec names for taglists from given\ncaps in a unified and consistent way.\n\n\nApplications can create these detail strings using the function\ngst_missing_plugin_message_get_installer_detail() on a given missing-plugin\nmessage.\n\n\n"});