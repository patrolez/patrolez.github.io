fragment_downloaded_cb({"url":"additional/design/progress.html#to-make-the-state-changes-nonblocking-and-cancellable","fragment":"To make the state changes non-blocking and cancellable.\nCurrently state changes such as going to the READY or PAUSED state often do\nblocking calls such as resolving DNS or connecting to a remote server. These\noperations often block the main thread and are often not cancellable, causing\napplication lockups.\nWe would like to make the state change function, instead, start a separate\nthread that performs the blocking operations in a cancellable way. When going\nback to the NULL state, all pending operations would be canceled immediately.\nFor downward state changes, we want to let the application implement its own\ntimeout mechanism. For example: when stopping an RTSP stream, the clients\nneeds to send a TEARDOWN request to the server. This can however take an\nunlimited amount of time in case of network problems. We want to give the\napplication an opportunity to wait (and timeout) for the completion of the\nasync operation before setting the element to the final NULL state.\nProgress updates are very similar to buffering messages in the same way\nthat the application can decide to wait for the completion of the\nbuffering process before performing the next state change. It might make\nsense to implement buffering with the progress messages in the future.\n"});