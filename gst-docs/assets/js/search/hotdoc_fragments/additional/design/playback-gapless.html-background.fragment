fragment_downloaded_cb({"url":"additional/design/playback-gapless.html#background","fragment":"Background\nThe new playbin3 element and its components (uridecodebin3, decodebin3 and\nurisourcebin) are replacements to the legacy playbin2 and decodebin2\nelements.\nThe goals of these new elements are to both allow new use-cases and improve\nperformance (lower memory/cpu/io usage, lower latency). One of the key\nprinciples is also to re-use elements as much as possible. For example, when\nswitching audio tracks the decoder can be re-used (if compatible).\nThe separation of roles was also more clearly split up into various new elements\n(from lowest-level to highest-level):\nurisourcebin handles choosing the right source elements for the given URI,\nand handles buffering (via queue2) if needed (for network sources for example).\nparsebin takes an input stream and figures out which demuxer, parsers and/or\npayloaders are needed to provide timed elementary streams.\ndecodebin3 internally uses parsebin to handle any input stream and will\nhandle the decoding, inter-stream muxing interleave, stream selection and\nswitching. It can also handle multiple inputs (such as an audio/video file and\na separate subtitle file).\nuridecodebin3 wraps urisourcebins and decodebin3 for any use-cases where\none wishes to have decoded streams from given URIs.\nFinally playbin3 combines uridecodebin3 and playsink for providing a\nhigh-level convenience pipeline for playing back content.\nThis design has received many improvements over time:\ndecodebin3 was able to detect input changes (caps changes) and reconfigure\nthe associated parsebin if incompatible. This allows use-cases where\nupstream is an HLS/DASH stream where codecs are different across bitrates. The\nplayback remains seamless if the decoders are compatible.\ndecodebin3 was able to bypass the usage of parsebin altogether if the\nincoming stream is pull-based, provides a GstStreamCollection and is\ncompatible with the decoders or output caps.\nurisourcebin can handle sources that handle buffering internally, avoiding\ndual-buffering.\nA new core query GST_QUERY_SELECTABLE was added so that (source) elements\ncould notify decodebin3 that they can handle stream selection and switching\nthemselves.\nSeveral improvements were made to playbin3 to allow complete stream type\nchanges (such as going from playing audio+video to just audio or just video,\nand back), This allows temporarily disabling whole chains of elements when not\nneeded.\n\n\nurisourcebin handles choosing the right source elements for the given URI,\nand handles buffering (via queue2) if needed (for network sources for example).\n\n\nparsebin takes an input stream and figures out which demuxer, parsers and/or\npayloaders are needed to provide timed elementary streams.\n\n\ndecodebin3 internally uses parsebin to handle any input stream and will\nhandle the decoding, inter-stream muxing interleave, stream selection and\nswitching. It can also handle multiple inputs (such as an audio/video file and\na separate subtitle file).\n\n\nuridecodebin3 wraps urisourcebins and decodebin3 for any use-cases where\none wishes to have decoded streams from given URIs.\n\n\nFinally playbin3 combines uridecodebin3 and playsink for providing a\nhigh-level convenience pipeline for playing back content.\n\n\n\n\ndecodebin3 was able to detect input changes (caps changes) and reconfigure\nthe associated parsebin if incompatible. This allows use-cases where\nupstream is an HLS/DASH stream where codecs are different across bitrates. The\nplayback remains seamless if the decoders are compatible.\n\n\ndecodebin3 was able to bypass the usage of parsebin altogether if the\nincoming stream is pull-based, provides a GstStreamCollection and is\ncompatible with the decoders or output caps.\n\n\nurisourcebin can handle sources that handle buffering internally, avoiding\ndual-buffering.\n\n\nA new core query GST_QUERY_SELECTABLE was added so that (source) elements\ncould notify decodebin3 that they can handle stream selection and switching\nthemselves.\n\n\nSeveral improvements were made to playbin3 to allow complete stream type\nchanges (such as going from playing audio+video to just audio or just video,\nand back), This allows temporarily disabling whole chains of elements when not\nneeded.\n\n\n"});