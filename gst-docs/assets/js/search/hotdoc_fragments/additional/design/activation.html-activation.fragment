fragment_downloaded_cb({"url":"additional/design/activation.html#activation","fragment":"Activation\nWhen changing states, a bin will set the state on all of its children in\nsink-to-source order. As elements undergo the READY→PAUSED transition,\ntheir pads are activated so as to prepare for data flow. Some pads will\nstart tasks to drive the data flow.\nAn element activates its pads from sourcepads to sinkpads. This to make\nsure that when the sinkpads are activated and ready to accept data, the\nsourcepads are already active to pass the data downstream.\nPads can be activated in one of two modes, PUSH and PULL. PUSH pads are\nthe normal case, where the source pad in a link sends data to the sink\npad via gst_pad_push(). PULL pads instead have sink pads request data\nfrom the source pads via gst_pad_pull_range().\nTo activate a pad, the core will call gst_pad_set_active() with a\nTRUE argument, indicating that the pad should be active. If the pad is\nalready active, be it in a PUSH or PULL mode, gst_pad_set_active()\nwill return without doing anything. Otherwise it will call the\nactivation function of the pad.\nBecause the core does not know in which mode to activate a pad (PUSH or\nPULL), it delegates that choice to a method on the pad, activate(). The\nactivate() function of a pad should choose whether to operate in PUSH or\nPULL mode. Once the choice is made, it should call activate_mode() with\nthe selected activation mode. The default activate() function will call\nactivate_mode() with #GST_PAD_MODE_PUSH, as it is the default\nmechanism for data flow. A sink pad that supports either mode of\noperation might call activate_mode(PULL) if the SCHEDULING query\nupstream contains the #GST_PAD_MODE_PULL scheduling mode, and\nactivate_mode(PUSH) otherwise.\nConsider the case fakesrc ! fakesink, where fakesink is configured to\noperate in PULL mode. State changes in the pipeline will start with\nfakesink, which is the most downstream element. The core will call\nactivate() on fakesink’s sink pad. For fakesink to go into PULL mode, it\nneeds to implement a custom activate() function that will call\nactivate_mode(PULL) on its sink pad (because the default is to use PUSH\nmode). activate_mode(PULL) is then responsible for starting the task\nthat pulls from fakesrc:src. Clearly, fakesrc needs to be notified that\nfakesrc is about to pull on its src pad, even though the pipeline has\nnot yet changed fakesrc’s state. For this reason, GStreamer will first\ncall activate_mode(PULL) on fakesink:sink’s peer before calling\nactivate_mode(PULL) on fakesink:sinks.\nIn short, upstream elements operating in PULL mode must be ready to\nproduce data in READY, after having activate_mode(PULL) called on their\nsource pad. Also, a call to activate_mode(PULL) needs to propagate\nthrough the pipeline to every pad that a gst_pad_pull() will reach. In\nthe case fakesrc ! identity ! fakesink, calling activate_mode(PULL)\non identity’s source pad would need to activate its sink pad in pull\nmode as well, which should propagate all the way to fakesrc.\nIf, on the other hand, fakesrc ! fakesink is operating in PUSH mode,\nthe activation sequence is different. First, activate() on fakesink:sink\ncalls activate_mode(PUSH) on fakesink:sink. Then fakesrc’s pads are\nactivated: sources first, then sinks (of which fakesrc has none).\nfakesrc:src’s activation function is then called.\nNote that it does not make sense to set an activation function on a\nsource pad. The peer of a source pad is downstream, meaning it should\nhave been activated first. If it was activated in PULL mode, the source\npad should have already had activate_mode(PULL) called on it, and thus\nneeds no further activation. Otherwise it should be in PUSH mode, which\nis the choice of the default activation function.\nSo, in the PUSH case, the default activation function chooses PUSH mode,\nwhich calls activate_mode(PUSH), which will then start a task on the\nsource pad and begin pushing. In this way PUSH scheduling is a bit\neasier, because it follows the order of state changes in a pipeline.\nfakesink is already in PAUSED with an active sink pad by the time\nfakesrc starts pushing data.\n"});