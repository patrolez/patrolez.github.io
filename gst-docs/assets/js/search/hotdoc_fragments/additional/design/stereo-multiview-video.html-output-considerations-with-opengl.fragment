fragment_downloaded_cb({"url":"additional/design/stereo-multiview-video.html#output-considerations-with-opengl","fragment":"Output Considerations with OpenGL\nIf we have support for stereo GL buffer formats, we can output separate\nleft/right eye images and let the hardware take care of display.\nOtherwise, glimagesink needs to render one window with left/right in a\nsuitable frame packing and that will only show correctly in fullscreen on a\ndevice set for the right 3D packing -> requires app intervention to set the\nvideo mode.\nWhich could be done manually on the TV, or with HDMI 1.4 by setting the\nright video mode for the screen to inform the TV or third option, we support\nrendering to two separate overlay areas on the screen - one for left eye,\none for right which can be supported using the 'splitter' element and two\noutput sinks or, better, add a 2nd window overlay for split stereo output\nIntel hardware doesn't do stereo GL buffers - only nvidia and AMD, so\ninitial implementation won't include that\n\n\nIf we have support for stereo GL buffer formats, we can output separate\nleft/right eye images and let the hardware take care of display.\n\n\nOtherwise, glimagesink needs to render one window with left/right in a\nsuitable frame packing and that will only show correctly in fullscreen on a\ndevice set for the right 3D packing -> requires app intervention to set the\nvideo mode.\n\n\nWhich could be done manually on the TV, or with HDMI 1.4 by setting the\nright video mode for the screen to inform the TV or third option, we support\nrendering to two separate overlay areas on the screen - one for left eye,\none for right which can be supported using the 'splitter' element and two\noutput sinks or, better, add a 2nd window overlay for split stereo output\n\n\nIntel hardware doesn't do stereo GL buffers - only nvidia and AMD, so\ninitial implementation won't include that\n\n\n"});