fragment_downloaded_cb({"url":"additional/design/bufferpool.html#videotestsrc-xvimagesink","fragment":"videotestsrc ! xvimagesink\nBefore videotestsrc can output a buffer, it needs to negotiate caps and\na bufferpool with the downstream peer pad.\nFirst it will negotiate a suitable format with downstream according to the\nnormal rules. It will send a CAPS event downstream with the negotiated\nconfiguration.\nThen it does an ALLOCATION query. It will use the returned bufferpool or\nconfigures its own bufferpool with the returned parameters. The bufferpool is\ninitially in the inactive state.\nThe ALLOCATION query lists the desired configuration of the downstream\nxvimagesink, which can have specific alignment and/or min/max amount of\nbuffers.\nvideotestsrc updates the configuration of the bufferpool, it will likely set\nthe min buffers to 1 and the size of the desired buffers. It then updates the\nbufferpool configuration with the new properties.\nWhen the configuration is successfully updated, videotestsrc sets the\nbufferpool to the active state. This preallocates the buffers in the pool (if\nneeded). This operation can fail when there is not enough memory available.\nSince the bufferpool is provided by xvimagesink, it will allocate buffers\nbacked by an XvImage and pointing to shared memory with the X server.\nIf the bufferpool is successfully activated, videotestsrc can acquire\na buffer from the pool, fill in the data and push it out to xvimagesink.\nxvimagesink can know that the buffer originated from its pool by following\nthe pool member.\nwhen shutting down, videotestsrc will set the pool to the inactive state,\nthis will cause further allocations to fail and currently allocated buffers to\nbe freed. videotestsrc will then free the pool and stop streaming.\n\n\nBefore videotestsrc can output a buffer, it needs to negotiate caps and\na bufferpool with the downstream peer pad.\n\n\nFirst it will negotiate a suitable format with downstream according to the\nnormal rules. It will send a CAPS event downstream with the negotiated\nconfiguration.\n\n\nThen it does an ALLOCATION query. It will use the returned bufferpool or\nconfigures its own bufferpool with the returned parameters. The bufferpool is\ninitially in the inactive state.\n\n\nThe ALLOCATION query lists the desired configuration of the downstream\nxvimagesink, which can have specific alignment and/or min/max amount of\nbuffers.\n\n\nvideotestsrc updates the configuration of the bufferpool, it will likely set\nthe min buffers to 1 and the size of the desired buffers. It then updates the\nbufferpool configuration with the new properties.\n\n\nWhen the configuration is successfully updated, videotestsrc sets the\nbufferpool to the active state. This preallocates the buffers in the pool (if\nneeded). This operation can fail when there is not enough memory available.\nSince the bufferpool is provided by xvimagesink, it will allocate buffers\nbacked by an XvImage and pointing to shared memory with the X server.\n\n\nIf the bufferpool is successfully activated, videotestsrc can acquire\na buffer from the pool, fill in the data and push it out to xvimagesink.\n\n\nxvimagesink can know that the buffer originated from its pool by following\nthe pool member.\n\n\nwhen shutting down, videotestsrc will set the pool to the inactive state,\nthis will cause further allocations to fail and currently allocated buffers to\nbe freed. videotestsrc will then free the pool and stop streaming.\n\n\n"});