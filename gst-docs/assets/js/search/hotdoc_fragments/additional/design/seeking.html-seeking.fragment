fragment_downloaded_cb({"url":"additional/design/seeking.html#seeking","fragment":"Seeking\nSeeking in GStreamer means configuring the pipeline for playback of the\nmedia between a certain start and stop time, called the playback\nsegment. By default a pipeline will play from position 0 to the total\nduration of the media at a rate of 1.0.\nA seek is performed by sending a SEEK event to the sink elements of a\npipeline. Sending the SEEK event to a bin will by default forward the\nevent to all sinks in the bin.\nWhen performing a seek, the start and stop values of the segment can be\nspecified as absolute positions or relative to the currently configured\nplayback segment. Note that it is not possible to seek relative to the\ncurrent playback position. To seek relative to the current playback\nposition, one must query the position first and then perform an absolute\nseek to the desired position.\nIf a seek operation is requested using the GST_SEEK_FLAG_FLUSH flag, all\npending data in the pipeline is discarded and playback starts from the new\nposition immediately.  If this flag is not set, the seek is queued to be\nexecuted as soon as possible, which might be after all queues are emptied.\nSeeking can be performed in different formats such as time, frames or\nsamples.\nThe seeking can be performed to a nearby key unit or to the exact\n(estimated) unit in the media (GST_SEEK_FLAG_KEY_UNIT). See below\nfor more details on this.\nThe seeking can be performed by using an estimated target position or in\nan accurate way (GST_SEEK_FLAG_ACCURATE). For some formats this can\nresult in having to scan the complete file in order to accurately find\nthe target unit. See below for more details on this.\nNon segment seeking will make the pipeline emit EOS when the configured\nsegment has been played.\nSegment seeking (using the GST_SEEK_FLAG_SEGMENT) will not emit an\nEOS at the end of the playback segment but will post a SEGMENT_DONE\nmessage on the bus. This message is posted by the element driving the\nplayback in the pipeline, typically a demuxer. After receiving the\nmessage, the application can reconnect the pipeline or issue other seek\nevents in the pipeline. Since the message is posted as early as possible\nin the pipeline, the application has some time to issue a new seek to\nmake the transition seamless. Typically the allowed delay is defined by\nthe buffer sizes of the sinks as well as the size of any queues in the\npipeline.\nThe seek can also change the playback speed of the configured segment. A\nspeed of 1.0 is normal speed, 2.0 is double speed. Negative values mean\nbackward playback.\nWhen performing a seek, several trickmode flags can be used to instruct\ndecoders and demuxers that they are allowed to skip decoding in various\nways. This is most useful when changing to a playback rate different\nto 1.0 and helps when resource consumption is more important than\naccurately producing all frames.\nThe trickmode flags are:\nIn some pipelines, it is possible to control the playback rate instantly\nby sending a seek with the GST_SEEK_FLAG_INSTANT_RATE_CHANGE\nflag. This flag does not work for all pipelines, in which case it is necessary to\nsend a full flushing seek to change the playback rate. When using this\nflag, the seek event is only allowed to change the current rate and can\nmodify the trickmode flags, but it is not possible to change the current\nplayback position or flush.\nInstant rate changing is handled in the pipeline in a specific sequence.\n\n\nGST_SEEK_FLAG_TRICKMODE_KEY_UNITS: Only decode/display key frames\n\nGST_SEEK_FLAG_TRICKMODE_FORWARD_PREDICTED: Skip B-frames\n\nGST_SEEK_FLAG_TRICKMODE_NO_AUDIO: Don't decode audio\n\n"});