fragment_downloaded_cb({"url":"additional/design/progress.html#implementation","fragment":"Implementation\nElements should not do blocking operations from the state change\nfunction. Instead, elements should post an appropriate progress message\nwith the right code and of type GST_PROGRESS_TYPE_START and then\nstart a thread to perform the blocking calls in a cancellable manner.\nIt is highly recommended to only start async operations from the READY\nto PAUSED state and onwards and not from the NULL to READY state. The\nreason for this is that streaming threads are usually started in the\nREADY to PAUSED state and that the current NULL to READY state change is\nused to perform a blocking check for the presence of devices.\nThe progress message needs to be posted from the state change function\nso that the application can immediately take appropriate action after\nsetting the state.\nThe threads will usually perform many blocking calls with different\ncodes in a row, a client might first do a DNS query and then continue\nwith establishing a connection to the server. For this purpose the\nGST_PROGRESS_TYPE_CONTINUE must be used.\nUsually, the thread used to perform the blocking operations can be used\nto implement the streaming threads when needed.\nUpon downward state changes, operations that are busy in the thread are\ncanceled and GST_PROGRESS_TYPE_CANCELED is posted.\nThe application can know about pending tasks because they received the\nGST_PROGRESS_TYPE_START messages that didnâ€™t complete with a\nGST_PROGRESS_TYPE_COMPLETE message, got canceled with a\nGST_PROGRESS_TYPE_CANCELED or errored with\nGST_PROGRESS_TYPE_ERROR. Applications should be able to choose if\nthey wait for the pending operation or cancel them.\nIf an async operation fails, an error message is posted first before the\nGST_PROGRESS_TYPE_ERROR progress message.\n"});