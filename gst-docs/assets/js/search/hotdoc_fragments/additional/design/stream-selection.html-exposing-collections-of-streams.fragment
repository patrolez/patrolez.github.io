fragment_downloaded_cb({"url":"additional/design/stream-selection.html#exposing-collections-of-streams","fragment":"Exposing collections of streams\nAPI:\nElements that create new streams (such as demuxers) or can create new streams\n(like the HLS/DASH alternative streams) can list the streams they can make\navailable with the GstStreamCollection object.\nOther elements that might generate GstStreamCollections are the DVD-VM, which\nhandles internal switching of tracks, or parsebin and decodebin3 when it\naggregates and presents multiple internal stream sources as a single\nconfigurable collection.\nThe GstStreamCollection object is a flat listing of GstStream objects.\nThe various properties of a GstStreamCollection are:\n'identifier'\nthe list of GstStreams in the collection.\nNot implemented : Flags\nFor now, the only flag is INFORMATIONAL - used by container parsers to\npublish information about detected streams without allowing selection of the\nstreams. Solving this might be possible through different means and needs\nmore investigation.\nNot implemented yet : The relationship between the various streams\nThis specifies which streams are exclusive (can not be selected at the same\ntime), are related (such as LINKED_VIEW or ENHANCEMENT), or need to be\nselected together. This requires more investigation\nAn element will inform outside components about that collection of streams via:\nApplications and container bin elements can listen and collect the various\nstream collections to know the full range of streams available within a\nbin/pipeline.\nOnce posted on the bus, a GstStreamCollection is immutable. It is updated by\nsubsequent messages with a matching identifier.\nIf the element that provided the collection goes away, there is no way to know\nthat the streams are no longer valid (without having the user/app track that\nelement). The exception to that is if the bin containing that element (such as\nparsebin or decodebin3) informs that the next collection is a replacement of\nthe former one.\nThe mutual exclusion and relationship lists use stream-ids rather than\nGstStream references in order to avoid circular referencing problems.\n\n\n'identifier'\n\nthe identifier of the collection (unique name)\nGenerated from the 'upstream stream id' (or stream ids, plural)\n\n\n\nthe list of GstStreams in the collection.\n\n\nNot implemented : Flags\nFor now, the only flag is INFORMATIONAL - used by container parsers to\npublish information about detected streams without allowing selection of the\nstreams. Solving this might be possible through different means and needs\nmore investigation.\n\n\nNot implemented yet : The relationship between the various streams\nThis specifies which streams are exclusive (can not be selected at the same\ntime), are related (such as LINKED_VIEW or ENHANCEMENT), or need to be\nselected together. This requires more investigation\n\n\n\nthe identifier of the collection (unique name)\nGenerated from the 'upstream stream id' (or stream ids, plural)\n\n\na GST_MESSAGE_STREAM_COLLECTION message on the bus.\na GST_EVENT_STREAM_COLLECTION on each source pads.\n\n"});