fragment_downloaded_cb({"url":"additional/design/MT-refcounting.html#property-lifetime","fragment":"Property lifetime\nAll properties requiring a lock can change after releasing the associated\nlock. This means that as long as you hold the lock, the state of the\nobject regarding the locked properties is consistent with the information\nobtained. As soon as the lock is released, any values acquired from the\nproperties might not be valid anymore and can as best be described as a\nsnapshot of the state when the lock was held.\nThis means that all properties that require access beyond the scope of the\ncritial section should be copied or refcounted before releasing the lock.\nMost object provide a _get_<property>() method to get a copy or refcounted\ninstance of the property value. The caller should not wory about any locks\nbut should unref/free the object after usage.\nExample:\nthe following example correctly gets the peer pad of an element. It is\nrequired to increase the refcount of the peer pad because as soon as the\nlock is released, the peer could be unreffed and disposed, making the\npointer obtained in the critical section point to invalid memory.\nNote that after releasing the lock the peer might not actually be the peer\nanymore of the pad. If you need to be sure it is, you need to extend the\ncritical section to include the operations on the peer.\nThe following code is equivalent to the above but with using the functions\nto access object properties.\nExample:\nAccessing the name of an object makes a copy of the name. The caller of the\nfunction should g_free() the name after usage.\nor:\n"});