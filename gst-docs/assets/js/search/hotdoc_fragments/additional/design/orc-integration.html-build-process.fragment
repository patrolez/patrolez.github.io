fragment_downloaded_cb({"url":"additional/design/orc-integration.html#build-process","fragment":"Build Process\nThe goal of the build process is to make Orc non-essential for most\ndevelopers and users. This is not to say you shouldn't have Orc\ninstalled -- without it, you will get slow backup C code, just that\npeople compiling GStreamer are not forced to switch from Liboil to Orc\nimmediately.\nWith Orc installed, the build process will use the Orc Compiler (orcc)\nto convert each .orc file into a temporary C source (tmp-orc.c) and a\ntemporary header file (${name}orc.h if constructed from ${base}.orc).\nThe C source file is compiled and linked to the plugin, and the header\nfile is included by other source files in the plugin.\nIf 'make orc-update' is run in the source directory, the files tmp-orc.c\nand ${base}orc.h are copied to ${base}orc-dist.c and ${base}orc-dist.h\nrespectively. The -dist.[ch] files are automatically disted via\norc.mk. The -dist.[ch] files should be checked in to git whenever the\n.orc source is changed and checked in. Example workflow:\nedit .orc file ... make, test, etc. make orc-update git add volume.orc\nvolumeorc-dist.c volumeorc-dist.h git commit\nAt 'make dist' time, all of the .orc files are compiled, and then copied\nto their -dist.[ch] counterparts, and then the -dist.[ch] files are\nadded to the dist directory.\nWithout Orc installed (or --disable-orc given to configure), the\n-dist.[ch] files are copied to tmp-orc.c and ${name}orc.h. When\ncompiled Orc disabled, DISABLE_ORC is defined in config.h, and the C\nbackup code is compiled. This backup code is pure C, and does not\ninclude orc headers or require linking against liborc.\nThe common/orc.mk build method is limited by the inflexibility of\nautomake. The file tmp-orc.c must be a fixed filename, using ORC_NAME\nto generate the filename does not work because it conflicts with\nautomake's dependency generation. Building multiple .orc files is not\npossible due to this restriction.\n"});