fragment_downloaded_cb({"url":"additional/design/progress.html#rtsp-client-but-also-http-mms-","fragment":"RTSP client (but also HTTP, MMS, â€¦)\nWhen the client goes from the READY to the PAUSED state, it opens a socket,\nperforms a DNS lookup, retrieves the SDP and negotiates the streams. All these\noperations currently block the state change function for an indefinite amount\nof time and while they are blocking cannot be canceled.\nInstead, a thread would be started to perform these operations asynchronously\nand the state change would complete with the usual NO_PREROLL return value.\nBefore starting the thread a PROGRESS message would be posted to mark the\nstart of the async operation.\nAs the DNS lookup completes and the connection is established, PROGRESS\nmessages are posted on the bus to inform the application of the progress. When\nsomething fails, an error is posted and a PROGRESS CANCELED message is posted.\nThe application can then stop the pipeline.\nIf there are no errors and the setup of the streams completed successfully, a\nPROGRESS COMPLETED is posted on the bus. The thread then goes to sleep and the\nasynchronous operation completed.\nThe RTSP protocol requires to send a TEARDOWN request to the server\nbefore closing the connection and destroying the socket. A state change to the\nREADY state will issue the TEARDOWN request in the background and notify the\napplication of this pending request with a PROGRESS message.\nThe application might want to only go to the NULL state after it got confirmation\nthat the TEARDOWN request completed or it might choose to go to NULL after a\ntimeout. It might also be possible that the application just want to close the\nsocket as fast as possible without waiting for completion of the TEARDOWN request.\n"});