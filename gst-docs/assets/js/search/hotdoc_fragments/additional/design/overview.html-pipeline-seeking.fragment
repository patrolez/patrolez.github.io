fragment_downloaded_cb({"url":"additional/design/overview.html#pipeline-seeking","fragment":"Pipeline seeking\nSeeking in the pipeline requires a very specific order of operations to\nmake sure that the elements remain synchronized and that the seek is\nperformed with a minimal amount of latency.\nAn application issues a seek event on the pipeline using\ngst_element_send_event() on the pipeline element. The event can be a\nseek event in any of the formats supported by the elements.\nThe pipeline first pauses the pipeline to speed up the seek operations.\nThe pipeline then issues the seek event to all sink elements. The sink\nthen forwards the seek event upstream until some element can perform the\nseek operation, which is typically the source or demuxer element. All\nintermediate elements can transform the requested seek offset to another\nformat, this way a decoder element can transform a seek to a frame\nnumber to a timestamp, for example.\nWhen the seek event reaches an element that will perform the seek\noperation, that element performs the following steps.\nIn step 1) all downstream elements have to return from any blocking\noperations and have to refuse any further buffers or events different\nfrom a FLUSH done.\nThe first step ensures that the streaming thread eventually unblocks and\nthat step 2) can be performed. At this point, dataflow is completely\nstopped in the pipeline.\nIn step 3) the element performs the seek to the requested position.\nIn step 4) all peer elements are allowed to accept data again and\nstreaming can continue from the new position. A FLUSH done event is sent\nto all the peer elements so that they accept new data again and restart\ntheir streaming threads.\nStep 5) informs all elements of the new position in the stream. After\nthat the event function returns back to the application. and the\nstreaming threads start to produce new data.\nSince the pipeline is still PAUSED, this will preroll the next media\nsample in the sinks. The application can wait for this preroll to\ncomplete by performing a _get_state() on the pipeline.\nThe last step in the seek operation is then to adjust the stream\nrunning_time of the pipeline to 0 and to set the pipeline back to\nPLAYING.\nThe sequence of events in our mp3 playback example.\n"});