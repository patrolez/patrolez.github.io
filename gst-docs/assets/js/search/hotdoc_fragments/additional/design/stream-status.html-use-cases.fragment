fragment_downloaded_cb({"url":"additional/design/stream-status.html#use-cases","fragment":"Use cases\nwhen going from READY to PAUSED state, udpsrc will require a\nstreaming thread for pushing data into the depayloader. It will\npost a STREAM_STATUS message indicating its requirement for a\nstreaming thread.\nThe application will usually react to the STREAM_STATUS\nmessages with a sync bus handler.\nThe application can configure the GstTask with a custom\nGstTaskPool to manage the streaming thread or it can ignore the\nmessage which will make the element use its default GstTaskPool.\nThe application can react to the ENTER/LEAVE stream status\nmessage to configure the thread right before it is\nstarted/stopped. This can be used to configure the thread\npriority.\nBefore the GstTask is changed state (start/pause/stop) a\nSTREAM_STATUS message is posted that can be used by the\napplication to keep track of the running streaming threads.\n\nboost the priority of the udp receiver streaming thread\n\n\n\nwhen going from READY to PAUSED state, udpsrc will require a\nstreaming thread for pushing data into the depayloader. It will\npost a STREAM_STATUS message indicating its requirement for a\nstreaming thread.\n\n\nThe application will usually react to the STREAM_STATUS\nmessages with a sync bus handler.\n\n\nThe application can configure the GstTask with a custom\nGstTaskPool to manage the streaming thread or it can ignore the\nmessage which will make the element use its default GstTaskPool.\n\n\nThe application can react to the ENTER/LEAVE stream status\nmessage to configure the thread right before it is\nstarted/stopped. This can be used to configure the thread\npriority.\n\n\nBefore the GstTask is changed state (start/pause/stop) a\nSTREAM_STATUS message is posted that can be used by the\napplication to keep track of the running streaming threads.\n\n\n"});