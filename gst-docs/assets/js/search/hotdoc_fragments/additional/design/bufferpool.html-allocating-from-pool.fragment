fragment_downloaded_cb({"url":"additional/design/bufferpool.html#allocating-from-pool","fragment":"Allocating from pool\nBuffers are allocated from the pool of a pad:\nA GstBuffer that is allocated from the pool will always be writable (have a\nrefcount of 1) and it will also have its pool member point to the\nGstBufferPool that created the buffer.\nBuffers are refcounted in the usual way. When the refcount of the buffer\nreaches 0, the buffer is automatically returned to the pool.\nSince all the buffers allocated from the pool keep a reference to the pool,\nwhen nothing else is holding a refcount to the pool, it will be finalized\nwhen all the buffers from the pool are unreffed. By setting the pool to\nthe inactive state we can drain all buffers from the pool.\nWhen the pool is in the inactive state, gst_buffer_pool_acquire_buffer() will\nreturn GST_FLOW_FLUSHING immediately.\nExtra parameters can be given to the gst_buffer_pool_acquire_buffer() method\nto influence the allocation decision. GST_BUFFER_POOL_ACQUIRE_FLAG_KEY_UNIT\nand GST_BUFFER_POOL_ACQUIRE_FLAG_DISCONT serve as hints.\nWhen the bufferpool is configured with a maximum number of buffers, allocation\nwill block when all buffers are outstanding until a buffer is returned to the\npool. This behaviour can be changed by specifying the\nGST_BUFFER_POOL_ACQUIRE_FLAG_DONTWAIT flag in the parameters. With this flag\nset, allocation will return GST_FLOW_EOS when the pool is empty.\n"});