fragment_downloaded_cb({"url":"additional/design/synchronisation.html#timestamps","fragment":"Timestamps\nThe GstBuffer timestamps and the preceding SEGMENT event (See\nstreams) define a transformation of the buffer timestamps\nto running_time as follows:\nThe following notation is used:\nB: GstBuffer\n- B.timestamp = buffer timestamp (GST_BUFFER_PTS or GST_BUFFER_DTS)\nS:  SEGMENT event preceding the buffers.\n- S.start: start field in the SEGMENT event. This is the lowest allowed\ntimestamp.\n- S.stop: stop field in the SEGMENT event. This is the highers allowed\ntimestamp.\n- S.rate: rate field of SEGMENT event. This is the playback rate.\n- S.base: a base time for the time. This is the total elapsed running_time\nof any previous segments.\n- S.offset: an offset to apply to S.start or S.stop. This is the amount that\nhas already been elapsed in the segment.\nValid buffers for synchronisation are those with B.timestamp between\nS.start and S.stop (after applying the S.offset). All other buffers\noutside this range should be dropped or clipped to these boundaries (see\nalso segments).\nThe following transformation to running_time exist:\nWe write B.running_time as the running_time obtained from the SEGMENT\nevent and the buffers of that segment.\nThe first displayable buffer will yield a value of 0 (since B.timestamp == S.start and S.offset and S.base == 0).\nFor S.rate > 1.0, the timestamps will be scaled down to increase the\nplayback rate. Likewise, a rate between 0.0 and 1.0 will slow down\nplayback.\nFor negative rates, timestamps are received stop S.stop to S.start so\nthat the first buffer received will be transformed into B.running_time\nof 0 (B.timestamp == S.stop and S.base == 0).\nThis makes it so that B.running_time is always monotonically increasing\nstarting from 0 with both positive and negative rates.\n"});