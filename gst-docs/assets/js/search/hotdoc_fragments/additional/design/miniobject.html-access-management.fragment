fragment_downloaded_cb({"url":"additional/design/miniobject.html#access-management","fragment":"Access management\nGstMiniObject can be shared between multiple threads. It is important\nthat when a thread writes to a GstMiniObject that the other threads\ndonâ€™t not see the changes.\nTo avoid exposing changes from one thread to another thread, the\nminiobjects are managed in a Copy-On-Write way. A copy is only made when\nit is known that the object is shared between multiple objects or\nthreads.\nThere are 2 methods implemented for controlling access to the miniobject.\nA first method relies on the refcount of the object to control\nwritability. Objects using this method have the LOCKABLE flag unset.\nA second method relies on a separate counter for controlling the\naccess to the object. Objects using this method have the LOCKABLE\nflag set.\nYou can check if an object is writable with gst_mini_object_is_writable() and\nyou can make any miniobject writable with gst_mini_object_make_writable().\nThis will create a writable copy when the object was not writable.\n\n\nA first method relies on the refcount of the object to control\nwritability. Objects using this method have the LOCKABLE flag unset.\n\n\nA second method relies on a separate counter for controlling the\naccess to the object. Objects using this method have the LOCKABLE\nflag set.\nYou can check if an object is writable with gst_mini_object_is_writable() and\nyou can make any miniobject writable with gst_mini_object_make_writable().\nThis will create a writable copy when the object was not writable.\n\n\n"});