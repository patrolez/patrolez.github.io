fragment_downloaded_cb({"url":"allocators/gstdmabuf.html#GST_CAPS_FEATURE_MEMORY_DMABUF","fragment":"\n\tGST_CAPS_FEATURE_MEMORY_DMABUF\n\n\n\tGstAllocators.CAPS_FEATURE_MEMORY_DMABUF\n\n\n\tGstAllocators.CAPS_FEATURE_MEMORY_DMABUF\n\nConstant that defines the caps feature name for DMA buffer sharing.\nIt has to be used for non-mappable dma-buf only, i.e. when the underlying\nmemory is not mappable to user space. Or when the mapped memory contains\nnon meaningful data. It can be the case for protected content or when the\nuser wants explicitly avoid any software post processing.\nIn these cases all elements between the exported and the importer has to work\nin passthrough mode. This is done by adding this caps feature.\nWhen the memory is mappable for read and write requests then it is assumes\nto be a fast path and so this caps feature should not be used. Though\naccording to the dma-buf protocol, while it is mapped it prevents the\nexporter to migrate the buffer.\nThis caps feature should not serve at all the purpose of selecting the\nGST_ALLOCATOR_DMABUF allocator during caps negotiation.\nWhen the exporter is the upstream element from the importer point of view,\nthe exporter should try to map the dma buffer at runtime (preferably during\ndecide_allocation phase). When it succeeds for GST_MAP_READWRITE this caps\nfeature should not be used. This allows scalers, color converts and any image\nprocessing filters to work directly on the dma buffer.\nIn this case the importer element should check all incoming memory using\ngst_is_dmabuf_memory.\n\n\tSince\t\t\t: 1.12\n\t\t\nConstant that defines the caps feature name for DMA buffer sharing.\nIt has to be used for non-mappable dma-buf only, i.e. when the underlying\nmemory is not mappable to user space. Or when the mapped memory contains\nnon meaningful data. It can be the case for protected content or when the\nuser wants explicitly avoid any software post processing.\nIn these cases all elements between the exported and the importer has to work\nin passthrough mode. This is done by adding this caps feature.\nWhen the memory is mappable for read and write requests then it is assumes\nto be a fast path and so this caps feature should not be used. Though\naccording to the dma-buf protocol, while it is mapped it prevents the\nexporter to migrate the buffer.\nThis caps feature should not serve at all the purpose of selecting the\nGST_ALLOCATOR_DMABUF allocator during caps negotiation.\nWhen the exporter is the upstream element from the importer point of view,\nthe exporter should try to map the dma buffer at runtime (preferably during\ndecide_allocation phase). When it succeeds for Gst.MAP_READWRITE this caps\nfeature should not be used. This allows scalers, color converts and any image\nprocessing filters to work directly on the dma buffer.\nIn this case the importer element should check all incoming memory using\nGstAllocators.prototype.is_dmabuf_memory.\n\n\tSince\t\t\t: 1.12\n\t\t\nConstant that defines the caps feature name for DMA buffer sharing.\nIt has to be used for non-mappable dma-buf only, i.e. when the underlying\nmemory is not mappable to user space. Or when the mapped memory contains\nnon meaningful data. It can be the case for protected content or when the\nuser wants explicitly avoid any software post processing.\nIn these cases all elements between the exported and the importer has to work\nin passthrough mode. This is done by adding this caps feature.\nWhen the memory is mappable for read and write requests then it is assumes\nto be a fast path and so this caps feature should not be used. Though\naccording to the dma-buf protocol, while it is mapped it prevents the\nexporter to migrate the buffer.\nThis caps feature should not serve at all the purpose of selecting the\nGST_ALLOCATOR_DMABUF allocator during caps negotiation.\nWhen the exporter is the upstream element from the importer point of view,\nthe exporter should try to map the dma buffer at runtime (preferably during\ndecide_allocation phase). When it succeeds for Gst.MAP_READWRITE this caps\nfeature should not be used. This allows scalers, color converts and any image\nprocessing filters to work directly on the dma buffer.\nIn this case the importer element should check all incoming memory using\nGstAllocators.is_dmabuf_memory.\n\n\tSince\t\t\t: 1.12\n\t\t\n"});