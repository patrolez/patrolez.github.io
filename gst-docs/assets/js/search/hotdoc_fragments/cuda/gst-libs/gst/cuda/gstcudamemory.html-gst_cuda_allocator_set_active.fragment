fragment_downloaded_cb({"url":"cuda/gst-libs/gst/cuda/gstcudamemory.html#gst_cuda_allocator_set_active","fragment":"\n\tgst_cuda_allocator_set_active\n\n\n\tGstCuda.CudaAllocator.prototype.set_active\n\n\n\tGstCuda.CudaAllocator.set_active\n\nControls the active state of allocator. Default GstCudaAllocator is\nstateless and therefore active state is ignored, but subclass implementation\n(e.g., GstCudaPoolAllocator) will require explicit active state control\nfor its internal resource management.\nThis method is conceptually identical to gst_buffer_pool_set_active method.\nParameters:\na GstCudaAllocator\nthe new active state\nTRUE if active state of allocator was successfully updated.\n\n\tSince\t\t\t: 1.24\n\t\t\nControls the active state of allocator. Default GstCuda.CudaAllocator is\nstateless and therefore active state is ignored, but subclass implementation\n(e.g., GstCuda.CudaPoolAllocator) will require explicit active state control\nfor its internal resource management.\nThis method is conceptually identical to gst_buffer_pool_set_active method.\nParameters:\na GstCuda.CudaAllocator\nthe new active state\ntrue if active state of allocator was successfully updated.\n\n\tSince\t\t\t: 1.24\n\t\t\nControls the active state of allocator. Default GstCuda.CudaAllocator is\nstateless and therefore active state is ignored, but subclass implementation\n(e.g., GstCuda.CudaPoolAllocator) will require explicit active state control\nfor its internal resource management.\nThis method is conceptually identical to gst_buffer_pool_set_active method.\nParameters:\na GstCuda.CudaAllocator\nthe new active state\nTrue if active state of allocator was successfully updated.\n\n\tSince\t\t\t: 1.24\n\t\t\n"});