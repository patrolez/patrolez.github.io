fragment_downloaded_cb({"url":"cuda/gst-libs/gst/cuda/gstcudamemory.html#gst_cuda_allocator_alloc_wrapped","fragment":"\n\tgst_cuda_allocator_alloc_wrapped\n\n\n\tGstCuda.CudaAllocator.prototype.alloc_wrapped\n\n\n\tGstCuda.CudaAllocator.alloc_wrapped\n\nAllocates a new memory that wraps the given CUDA device memory.\ninfo must represent actual memory layout, in other words, offset, stride\nand size fields of info should be matched with memory layout of dev_ptr\nBy default, wrapped dev_ptr will be freed at the time when GstMemory\nis freed if notify is NULL. Otherwise, if caller sets notify,\nfreeing dev_ptr is callers responsibility and default GstCudaAllocator\nwill not free it.\nParameters:\na GstCudaAllocator\na GstCudaContext\na GstCudaStream\na GstVideoInfo\na CUdeviceptr CUDA device memory\nuser data\n(allow-none) (scope async) (closure user_data):\nCalled with user_data when the memory is freed\na new GstMemory\n\n\tSince\t\t\t: 1.24\n\t\t\nAllocates a new memory that wraps the given CUDA device memory.\ninfo must represent actual memory layout, in other words, offset, stride\nand size fields of info should be matched with memory layout of dev_ptr\nBy default, wrapped dev_ptr will be freed at the time when Gst.Memory\nis freed if notify is null. Otherwise, if caller sets notify,\nfreeing dev_ptr is callers responsibility and default GstCuda.CudaAllocator\nwill not free it.\nParameters:\na GstCuda.CudaAllocator\na GstCuda.CudaContext\na GstCuda.CudaStream\na GstVideo.VideoInfo\na CUdeviceptr CUDA device memory\nuser data\n(allow-none) (scope async) (closure user_data):\nCalled with user_data when the memory is freed\na new Gst.Memory\n\n\tSince\t\t\t: 1.24\n\t\t\nAllocates a new memory that wraps the given CUDA device memory.\ninfo must represent actual memory layout, in other words, offset, stride\nand size fields of info should be matched with memory layout of dev_ptr\nBy default, wrapped dev_ptr will be freed at the time when Gst.Memory\nis freed if notify is None. Otherwise, if caller sets notify,\nfreeing dev_ptr is callers responsibility and default GstCuda.CudaAllocator\nwill not free it.\nParameters:\na GstCuda.CudaAllocator\na GstCuda.CudaContext\na GstCuda.CudaStream\na GstVideo.VideoInfo\na CUdeviceptr CUDA device memory\nuser data\n(allow-none) (scope async) (closure user_data):\nCalled with user_data when the memory is freed\na new Gst.Memory\n\n\tSince\t\t\t: 1.24\n\t\t\n"});