fragment_downloaded_cb({"url":"tutorials/android/link-against-gstreamer.html#hello-gstreamer-java-code","fragment":"Hello GStreamer [Java code]\nThe tutorial code is in the gst-docs subdirectory.\nThis directory contains the usual Android NDK structure: a src folder for the Java code,\na jni folder for the C code and a res folder for UI resources.\nWe recommend that you open this project in Eclipse (as explained\nin Installing for Android development) so you can\neasily see how all the pieces fit together.\nLet’s first introduce the Java code, then the C code and finally the\nmakefile that allows GStreamer integration.\nsrc/org/freedesktop/gstreamer/tutorials/tutorial_1/Tutorial1.java\nCalls from Java to C happen through native methods, like the one\ndeclared here:\nThis tells Java that there exists a method with this signature somewhere\nso it compiles happily. It is your responsibility to ensure that, at\nruntime, this method is accessible. This is accomplished by the C code\nshown later.\nThe first bit of code that gets actually executed is the static\ninitializer of the class:\nIt loads libgstreamer_android.so, which contains all GStreamer\nmethods, and libtutorial-1.so, which contains the C part of this\ntutorial, explained below.\nUpon loading, each of these libraries’ JNI_OnLoad() method is\nexecuted. It basically registers the native methods that these libraries\nexpose. The GStreamer library only exposes a init() method, which\ninitializes GStreamer and registers all plugins (The tutorial library is\nexplained later below).\nNext, in the OnCreate() method of the\nActivity\nwe actually initialize GStreamer by calling GStreamer.init(). This\nmethod requires a\nContext\nso it cannot be called from the static initializer, but there is no\ndanger in calling it multiple times, as all but the first time the calls\nwill be ignored.\nShould initialization fail, the init() method would throw an\nException\nwith the details provided by the GStreamer library.\nThen, the native method nativeGetGStreamerInfo() is called and a\nstring is retrieved, which is used to format the content of the\nTextView\nin the UI.\nThis finishes the UI part of this tutorial. Let’s take a look at the C\ncode:\n"});