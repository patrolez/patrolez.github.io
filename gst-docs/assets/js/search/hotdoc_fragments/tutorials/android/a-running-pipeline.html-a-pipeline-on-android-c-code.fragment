fragment_downloaded_cb({"url":"tutorials/android/a-running-pipeline.html#a-pipeline-on-android-c-code","fragment":"A pipeline on Android [C code]\njni/tutorial-2.c\nLet’s start with the CustomData structure. We have seen it in most of\nthe basic tutorials, and it is used to hold all our information in one\nplace, so we can easily pass it around to\ncallbacks:\nWe will see the meaning of each member as we go. What is interesting now\nis that CustomData belongs to the application, so a pointer is kept in\nthe Tutorial2 Java class in the private long native_custom_data attribute. Java only holds this pointer for us; it\nis completely handled in C code.\nFrom C, this pointer can be set and retrieved with the\nSetLongField()\nand\nGetLongField()\nJNI functions, but two convenience macros have been defined,\nSET_CUSTOM_DATA and GET_CUSTOM_DATA. These macros are handy because\nthe long type used in Java is always 64 bits wide, but the pointer\nused in C can be either 32 or 64 bits wide. The macros take care of the\nconversion without warnings.\nThe JNI_OnLoad function is almost the same as the previous tutorial.\nIt registers the list of native methods (which is longer in this\ntutorial). It also\nuses pthread_key_create()\nto be able to store per-thread information, which is crucial to properly\nmanage the JNI Environment, as shown later.\nThis method is called from the static initializer of the Java class,\nwhich is passed as a parameter (since this is called from a static\nmethod, it receives a class object instead of an instance object). In\norder for C code to be able to call a Java method, it needs to know the\nmethod’s\nMethodID.\nThis ID is obtained from the method’s name and signature and can be\ncached. The purpose of the gst_native_class_init() function is to\nobtain the IDs of all the methods and fields that the C code will need.\nIf some ID cannot be retrieved, the calling Java class does not offer\nthe expected interface and execution should halt (which is not currently\ndone for simplicity).\nLet’s review now the first native method which can be directly called\nfrom Java:\n"});