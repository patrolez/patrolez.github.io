fragment_downloaded_cb({"url":"tutorials/android/a-running-pipeline.html#app_function","fragment":"app_function()\nIt first creates a GLib context so all GSource are kept in the same\nplace. This also helps cleaning after GSources created by other\nlibraries which might not have been properly disposed of. A new context\nis created with g_main_context_new() and then it is made the default\none for the thread with\ng_main_context_push_thread_default().\nIt then creates a pipeline the easy way, with gst-parse-launch(). In\nthis case, it is simply an audiotestsrc (which produces a continuous\ntone) and an autoaudiosink, with accompanying adapter elements.\nThese lines create a bus signal watch and connect to some interesting\nsignals, just like we have been doing in the basic tutorials. The\ncreation of the watch is done step by step instead of using\ngst_bus_add_signal_watch() to exemplify how to use a custom GLib\ncontext.\nFinally, the main loop is created and set to run. When it exits (because\nsomebody else calls g_main_loop_quit()) the main loop is disposed of.\nBefore entering the main loop, though,\ncheck_initialization_complete() is called. This method checks if all\nconditions are met to consider the native code “ready” to accept\ncommands. Since having a running main loop is one of the conditions,\ncheck_initialization_complete() is called here. This method is\nreviewed below.\nOnce the main loop has quit, all resources are freed in lines 178 to\n181.\n"});