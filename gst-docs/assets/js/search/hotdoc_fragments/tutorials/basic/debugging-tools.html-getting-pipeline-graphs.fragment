fragment_downloaded_cb({"url":"tutorials/basic/debugging-tools.html#getting-pipeline-graphs","fragment":"Getting pipeline graphs\nFor those cases where your pipeline starts to grow too large and you\nlose track of what is connected with what, GStreamer has the capability\nto output graph files. These are .dot files, readable with free\nprograms like GraphViz, that describe the\ntopology of your pipeline, along with the caps negotiated in each link.\nThis is also very handy when using all-in-one elements like playbin\nor uridecodebin, which instantiate several elements inside them. Use\nthe .dot files to learn what pipeline they have created inside (and\nlearn a bit of GStreamer along the way).\nTo obtain .dot files, simply set\nthe GST_DEBUG_DUMP_DOT_DIR environment variable to point to the\nfolder where you want the files to be placed. gst-launch-1.0 will create\na .dot file at each state change, so you can see the evolution of the\ncaps negotiation. Unset the variable to disable this facility. From\nwithin your application, you can use the\nGST_DEBUG_BIN_TO_DOT_FILE() and\nGST_DEBUG_BIN_TO_DOT_FILE_WITH_TS() macros to generate .dot files\nat your convenience.\nHere you have an example of the kind of pipelines that playbin\ngenerates. It is very complex because playbin can handle many\ndifferent cases: Your manual pipelines normally do not need to be this\nlong. If your manual pipeline is starting to get very big, consider\nusing playbin.\n\nTo download the full-size picture, use the attachments link at the top\nof this page (It's the paperclip icon).\n"});