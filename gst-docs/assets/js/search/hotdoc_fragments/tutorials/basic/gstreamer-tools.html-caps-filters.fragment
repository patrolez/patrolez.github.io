fragment_downloaded_cb({"url":"tutorials/basic/gstreamer-tools.html#caps-filters","fragment":"Caps filters\nWhen an element has more than one output pad, it might happen that the\nlink to the next element is ambiguous: the next element may have more\nthan one compatible input pad, or its input pad may be compatible with\nthe Pad Caps of all the output pads. In these cases GStreamer will link\nusing the first pad that is available, which pretty much amounts to\nsaying that GStreamer will choose one output pad at random.\nConsider the following\npipeline:\nThis is the same media file and demuxer as in the previous example. The\ninput Pad Caps of filesink are ANY, meaning that it can accept any\nkind of media. Which one of the two output pads of matroskademux will\nbe linked against the filesink? video_0 or audio_0? You cannot\nknow.\nYou can remove this ambiguity, though, by using named pads, as in the\nprevious sub-section, or by using Caps\nFilters:\nA Caps Filter behaves like a pass-through element which does nothing and\nonly accepts media with the given Caps, effectively resolving the\nambiguity. In this example, between matroskademux and matroskamux we\nadded a video/x-vp8 Caps Filter to specify that we are interested in\nthe output pad of matroskademux which can produce this kind of video.\nTo find out the Caps an element accepts and produces, use the\ngst-inspect-1.0 tool. To find out the Caps contained in a particular file,\nuse the gst-discoverer-1.0 tool. To find out the Caps an element is\nproducing for a particular pipeline, run gst-launch-1.0 as usual, with the\nâ€“v option to print Caps information.\n"});