fragment_downloaded_cb({"url":"tutorials/basic/gstreamer-tools.html#pads","fragment":"Pads\nInstead of letting GStreamer choose which Pad to use when linking two\nelements, you may want to specify the Pads directly. You can do this by\nadding a dot plus the Pad name after the name of the element (it must be\na named element). Learn the names of the Pads of an element by using\nthe gst-inspect-1.0 tool.\nThis is useful, for example, when you want to retrieve one particular\nstream out of a\ndemuxer:\nThis fetches a media file from the internet using souphttpsrc, which\nis in webm format (a special kind of Matroska container, see Basic tutorial 2: GStreamer concepts). We\nthen open the container using matroskademux. This media contains both\naudio and video, so matroskademux will create two output Pads, named\nvideo_0 and audio_0. We link video_0 to a matroskamux element\nto re-pack the video stream into a new container, and finally link it to\na filesink, which will write the stream into a file named\n\"sintel_video.mkv\" (the location property specifies the name of the\nfile).\nAll in all, we took a webm file, stripped it of audio, and generated a\nnew matroska file with the video. If we wanted to keep only the\naudio:\nThe vorbisparse element is required to extract some information from\nthe stream and put it in the Pad Caps, so the next element,\nmatroskamux, knows how to deal with the stream. In the case of video\nthis was not necessary, because matroskademux already extracted this\ninformation and added it to the Caps.\nNote that in the above two examples no media has been decoded or played.\nWe have just moved from one container to another (demultiplexing and\nre-multiplexing again).\n"});