fragment_downloaded_cb({"url":"tutorials/basic/media-formats-and-pad-capabilities.html#walkthrough","fragment":"Walkthrough\nThe print_field, print_caps and print_pad_templates simply\ndisplay, in a human-friendly format, the capabilities structures. If you\nwant to learn about the internal organization of the\nGstCaps structure, read  the GStreamer Documentation regarding Pad\nCaps.\ngst_element_get_static_pad() retrieves the named Pad from the given\nelement. This Pad is static because it is always present in the\nelement. To know more about Pad availability read the GStreamer documentation about Pads.\nThen we call gst_pad_get_current_caps() to retrieve the Pad's\ncurrent Capabilities, which can be fixed or not, depending on the state\nof the negotiation process. They could even be non-existent, in which\ncase, we call gst_pad_query_caps() to retrieve the currently\nacceptable Pad Capabilities. The currently acceptable Caps will be the\nPad Template's Caps in the NULL state, but might change in later states,\nas the actual hardware Capabilities might be queried.\nWe then print these Capabilities.\nIn the previous tutorials we created the elements directly using\ngst_element_factory_make() and skipped talking about factories, but we\nwill do now. A GstElementFactory is in charge of instantiating a\nparticular type of element, identified by its factory name.\nYou can use gst_element_factory_find() to create a factory of type\n“videotestsrc”, and then use it to instantiate multiple “videotestsrc”\nelements using gst_element_factory_create().\ngst_element_factory_make() is really a shortcut for\ngst_element_factory_find()+ gst_element_factory_create().\nThe Pad Templates can already be accessed through the factories, so they\nare printed as soon as the factories are created.\nWe skip the pipeline creation and start, and go to the State-Changed\nmessage handling:\nThis simply prints the current Pad Caps every time the state of the\npipeline changes. You should see, in the output, how the initial caps\n(the Pad Template's Caps) are progressively refined until they are\ncompletely fixed (they contain a single type with no ranges).\n"});