fragment_downloaded_cb({"url":"tutorials/basic/media-information-gathering.html#walkthrough","fragment":"Walkthrough\nThese are the main steps to use the GstDiscoverer:\ngst_discoverer_new() creates a new Discoverer object. The first\nparameter is the timeout per file, in nanoseconds (use the\nGST_SECOND macro for simplicity).\nConnect to the interesting signals, as usual. We discuss them in the\nsnippet for their callbacks.\ngst_discoverer_start() launches the discovering process, but we have\nnot provided any URI to discover yet. This is done\nnext:\ngst_discoverer_discover_uri_async() enqueues the provided URI for\ndiscovery. Multiple URIs can be enqueued with this function. As the\ndiscovery process for each of them finishes, the registered callback\nfunctions will be fired\nup.\nThe usual GLib main loop is instantiated and executed. We will get out\nof it when g_main_loop_quit() is called from the\non_finished_cb callback.\nOnce we are done with the discoverer, we stop it with\ngst_discoverer_stop() and unref it with g_object_unref().\nLet's review now the callbacks we have\nregistered:\nWe got here because the Discoverer has finished working on one URI, and\nprovides us a GstDiscovererInfo structure with all the information.\nThe first step is to retrieve the particular URI this call refers to (in\ncase we had multiple discover process running, which is not the case in\nthis example) with gst_discoverer_info_get_uri() and the discovery\nresult with gst_discoverer_info_get_result().\nAs the code shows, any result other than GST_DISCOVERER_OK means that\nthere has been some kind of problem, and this URI cannot be played. The\nreasons can vary, but the enum values are quite explicit\n(GST_DISCOVERER_BUSY can only happen when in synchronous mode, which\nis not used in this example).\nIf no error happened, information can be retrieved from the\nGstDiscovererInfo structure with the different\ngst_discoverer_info_get_* methods (like,\ngst_discoverer_info_get_duration(), for example).\nBits of information which are made of lists, like tags and stream info,\nneeds some extra parsing:\nTags are metadata (labels) attached to the media. They can be examined\nwith gst_tag_list_foreach(), which will call print_tag_foreach for\neach tag found (the list could also be traversed manually, for example,\nor a specific tag could be searched for with\ngst_tag_list_get_string()). The code for print_tag_foreach is pretty\nmuch self-explanatory.\ngst_discoverer_info_get_stream_info() returns\na GstDiscovererStreamInfo structure that is parsed in\nthe print_topology function, and then discarded\nwith gst_discoverer_stream_info_unref().\nThe print_stream_info function's code is also pretty much\nself-explanatory: it prints the stream's capabilities and then the\nassociated caps, using print_tag_foreach too.\nThen, print_topology looks for the next element to display. If\ngst_discoverer_stream_info_get_next() returns a non-NULL stream info,\nit refers to our descendant and that should be displayed. Otherwise, if\nwe are a container, recursively call print_topology on each of our\nchildren obtained with gst_discoverer_container_info_get_streams().\nOtherwise, we are a final stream, and do not need to recurse (This part\nof the Discoverer API is admittedly a bit obscure).\n"});