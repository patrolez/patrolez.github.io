fragment_downloaded_cb({"url":"tutorials/basic/dynamic-pipelines.html#walkthrough","fragment":"Walkthrough\nSo far we have kept all the information we needed (pointers\nto GstElements, basically) as local variables. Since this tutorial\n(and most real applications) involves callbacks, we will group all our\ndata in a structure for easier handling.\nThis is a forward reference, to be used later.\nWe create the elements as usual. uridecodebin will internally\ninstantiate all the necessary elements (sources, demuxers and decoders)\nto turn a URI into raw audio and/or video streams. It does half the work\nthat playbin does. Since it contains demuxers, its source pads are\nnot initially available and we will need to link to them on the fly.\naudioconvert is useful for converting between different audio formats,\nmaking sure that this example will work on any platform, since the\nformat produced by the audio decoder might not be the same that the\naudio sink expects.\naudioresample is useful for converting between different audio sample rates,\nsimilarly making sure that this example will work on any platform, since the\naudio sample rate produced by the audio decoder might not be one that the audio\nsink supports.\nThe autoaudiosink is the equivalent of autovideosink seen in the\nprevious tutorial, for audio. It will render the audio stream to the\naudio card.\nHere we link the elements converter, resample and sink, but we DO NOT link\nthem with the source, since at this point it contains no source pads. We\njust leave this branch (converter + sink) unlinked, until later on.\nWe set the URI of the file to play via a property, just like we did in\nthe previous tutorial.\n"});