fragment_downloaded_cb({"url":"tutorials/basic/media-formats-and-pad-capabilities.html#pads","fragment":"Pads\nAs it has already been shown, Pads allow information to enter and leave\nan element. The Capabilities (or Caps, for short) of a Pad, then,\nspecify what kind of information can travel through the Pad. For\nexample, “RGB video with a resolution of 320x200 pixels and 30 frames\nper second”, or “16-bits per sample audio, 5.1 channels at 44100 samples\nper second”, or even compressed formats like mp3 or h264.\nPads can support multiple Capabilities (for example, a video sink can\nsupport video in different types of RGB or YUV formats) and Capabilities can be\nspecified as ranges (for example, an audio sink can support samples\nrates from 1 to 48000 samples per second). However, the actual\ninformation traveling from Pad to Pad must have only one well-specified\ntype. Through a process known as negotiation, two linked Pads agree on\na common type, and thus the Capabilities of the Pads become fixed\n(they only have one type and do not contain ranges). The walkthrough of\nthe sample code below should make all this clear.\nIn order for two elements to be linked together, they must share a\ncommon subset of Capabilities (Otherwise they could not possibly\nunderstand each other). This is the main goal of Capabilities.\nAs an application developer, you will usually build pipelines by linking\nelements together (to a lesser extent if you use all-in-all elements\nlike playbin). In this case, you need to know the Pad Caps (as they\nare familiarly referred to) of your elements, or, at least, know what\nthey are when GStreamer refuses to link two elements with a negotiation\nerror.\n"});