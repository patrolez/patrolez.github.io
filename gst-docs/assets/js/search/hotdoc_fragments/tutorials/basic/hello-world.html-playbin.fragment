fragment_downloaded_cb({"url":"tutorials/basic/hello-world.html#playbin","fragment":"playbin\nSo, what kind of pipeline are we asking gst_parse_launch() to build for\nus? Here enters the second key point: We are building a pipeline\ncomposed of a single element called playbin.\nplaybin is a special element which acts as a source and as a sink, and\nis a whole pipeline. Internally, it creates and connects all the\nnecessary elements to play your media, so you do not have to worry about\nit.\nIt does not allow the control granularity that a manual pipeline does,\nbut, still, it permits enough customization to suffice for a wide range\nof applications. Including this tutorial.\nIn this example, we are only passing one parameter to playbin, which\nis the URI of the media we want to play. Try changing it to something\nelse! Whether it is an http:// or file:// URI, playbin will\ninstantiate the appropriate GStreamer source transparently!\nIf you mistype the URI, or the file does not exist, or you are missing a\nplug-in, GStreamer provides several notification mechanisms, but the\nonly thing we are doing in this example is exiting on error, so do not\nexpect much feedback.\nThis line highlights another interesting concept: the state. Every\nGStreamer element has an associated state, which you can more or less\nthink of as the Play/Pause button in your regular DVD player. For now,\nsuffice to say that playback will not start unless you set the pipeline\nto the PLAYING state.\nIn this line, gst_element_set_state() is setting pipeline (our only\nelement, remember) to the PLAYING state, thus initiating playback.\nThese lines will wait until an error occurs or the end of the stream is\nfound. gst_element_get_bus() retrieves the pipeline's bus, and\ngst_bus_timed_pop_filtered() will block until you receive either an\nERROR or an EOS (End-Of-Stream) through that bus. Do not worry much\nabout this line, the GStreamer bus is explained in Basic tutorial 2:\nGStreamer concepts.\nAnd that's it! From this point onwards, GStreamer takes care of\neverything. Execution will end when the media reaches its end (EOS) or\nan error is encountered (try closing the video window, or unplugging the\nnetwork cable). The application can always be stopped by pressing\ncontrol-C in the console.\n"});