fragment_downloaded_cb({"url":"tutorials/basic/playback-speed.html#walkthrough","fragment":"Walkthrough\nThere is nothing new in the initialization code in the main function:  a\nplaybin pipeline is instantiated, an I/O watch is installed to track\nkeystrokes and a GLib main loop is executed.\nThen, in the keyboard handler function:\nPause / Playing toggle is handled with gst_element_set_state() as in\nprevious tutorials.\nUse ‘S’ and ‘s’ to double or halve the current playback rate, and ‘d’ to\nreverse the current playback direction. In both cases, the\nrate variable is updated and send_seek_event is called. Let’s\nreview this function.\nThis function creates a new Seek Event and sends it to the pipeline to\nupdate the rate. First, the current position is recovered with\ngst_element_query_position(). This is needed because the Seek Event\njumps to another position in the stream, and, since we do not actually\nwant to move, we jump to the current position. Using a Step Event would\nbe simpler, but this event is not currently fully functional, as\nexplained in the Introduction.\nThe Seek Event is created with gst_event_new_seek(). Its parameters\nare, basically, the new rate, the new start position and the new stop\nposition. Regardless of the playback direction, the start position must\nbe smaller than the stop position, so the two playback directions are\ntreated differently.\nAs explained in the Introduction, to avoid performing multiple Seeks,\nthe Event is sent to only one sink, in this case, the video sink. It is\nobtained from playbin through the video-sink property. It is read\nat this time instead at initialization time because the actual sink may\nchange depending on the media contents, and this won’t be known until\nthe pipeline is PLAYING and some media has been read.\nThe new Event is finally sent to the selected sink with\ngst_element_send_event().\nBack to the keyboard handler, we still miss the frame stepping code,\nwhich is really simple:\nA new Step Event is created with gst_event_new_step(), whose\nparameters basically specify the amount to skip (1 frame in the example)\nand the new rate (which we do not change).\nThe video sink is grabbed from playbin in case we didn’t have it yet,\njust like before.\nAnd with this we are done. When testing this tutorial, keep in mind that\nbackward playback is not optimal in many elements.\n\nChanging the playback rate might only work with local files. If you cannot modify it, try changing the URI passed to playbin in line 114 to a local URI, starting with file:///\n"});