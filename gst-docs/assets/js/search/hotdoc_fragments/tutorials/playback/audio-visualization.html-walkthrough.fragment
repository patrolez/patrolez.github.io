fragment_downloaded_cb({"url":"tutorials/playback/audio-visualization.html#walkthrough","fragment":"Walkthrough\nFirst off, we indicate playbin that we want an audio visualization by\nsetting the GST_PLAY_FLAG_VIS flag. If the media already contains\nvideo, this flag has no effect.\nIf no visualization plugin is enforced by the user, playbin will use\ngoom (audio visualization will be disabled if goom is not\navailable). The rest of the tutorial shows how to find out the available\nvisualization elements and enforce one to playbin.\ngst_registry_feature_filter() examines all elements currently in the\nGStreamer registry and selects those for which\nthe filter_vis_features function returns TRUE. This function selects\nonly the Visualization plugins:\nA bit of theory regarding the organization of GStreamer elements is in\nplace: Each of the files that GStreamer loads at runtime is known as a\nPlugin (GstPlugin). A Plugin can contain many Features\n(GstPluginFeature). There are different kinds of Features, among them,\nthe Element Factories (GstElementFactory) that we have been using to\nbuild Elements (GstElement).\nThis function simply disregards all Features which are not Factories,\nand then all Factories whose class (obtained with\ngst_element_factory_get_klass()) does not include “Visualization”.  As\nstated in the documentation for GstElementFactory, a Factory’s class\nis a “string describing the type of element, as an unordered list\nseparated with slashes (/)”. Examples of classes are “Source/Network”,\n“Codec/Decoder/Video”, “Codec/Encoder/Audio” or “Visualization”.\nOnce we have the list of Visualization plugins, we print their names\n(gst_element_factory_get_longname()) and choose one (in this case,\nGOOM).\nThe selected factory is used to instantiate an actual GstElement which\nis then passed to playbin through the vis-plugin property:\nAnd we are done.\n"});