fragment_downloaded_cb({"url":"tutorials/playback/custom-playbin-sinks.html#walkthrough","fragment":"Walkthrough\nAll the Elements that compose our sink-bin are instantiated. We use an\nequalizer-3bands and an autoaudiosink, with an audioconvert in\nbetween, because we are not sure of the capabilities of the audio sink\n(since they are hardware-dependant).\nThis adds the new Elements to the Bin and links them just as we would do\nif this was a pipeline.\nNow we need to create a Ghost Pad so this partial pipeline inside the\nBin can be connected to the outside. This Ghost Pad will be connected to\na Pad in one of the internal Elements (the sink pad of the equalizer),\nso we retrieve this Pad with gst_element_get_static_pad(). Remember\nfrom Basic tutorial 7: Multithreading and Pad Availability that\nif this was a Request Pad instead of an Always Pad, we would need to use\ngst_element_request_pad().\nThe Ghost Pad is created with gst_ghost_pad_new() (pointing to the\ninner Pad we just acquired), and activated with gst_pad_set_active().\nIt is then added to the Bin with gst_element_add_pad(), transferring\nownership of the Ghost Pad to the bin, so we do not have to worry about\nreleasing it.\nFinally, the sink Pad we obtained from the equalizer needs to be release\nwith gst_object_unref().\nAt this point, we have a functional sink-bin, which we can use as the\naudio sink in playbin. We just need to instruct playbin to use it:\nIt is as simple as setting the audio-sink property on playbin to\nthe newly created sink.\nThe only bit remaining is to configure the equalizer. For this example,\nthe two higher frequency bands are set to the maximum attenuation so the\nbass is boosted. Play a bit with the values to feel the difference (Look\nat the documentation for the equalizer-3bands element for the allowed\nrange of values).\n"});