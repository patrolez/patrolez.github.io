fragment_downloaded_cb({"url":"tutorials/playback/hardware-accelerated-video-decoding.html#introduction","fragment":"Introduction\nVideo decoding can be an extremely CPU-intensive task, especially for\nhigher resolutions like 1080p HDTV. Fortunately, modern graphics cards,\nequipped with programmable GPUs, are able to take care of this job,\nallowing the CPU to concentrate on other duties. Having dedicated\nhardware becomes essential for low-power CPUs which are simply incapable\nof decoding such media fast enough.\nIn the current state of things (June 2016) each GPU manufacturer offers\na different method to access their hardware (a different API), and a\nstrong industry standard has not emerged yet.\nAs of June 2016, there exist at least 8 different video decoding\nacceleration APIs:\nVAAPI (Video\nAcceleration API): Initially designed by\nIntel in 2007, targeted at the X\nWindow System on Unix-based operating systems, now open-source. It now also\nsupports Wayland through dmabuf. It is\ncurrently not limited to Intel GPUs as other manufacturers are free to\nuse this API, for example, Imagination\nTechnologies or\nS3 Graphics. Accessible to\nGStreamer through the gstreamer-vaapi package.\nOVD\n(Open Video Decode): Another API from AMD\nGraphics, designed to be a\nplatform agnostic method for softrware developers to leverage the\nUniversal Video\nDecode (UVD)\nhardware inside AMD Radeon graphics cards. Currently unavailable to\nGStreamer .\nDCE\n(Distributed Codec Engine): An open source software library (\"libdce\")\nand API specification by Texas\nInstruments, targeted\nat Linux systems and ARM platforms. Accessible to GStreamer through\nthe gstreamer-ducati plugin.\nAndroid\nMediaCodec: This is Android's API to access the device's\nhardware decoder and encoder if available. This is accessible through the\nandroidmedia plugin in gst-plugins-bad. This includes both encoding and\ndecoding.\nApple VideoTool Box Framework: Apple's API to access hardware is available\nthrough the applemedia plugin which includes both encoding through\nthe vtenc element and decoding through the vtdec element.\nVideo4Linux: Recent Linux kernels have a kernel API to expose\nhardware codecs in a standard way, this is now supported by the\nv4l2 plugin in gst-plugins-good. This can support both decoding\nand encoding depending on the platform.\n\n\nVAAPI (Video\nAcceleration API): Initially designed by\nIntel in 2007, targeted at the X\nWindow System on Unix-based operating systems, now open-source. It now also\nsupports Wayland through dmabuf. It is\ncurrently not limited to Intel GPUs as other manufacturers are free to\nuse this API, for example, Imagination\nTechnologies or\nS3 Graphics. Accessible to\nGStreamer through the gstreamer-vaapi package.\n\n\nOVD\n(Open Video Decode): Another API from AMD\nGraphics, designed to be a\nplatform agnostic method for softrware developers to leverage the\nUniversal Video\nDecode (UVD)\nhardware inside AMD Radeon graphics cards. Currently unavailable to\nGStreamer .\n\n\nDCE\n(Distributed Codec Engine): An open source software library (\"libdce\")\nand API specification by Texas\nInstruments, targeted\nat Linux systems and ARM platforms. Accessible to GStreamer through\nthe gstreamer-ducati plugin.\n\n\nAndroid\nMediaCodec: This is Android's API to access the device's\nhardware decoder and encoder if available. This is accessible through the\nandroidmedia plugin in gst-plugins-bad. This includes both encoding and\ndecoding.\n\n\nApple VideoTool Box Framework: Apple's API to access hardware is available\nthrough the applemedia plugin which includes both encoding through\nthe vtenc element and decoding through the vtdec element.\n\n\nVideo4Linux: Recent Linux kernels have a kernel API to expose\nhardware codecs in a standard way, this is now supported by the\nv4l2 plugin in gst-plugins-good. This can support both decoding\nand encoding depending on the platform.\n\n\n"});