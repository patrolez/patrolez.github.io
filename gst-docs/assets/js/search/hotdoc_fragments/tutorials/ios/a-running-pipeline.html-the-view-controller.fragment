fragment_downloaded_cb({"url":"tutorials/ios/a-running-pipeline.html#the-view-controller","fragment":"The View Controller\nThe ViewController class manages the UI, instantiates\nthe GStreamerBackend and also performs some UI-related tasks on its\nbehalf:\nViewController.m\nAn instance of the GStreamerBackend in stored inside the class:\nThis instance is created in the viewDidLoad function through a custom\ninit: method in the GStreamerBackend:\nThis custom method is required to pass the object that has to be used as\nthe UI delegate (in this case, ourselves, the ViewController).\nThe Play and Pause buttons are also disabled in the\nviewDidLoad function, and they are not re-enabled until the\nGStreamerBackend reports that it is initialized and ready.\nThese two methods are called when the user presses the Play or Pause\nbuttons, and simply forward the call to the appropriate method in the\nGStreamerBackend.\nThe gstreamerInitialized method is defined in the\nGStreamerBackendDelegate protocol and indicates that the backend is\nready to accept commands. In this case, the Play and Pause buttons are\nre-enabled and the Label text is set to “Ready”. This method is called\nfrom a Dispatch Queue other than the Main one; therefore the need for\nthe\ndispatch_async() call\nwrapping all UI code.\nThe gstreamerSetUIMessage: method also belongs to the\nGStreamerBackendDelegate protocol. It is called when the backend wants\nto report some message to the user. In this case, the message is copied\nonto the Label in the UI, again, from within a\ndispatch_async() call.\n"});