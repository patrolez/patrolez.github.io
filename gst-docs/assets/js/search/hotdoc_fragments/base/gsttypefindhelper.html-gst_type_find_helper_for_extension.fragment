fragment_downloaded_cb({"url":"base/gsttypefindhelper.html#gst_type_find_helper_for_extension","fragment":"\n\tgst_type_find_helper_for_extension\n\n\n\tGstBase.prototype.type_find_helper_for_extension\n\n\n\tGstBase.type_find_helper_for_extension\n\nTries to find the best GstCaps associated with extension.\nAll available typefinders will be checked against the extension in order\nof rank. The caps of the first typefinder that can handle extension will be\nreturned.\nFree-function: gst_caps_unref\nParameters:\nobject doing the typefinding, or NULL (used for logging)\nan extension\nthe GstCaps corresponding to\nextension, or NULL if no type could be found. The caller should free\nthe caps returned with gst_caps_unref.\nTries to find the best Gst.Caps associated with extension.\nAll available typefinders will be checked against the extension in order\nof rank. The caps of the first typefinder that can handle extension will be\nreturned.\nFree-function: gst_caps_unref\nParameters:\nobject doing the typefinding, or null (used for logging)\nan extension\nthe Gst.Caps corresponding to\nextension, or null if no type could be found. The caller should free\nthe caps returned with gst_caps_unref (not introspectable).\nTries to find the best Gst.Caps associated with extension.\nAll available typefinders will be checked against the extension in order\nof rank. The caps of the first typefinder that can handle extension will be\nreturned.\nFree-function: gst_caps_unref\nParameters:\nobject doing the typefinding, or None (used for logging)\nan extension\nthe Gst.Caps corresponding to\nextension, or None if no type could be found. The caller should free\nthe caps returned with gst_caps_unref (not introspectable).\n"});