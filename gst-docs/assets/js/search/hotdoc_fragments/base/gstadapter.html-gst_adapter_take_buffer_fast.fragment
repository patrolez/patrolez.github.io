fragment_downloaded_cb({"url":"base/gstadapter.html#gst_adapter_take_buffer_fast","fragment":"\n\tgst_adapter_take_buffer_fast\n\n\n\tGstBase.Adapter.prototype.take_buffer_fast\n\n\n\tGstBase.Adapter.take_buffer_fast\n\nReturns a GstBuffer containing the first nbytes of the adapter.\nThe returned bytes will be flushed from the adapter.  This function\nis potentially more performant than gst_adapter_take_buffer since\nit can reuse the memory in pushed buffers by subbuffering or\nmerging. Unlike gst_adapter_take_buffer, the returned buffer may\nbe composed of multiple non-contiguous GstMemory objects, no\ncopies are made.\nNote that no assumptions should be made as to whether certain buffer\nflags such as the DISCONT flag are set on the returned buffer, or not.\nThe caller needs to explicitly set or unset flags that should be set or\nunset.\nThis will also copy over all GstMeta of the input buffers except\nfor meta with the GST_META_FLAG_POOLED flag or with the \"memory\" tag.\nThis function can return buffer up to the return value of\ngst_adapter_available without making copies if possible.\nCaller owns a reference to the returned buffer. gst_buffer_unref after\nusage.\nFree-function: gst_buffer_unref\nParameters:\na GstAdapter\nthe number of bytes to take\na GstBuffer containing the first\nnbytes of the adapter, or NULL if nbytes bytes are not available.\ngst_buffer_unref when no longer needed.\n\n\tSince\t\t\t: 1.2\n\t\t\nReturns a Gst.Buffer containing the first nbytes of the adapter.\nThe returned bytes will be flushed from the adapter.  This function\nis potentially more performant than GstBase.Adapter.prototype.take_buffer since\nit can reuse the memory in pushed buffers by subbuffering or\nmerging. Unlike GstBase.Adapter.prototype.take_buffer, the returned buffer may\nbe composed of multiple non-contiguous Gst.Memory objects, no\ncopies are made.\nNote that no assumptions should be made as to whether certain buffer\nflags such as the DISCONT flag are set on the returned buffer, or not.\nThe caller needs to explicitly set or unset flags that should be set or\nunset.\nThis will also copy over all GstMeta of the input buffers except\nfor meta with the Gst.MetaFlags.POOLED flag or with the \"memory\" tag.\nThis function can return buffer up to the return value of\nGstBase.Adapter.prototype.available without making copies if possible.\nCaller owns a reference to the returned buffer. gst_buffer_unref (not introspectable) after\nusage.\nFree-function: gst_buffer_unref\nParameters:\na GstBase.Adapter\nthe number of bytes to take\na Gst.Buffer containing the first\nnbytes of the adapter, or null if nbytes bytes are not available.\ngst_buffer_unref (not introspectable) when no longer needed.\n\n\tSince\t\t\t: 1.2\n\t\t\nReturns a Gst.Buffer containing the first nbytes of the adapter.\nThe returned bytes will be flushed from the adapter.  This function\nis potentially more performant than GstBase.Adapter.take_buffer since\nit can reuse the memory in pushed buffers by subbuffering or\nmerging. Unlike GstBase.Adapter.take_buffer, the returned buffer may\nbe composed of multiple non-contiguous Gst.Memory objects, no\ncopies are made.\nNote that no assumptions should be made as to whether certain buffer\nflags such as the DISCONT flag are set on the returned buffer, or not.\nThe caller needs to explicitly set or unset flags that should be set or\nunset.\nThis will also copy over all GstMeta of the input buffers except\nfor meta with the Gst.MetaFlags.POOLED flag or with the \"memory\" tag.\nThis function can return buffer up to the return value of\nGstBase.Adapter.available without making copies if possible.\nCaller owns a reference to the returned buffer. gst_buffer_unref (not introspectable) after\nusage.\nFree-function: gst_buffer_unref\nParameters:\na GstBase.Adapter\nthe number of bytes to take\na Gst.Buffer containing the first\nnbytes of the adapter, or None if nbytes bytes are not available.\ngst_buffer_unref (not introspectable) when no longer needed.\n\n\tSince\t\t\t: 1.2\n\t\t\n"});