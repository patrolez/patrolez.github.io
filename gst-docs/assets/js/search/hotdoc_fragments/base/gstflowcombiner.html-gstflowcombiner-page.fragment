fragment_downloaded_cb({"url":"base/gstflowcombiner.html#gstflowcombiner-page","fragment":"GstFlowCombiner\nUtility struct to help handling GstFlowReturn combination. Useful for\nGstElements that have multiple source pads and need to combine\nthe different GstFlowReturn for those pads.\nGstFlowCombiner works by using the last GstFlowReturn for all GstPad\nit has in its list and computes the combined return value and provides\nit to the caller.\nTo add a new pad to the GstFlowCombiner use gst_flow_combiner_add_pad.\nThe new GstPad is stored with a default value of GST_FLOW_OK.\nIn case you want a GstPad to be removed, use gst_flow_combiner_remove_pad.\nPlease be aware that this struct isn't thread safe as its designed to be\nused by demuxers, those usually will have a single thread operating it.\nThese functions will take refs on the passed GstPads.\nAside from reducing the user's code size, the main advantage of using this\nhelper struct is to follow the standard rules for GstFlowReturn combination.\nThese rules are:\nGST_FLOW_ERROR or below, GST_FLOW_NOT_NEGOTIATED and GST_FLOW_FLUSHING are\nreturned immediately from the gst_flow_combiner_update_flow function.\n\n\nGST_FLOW_EOS: only if all returns are EOS too\n\nGST_FLOW_NOT_LINKED: only if all returns are NOT_LINKED too\n\nGST_FLOW_ERROR or below: if at least one returns an error return\n\nGST_FLOW_NOT_NEGOTIATED: if at least one returns a not-negotiated return\n\nGST_FLOW_FLUSHING: if at least one returns flushing\n\nGST_FLOW_OK: otherwise\n\n"});