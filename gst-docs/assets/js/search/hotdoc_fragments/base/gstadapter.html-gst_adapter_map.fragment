fragment_downloaded_cb({"url":"base/gstadapter.html#gst_adapter_map","fragment":"\n\tgst_adapter_map\n\n\n\tGstBase.Adapter.prototype.map\n\n\n\tGstBase.Adapter.map\n\nGets the first size bytes stored in the adapter. The returned pointer is\nvalid until the next function is called on the adapter.\nNote that setting the returned pointer as the data of a GstBuffer is\nincorrect for general-purpose plugins. The reason is that if a downstream\nelement stores the buffer so that it has access to it outside of the bounds\nof its chain function, the buffer will have an invalid data pointer after\nyour element flushes the bytes. In that case you should use\ngst_adapter_take, which returns a freshly-allocated buffer that you can set\nas GstBuffer memory or the potentially more performant\ngst_adapter_take_buffer.\nReturns NULL if size bytes are not available.\nParameters:\na GstAdapter\nthe number of bytes to map/peek\n(transfer none) (array length=size) (element-type guint8) (nullable):\na pointer to the first size bytes of data, or NULL\nGets the first size bytes stored in the adapter. The returned pointer is\nvalid until the next function is called on the adapter.\nNote that setting the returned pointer as the data of a Gst.Buffer is\nincorrect for general-purpose plugins. The reason is that if a downstream\nelement stores the buffer so that it has access to it outside of the bounds\nof its chain function, the buffer will have an invalid data pointer after\nyour element flushes the bytes. In that case you should use\nGstBase.Adapter.prototype.take, which returns a freshly-allocated buffer that you can set\nas Gst.Buffer memory or the potentially more performant\nGstBase.Adapter.prototype.take_buffer.\nReturns null if size bytes are not available.\nParameters:\na GstBase.Adapter\nReturns a tuple made of:\n(transfer none) (array length=size) (element-type guint8) (nullable):\na pointer to the first size bytes of data, or null\n(transfer none) (array length=size) (element-type guint8) (nullable):\na pointer to the first size bytes of data, or null\nGets the first size bytes stored in the adapter. The returned pointer is\nvalid until the next function is called on the adapter.\nNote that setting the returned pointer as the data of a Gst.Buffer is\nincorrect for general-purpose plugins. The reason is that if a downstream\nelement stores the buffer so that it has access to it outside of the bounds\nof its chain function, the buffer will have an invalid data pointer after\nyour element flushes the bytes. In that case you should use\nGstBase.Adapter.take, which returns a freshly-allocated buffer that you can set\nas Gst.Buffer memory or the potentially more performant\nGstBase.Adapter.take_buffer.\nReturns None if size bytes are not available.\nParameters:\na GstBase.Adapter\nReturns a tuple made of:\n(transfer none) (array length=size) (element-type guint8) (nullable):\na pointer to the first size bytes of data, or None\n(transfer none) (array length=size) (element-type guint8) (nullable):\na pointer to the first size bytes of data, or None\n"});