fragment_downloaded_cb({"url":"base/gstbasesink.html#gst_base_sink_wait_preroll","fragment":"\n\tgst_base_sink_wait_preroll\n\n\n\tGstBase.BaseSink.prototype.wait_preroll\n\n\n\tGstBase.BaseSink.wait_preroll\n\nIf the render method performs its own synchronisation\nagainst the clock it must unblock when going from PLAYING to the PAUSED state\nand call this method before continuing to render the remaining data.\nIf the render method can block on something else than\nthe clock, it must also be ready to unblock immediately on\nthe unlock method and cause the\nrender method to immediately call this function.\nIn this case, the subclass must be prepared to continue rendering where it\nleft off if this function returns GST_FLOW_OK.\nThis function will block until a state change to PLAYING happens (in which\ncase this function returns GST_FLOW_OK) or the processing must be stopped due\nto a state change to READY or a FLUSH event (in which case this function\nreturns GST_FLOW_FLUSHING).\nThis function should only be called with the PREROLL_LOCK held, like in the\nrender function.\nParameters:\nthe sink\nGST_FLOW_OK if the preroll completed and processing can\ncontinue. Any other return value should be returned from the render vmethod.\nIf the vfunc_render method performs its own synchronisation\nagainst the clock it must unblock when going from PLAYING to the PAUSED state\nand call this method before continuing to render the remaining data.\nIf the vfunc_render method can block on something else than\nthe clock, it must also be ready to unblock immediately on\nthe vfunc_unlock method and cause the\nvfunc_render method to immediately call this function.\nIn this case, the subclass must be prepared to continue rendering where it\nleft off if this function returns Gst.FlowReturn.OK.\nThis function will block until a state change to PLAYING happens (in which\ncase this function returns Gst.FlowReturn.OK) or the processing must be stopped due\nto a state change to READY or a FLUSH event (in which case this function\nreturns Gst.FlowReturn.FLUSHING).\nThis function should only be called with the PREROLL_LOCK held, like in the\nrender function.\nParameters:\nthe sink\nGst.FlowReturn.OK if the preroll completed and processing can\ncontinue. Any other return value should be returned from the render vmethod.\nIf the do_render method performs its own synchronisation\nagainst the clock it must unblock when going from PLAYING to the PAUSED state\nand call this method before continuing to render the remaining data.\nIf the do_render method can block on something else than\nthe clock, it must also be ready to unblock immediately on\nthe do_unlock method and cause the\ndo_render method to immediately call this function.\nIn this case, the subclass must be prepared to continue rendering where it\nleft off if this function returns Gst.FlowReturn.OK.\nThis function will block until a state change to PLAYING happens (in which\ncase this function returns Gst.FlowReturn.OK) or the processing must be stopped due\nto a state change to READY or a FLUSH event (in which case this function\nreturns Gst.FlowReturn.FLUSHING).\nThis function should only be called with the PREROLL_LOCK held, like in the\nrender function.\nParameters:\nthe sink\nGst.FlowReturn.OK if the preroll completed and processing can\ncontinue. Any other return value should be returned from the render vmethod.\n"});