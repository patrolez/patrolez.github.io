fragment_downloaded_cb({"url":"base/gstbytereader.html#gst_byte_reader_skip_string_utf8","fragment":"\n\tgst_byte_reader_skip_string_utf8\n\n\n\tGstBase.ByteReader.prototype.skip_string_utf8\n\n\n\tGstBase.ByteReader.skip_string_utf8\n\nSkips a NUL-terminated string in the GstByteReader instance, advancing\nthe current position to the byte after the string. This will work for\nany NUL-terminated string with a character width of 8 bits, so ASCII,\nUTF-8, ISO-8859-N etc. No input checking for valid UTF-8 is done.\nThis function will fail if no NUL-terminator was found in in the data.\nParameters:\na GstByteReader instance\nTRUE if a string could be skipped, FALSE otherwise.\nSkips a NUL-terminated string in the GstBase.ByteReader instance, advancing\nthe current position to the byte after the string. This will work for\nany NUL-terminated string with a character width of 8 bits, so ASCII,\nUTF-8, ISO-8859-N etc. No input checking for valid UTF-8 is done.\nThis function will fail if no NUL-terminator was found in in the data.\nParameters:\na GstBase.ByteReader instance\ntrue if a string could be skipped, false otherwise.\nSkips a NUL-terminated string in the GstBase.ByteReader instance, advancing\nthe current position to the byte after the string. This will work for\nany NUL-terminated string with a character width of 8 bits, so ASCII,\nUTF-8, ISO-8859-N etc. No input checking for valid UTF-8 is done.\nThis function will fail if no NUL-terminator was found in in the data.\nParameters:\na GstBase.ByteReader instance\nTrue if a string could be skipped, False otherwise.\n"});