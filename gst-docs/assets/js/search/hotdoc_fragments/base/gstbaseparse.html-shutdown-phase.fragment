fragment_downloaded_cb({"url":"base/gstbaseparse.html#shutdown-phase","fragment":"Shutdown phase\nSubclass is responsible for providing pad template caps for source and\nsink pads. The pads need to be named \"sink\" and \"src\". It also needs to\nset the fixed caps on srcpad, when the format is ensured (e.g.  when\nbase class calls subclass' set_sink_caps function).\nThis base class uses GST_FORMAT_DEFAULT as a meaning of frames. So,\nsubclass conversion routine needs to know that conversion from\nGST_FORMAT_TIME to GST_FORMAT_DEFAULT must return the\nframe number that can be found from the given byte position.\nGstBaseParse uses subclasses conversion methods also for seeking (or\notherwise uses its own default one, see also below).\nSubclass start and stop functions will be called to inform the beginning\nand end of data processing.\nThings that subclass need to take care of:\nProvide pad templates\nFixate the source pad caps when appropriate\nInform base class how big data chunks should be retrieved. This is\ndone with gst_base_parse_set_min_frame_size function.\nExamine data chunks passed to subclass with\nhandle_frame and pass proper frame(s) to\ngst_base_parse_finish_frame, and setting src pad caps and timestamps\non frame.\nProvide conversion functions\nUpdate the duration information with gst_base_parse_set_duration\nOptionally passthrough using gst_base_parse_set_passthrough\nConfigure various baseparse parameters using\ngst_base_parse_set_average_bitrate, gst_base_parse_set_syncable\nand gst_base_parse_set_frame_rate.\nIn particular, if subclass is unable to determine a duration, but\nparsing (or specs) yields a frames per seconds rate, then this can be\nprovided to GstBaseParse to enable it to cater for buffer time\nmetadata (which will be taken from upstream as much as\npossible). Internally keeping track of frame durations and respective\nsizes that have been pushed provides GstBaseParse with an estimated\nbitrate. A default convert (used if not\noverridden) will then use these rates to perform obvious conversions.\nThese rates are also used to update (estimated) duration at regular\nframe intervals.\n\n\nGstBaseParse class calls stop to inform the\nsubclass that data parsing will be stopped.\n\n\n\nProvide pad templates\n\n\nFixate the source pad caps when appropriate\n\n\nInform base class how big data chunks should be retrieved. This is\ndone with gst_base_parse_set_min_frame_size function.\n\n\nExamine data chunks passed to subclass with\nhandle_frame and pass proper frame(s) to\ngst_base_parse_finish_frame, and setting src pad caps and timestamps\non frame.\n\n\nProvide conversion functions\n\n\nUpdate the duration information with gst_base_parse_set_duration\n\n\nOptionally passthrough using gst_base_parse_set_passthrough\n\n\nConfigure various baseparse parameters using\ngst_base_parse_set_average_bitrate, gst_base_parse_set_syncable\nand gst_base_parse_set_frame_rate.\n\n\nIn particular, if subclass is unable to determine a duration, but\nparsing (or specs) yields a frames per seconds rate, then this can be\nprovided to GstBaseParse to enable it to cater for buffer time\nmetadata (which will be taken from upstream as much as\npossible). Internally keeping track of frame durations and respective\nsizes that have been pushed provides GstBaseParse with an estimated\nbitrate. A default convert (used if not\noverridden) will then use these rates to perform obvious conversions.\nThese rates are also used to update (estimated) duration at regular\nframe intervals.\n\n\n"});