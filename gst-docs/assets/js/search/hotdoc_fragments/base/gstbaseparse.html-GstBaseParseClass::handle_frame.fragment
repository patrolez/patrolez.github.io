fragment_downloaded_cb({"url":"base/gstbaseparse.html#GstBaseParseClass::handle_frame","fragment":"\n\thandle_frame\n\n\n\tvfunc_handle_frame\n\n\n\tdo_handle_frame\n\nParses the input data into valid frames as defined by subclass\nwhich should be passed to gst_base_parse_finish_frame.\nThe frame's input buffer is guaranteed writable,\nwhereas the input frame ownership is held by caller\n(so subclass should make a copy if it needs to hang on).\nInput buffer (data) is provided by baseclass with as much\nmetadata set as possible by baseclass according to upstream\ninformation and/or subclass settings,\nthough subclass may still set buffer timestamp and duration\nif desired.\nParameters:\nParses the input data into valid frames as defined by subclass\nwhich should be passed to GstBase.BaseParse.prototype.finish_frame.\nThe frame's input buffer is guaranteed writable,\nwhereas the input frame ownership is held by caller\n(so subclass should make a copy if it needs to hang on).\nInput buffer (data) is provided by baseclass with as much\nmetadata set as possible by baseclass according to upstream\ninformation and/or subclass settings,\nthough subclass may still set buffer timestamp and duration\nif desired.\nParameters:\nReturns a tuple made of:\nParses the input data into valid frames as defined by subclass\nwhich should be passed to GstBase.BaseParse.finish_frame.\nThe frame's input buffer is guaranteed writable,\nwhereas the input frame ownership is held by caller\n(so subclass should make a copy if it needs to hang on).\nInput buffer (data) is provided by baseclass with as much\nmetadata set as possible by baseclass according to upstream\ninformation and/or subclass settings,\nthough subclass may still set buffer timestamp and duration\nif desired.\nParameters:\nReturns a tuple made of:\n"});