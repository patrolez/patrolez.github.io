fragment_downloaded_cb({"url":"base/gstaggregator.html#gst_aggregator_simple_get_next_time","fragment":"\n\tgst_aggregator_simple_get_next_time\n\n\n\tGstBase.Aggregator.prototype.simple_get_next_time\n\n\n\tGstBase.Aggregator.simple_get_next_time\n\nThis is a simple get_next_time implementation that\njust looks at the GstSegment on the srcpad of the aggregator and bases\nthe next time on the running time there.\nThis is the desired behaviour in most cases where you have a live source\nand you have a dead line based aggregator subclass.\nParameters:\nA GstAggregator\nThe running time based on the position\n\n\tSince\t\t\t: 1.16\n\t\t\nThis is a simple vfunc_get_next_time implementation that\njust looks at the Gst.Segment on the srcpad of the aggregator and bases\nthe next time on the running time there.\nThis is the desired behaviour in most cases where you have a live source\nand you have a dead line based aggregator subclass.\nParameters:\nA GstBase.Aggregator\nThe running time based on the position\n\n\tSince\t\t\t: 1.16\n\t\t\nThis is a simple do_get_next_time implementation that\njust looks at the Gst.Segment on the srcpad of the aggregator and bases\nthe next time on the running time there.\nThis is the desired behaviour in most cases where you have a live source\nand you have a dead line based aggregator subclass.\nParameters:\nA GstBase.Aggregator\nThe running time based on the position\n\n\tSince\t\t\t: 1.16\n\t\t\n"});