fragment_downloaded_cb({"url":"base/gstbasesink.html#gstbasesink-page","fragment":"GstBaseSink\nGstBaseSink is the base class for sink elements in GStreamer, such as\nxvimagesink or filesink. It is a layer on top of GstElement that provides a\nsimplified interface to plugin writers. GstBaseSink handles many details\nfor you, for example: preroll, clock synchronization, state changes,\nactivation in push or pull mode, and queries.\nIn most cases, when writing sink elements, there is no need to implement\nclass methods from GstElement or to set functions on pads, because the\nGstBaseSink infrastructure should be sufficient.\nGstBaseSink provides support for exactly one sink pad, which should be\nnamed \"sink\". A sink implementation (subclass of GstBaseSink) should\ninstall a pad template in its class_init function, like so:\nGstBaseSink will handle the prerolling correctly. This means that it will\nreturn GST_STATE_CHANGE_ASYNC from a state change to PAUSED until the first\nbuffer arrives in this element. The base class will call the\npreroll vmethod with this preroll buffer and will then\ncommit the state change to the next asynchronously pending state.\nWhen the element is set to PLAYING, GstBaseSink will synchronise on the\nclock using the times returned from get_times. If this\nfunction returns GST_CLOCK_TIME_NONE for the start time, no synchronisation\nwill be done. Synchronisation can be disabled entirely by setting the object\nsync property to FALSE.\nAfter synchronisation the virtual method render will be\ncalled. Subclasses should minimally implement this method.\nSubclasses that synchronise on the clock in the render\nmethod are supported as well. These classes typically receive a buffer in\nthe render method and can then potentially block on the clock while\nrendering. A typical example is an audiosink.\nThese subclasses can use gst_base_sink_wait_preroll to perform the\nblocking wait.\nUpon receiving the EOS event in the PLAYING state, GstBaseSink will wait\nfor the clock to reach the time indicated by the stop time of the last\nget_times call before posting an EOS message. When the\nelement receives EOS in PAUSED, preroll completes, the event is queued and an\nEOS message is posted when going to PLAYING.\nGstBaseSink will internally use the GST_EVENT_SEGMENT events to schedule\nsynchronisation and clipping of buffers. Buffers that fall completely outside\nof the current segment are dropped. Buffers that fall partially in the\nsegment are rendered (and prerolled). Subclasses should do any subbuffer\nclipping themselves when needed.\nGstBaseSink will by default report the current playback position in\nGST_FORMAT_TIME based on the current clock time and segment information.\nIf no clock has been set on the element, the query will be forwarded\nupstream.\nThe set_caps function will be called when the subclass\nshould configure itself to process a specific media type.\nThe start and stop virtual methods\nwill be called when resources should be allocated. Any\npreroll, render and\nset_caps function will be called between the\nstart and stop calls.\nThe event virtual method will be called when an event is\nreceived by GstBaseSink. Normally this method should only be overridden by\nvery specific elements (such as file sinks) which need to handle the\nnewsegment event specially.\nThe unlock method is called when the elements should\nunblock any blocking operations they perform in the\nrender method. This is mostly useful when the\nrender method performs a blocking write on a file\ndescriptor, for example.\nThe max-lateness property affects how the sink deals with\nbuffers that arrive too late in the sink. A buffer arrives too late in the\nsink when the presentation time (as a combination of the last segment, buffer\ntimestamp and element base_time) plus the duration is before the current\ntime of the clock.\nIf the frame is later than max-lateness, the sink will drop the buffer\nwithout calling the render method.\nThis feature is disabled if sync is disabled, the\nget_times method does not return a valid start time or\nmax-lateness is set to -1 (the default).\nSubclasses can use gst_base_sink_set_max_lateness to configure the\nmax-lateness value.\nThe qos property will enable the quality-of-service features of\nthe basesink which gather statistics about the real-time performance of the\nclock synchronisation. For each buffer received in the sink, statistics are\ngathered and a QOS event is sent upstream with these numbers. This\ninformation can then be used by upstream elements to reduce their processing\nrate, for example.\nThe async property can be used to instruct the sink to never\nperform an ASYNC state change. This feature is mostly usable when dealing\nwith non-synchronized streams or sparse streams.\n"});