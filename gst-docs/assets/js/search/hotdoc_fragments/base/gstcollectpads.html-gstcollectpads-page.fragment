fragment_downloaded_cb({"url":"base/gstcollectpads.html#gstcollectpads-page","fragment":"GstCollectPads\nManages a set of pads that operate in collect mode. This means that control\nis given to the manager of this object when all pads have data.\nCollectpads are created with gst_collect_pads_new. A callback should then\nbe installed with gst_collect_pads_set_function ().\nPads are added to the collection with gst_collect_pads_add_pad/\ngst_collect_pads_remove_pad. The pad has to be a sinkpad. When added,\nthe chain, event and query functions of the pad are overridden. The\nelement_private of the pad is used to store private information for the\ncollectpads.\nFor each pad, data is queued in the _chain function or by\nperforming a pull_range.\nWhen data is queued on all pads in waiting mode, the callback function is called.\nData can be dequeued from the pad with the gst_collect_pads_pop method.\nOne can peek at the data with the gst_collect_pads_peek function.\nThese functions will return NULL if the pad received an EOS event. When all\npads return NULL from a gst_collect_pads_peek, the element can emit an EOS\nevent itself.\nData can also be dequeued in byte units using the gst_collect_pads_available,\ngst_collect_pads_read_buffer and gst_collect_pads_flush calls.\nElements should call gst_collect_pads_start and gst_collect_pads_stop in\ntheir state change functions to start and stop the processing of the collectpads.\nThe gst_collect_pads_stop call should be called before calling the parent\nelement state change function in the PAUSED_TO_READY state change to ensure\nno pad is blocked and the element can finish streaming.\ngst_collect_pads_set_waiting sets a pad to waiting or non-waiting mode.\nCollectPads element is not waiting for data to be collected on non-waiting pads.\nThus these pads may but need not have data when the callback is called.\nAll pads are in waiting mode by default.\n\n\nCollectpads are created with gst_collect_pads_new. A callback should then\nbe installed with gst_collect_pads_set_function ().\n\n\nPads are added to the collection with gst_collect_pads_add_pad/\ngst_collect_pads_remove_pad. The pad has to be a sinkpad. When added,\nthe chain, event and query functions of the pad are overridden. The\nelement_private of the pad is used to store private information for the\ncollectpads.\n\n\nFor each pad, data is queued in the _chain function or by\nperforming a pull_range.\n\n\nWhen data is queued on all pads in waiting mode, the callback function is called.\n\n\nData can be dequeued from the pad with the gst_collect_pads_pop method.\nOne can peek at the data with the gst_collect_pads_peek function.\nThese functions will return NULL if the pad received an EOS event. When all\npads return NULL from a gst_collect_pads_peek, the element can emit an EOS\nevent itself.\n\n\nData can also be dequeued in byte units using the gst_collect_pads_available,\ngst_collect_pads_read_buffer and gst_collect_pads_flush calls.\n\n\nElements should call gst_collect_pads_start and gst_collect_pads_stop in\ntheir state change functions to start and stop the processing of the collectpads.\nThe gst_collect_pads_stop call should be called before calling the parent\nelement state change function in the PAUSED_TO_READY state change to ensure\nno pad is blocked and the element can finish streaming.\n\n\ngst_collect_pads_set_waiting sets a pad to waiting or non-waiting mode.\nCollectPads element is not waiting for data to be collected on non-waiting pads.\nThus these pads may but need not have data when the callback is called.\nAll pads are in waiting mode by default.\n\n\n"});