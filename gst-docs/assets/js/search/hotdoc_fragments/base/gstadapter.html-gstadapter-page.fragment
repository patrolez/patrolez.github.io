fragment_downloaded_cb({"url":"base/gstadapter.html#gstadapter-page","fragment":"GstAdapter\nThis class is for elements that receive buffers in an undesired size.\nWhile for example raw video contains one image per buffer, the same is not\ntrue for a lot of other formats, especially those that come directly from\na file. So if you have undefined buffer sizes and require a specific size,\nthis object is for you.\nAn adapter is created with gst_adapter_new. It can be freed again with\ng_object_unref.\nThe theory of operation is like this: All buffers received are put\ninto the adapter using gst_adapter_push and the data is then read back\nin chunks of the desired size using gst_adapter_map/gst_adapter_unmap\nand/or gst_adapter_copy. After the data has been processed, it is freed\nusing gst_adapter_unmap.\nOther methods such as gst_adapter_take and gst_adapter_take_buffer\ncombine gst_adapter_map and gst_adapter_unmap in one method and are\npotentially more convenient for some use cases.\nFor example, a sink pad's chain function that needs to pass data to a library\nin 512-byte chunks could be implemented like this:\nFor another example, a simple element inside GStreamer that uses GstAdapter\nis the libvisual element.\nAn element using GstAdapter in its sink pad chain function should ensure that\nwhen the FLUSH_STOP event is received, that any queued data is cleared using\ngst_adapter_clear. Data should also be cleared or processed on EOS and\nwhen changing state from GST_STATE_PAUSED to GST_STATE_READY.\nAlso check the GST_BUFFER_FLAG_DISCONT flag on the buffer. Some elements might\nneed to clear the adapter after a discontinuity.\nThe adapter will keep track of the timestamps of the buffers\nthat were pushed. The last seen timestamp before the current position\ncan be queried with gst_adapter_prev_pts. This function can\noptionally return the number of bytes between the start of the buffer that\ncarried the timestamp and the current adapter position. The distance is\nuseful when dealing with, for example, raw audio samples because it allows\nyou to calculate the timestamp of the current adapter position by using the\nlast seen timestamp and the amount of bytes since.  Additionally, the\ngst_adapter_prev_pts_at_offset can be used to determine the last\nseen timestamp at a particular offset in the adapter.\nThe adapter will also keep track of the offset of the buffers\n(#GST_BUFFER_OFFSET) that were pushed. The last seen offset before the\ncurrent position can be queried with gst_adapter_prev_offset. This function\ncan optionally return the number of bytes between the start of the buffer\nthat carried the offset and the current adapter position.\nAdditionally the adapter also keeps track of the PTS, DTS and buffer offset\nat the last discontinuity, which can be retrieved with\ngst_adapter_pts_at_discont, gst_adapter_dts_at_discont and\ngst_adapter_offset_at_discont. The number of bytes that were consumed\nsince then can be queried with gst_adapter_distance_from_discont.\nA last thing to note is that while GstAdapter is pretty optimized,\nmerging buffers still might be an operation that requires a malloc() and\nmemcpy() operation, and these operations are not the fastest. Because of\nthis, some functions like gst_adapter_available_fast are provided to help\nspeed up such cases should you want to. To avoid repeated memory allocations,\ngst_adapter_copy can be used to copy data into a (statically allocated)\nuser provided buffer.\nGstAdapter is not MT safe. All operations on an adapter must be serialized by\nthe caller. This is not normally a problem, however, as the normal use case\nof GstAdapter is inside one pad's chain function, in which case access is\nserialized via the pad's STREAM_LOCK.\nNote that gst_adapter_push takes ownership of the buffer passed. Use\ngst_buffer_ref before pushing it into the adapter if you still want to\naccess the buffer later. The adapter will never modify the data in the\nbuffer pushed in it.\n"});