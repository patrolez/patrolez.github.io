fragment_downloaded_cb({"url":"base/gstbasesink.html#gst_base_sink_wait","fragment":"\n\tgst_base_sink_wait\n\n\n\tGstBase.BaseSink.prototype.wait\n\n\n\tGstBase.BaseSink.wait\n\nThis function will wait for preroll to complete and will then block until time\nis reached. It is usually called by subclasses that use their own internal\nsynchronisation but want to let some synchronization (like EOS) be handled\nby the base class.\nThis function should only be called with the PREROLL_LOCK held (like when\nreceiving an EOS event in the ::event vmethod or when handling buffers in\n::render).\nThe time argument should be the running_time of when the timeout should happen\nand will be adjusted with any latency and offset configured in the sink.\nParameters:\nthe sink\nthe running_time to be reached\nthe jitter to be filled with time diff, or NULL\nGstFlowReturn\nThis function will wait for preroll to complete and will then block until time\nis reached. It is usually called by subclasses that use their own internal\nsynchronisation but want to let some synchronization (like EOS) be handled\nby the base class.\nThis function should only be called with the PREROLL_LOCK held (like when\nreceiving an EOS event in the ::event vmethod or when handling buffers in\n::render).\nThe time argument should be the running_time of when the timeout should happen\nand will be adjusted with any latency and offset configured in the sink.\nParameters:\nthe sink\nthe running_time to be reached\nReturns a tuple made of:\nGst.FlowReturn\nGst.FlowReturn\nThis function will wait for preroll to complete and will then block until time\nis reached. It is usually called by subclasses that use their own internal\nsynchronisation but want to let some synchronization (like EOS) be handled\nby the base class.\nThis function should only be called with the PREROLL_LOCK held (like when\nreceiving an EOS event in the ::event vmethod or when handling buffers in\n::render).\nThe time argument should be the running_time of when the timeout should happen\nand will be adjusted with any latency and offset configured in the sink.\nParameters:\nthe sink\nthe running_time to be reached\nReturns a tuple made of:\nGst.FlowReturn\nGst.FlowReturn\n"});