fragment_downloaded_cb({"url":"base/gstbasesink.html#gst_base_sink_do_preroll","fragment":"\n\tgst_base_sink_do_preroll\n\n\n\tGstBase.BaseSink.prototype.do_preroll\n\n\n\tGstBase.BaseSink.do_preroll\n\nIf the sink spawns its own thread for pulling buffers from upstream it\nshould call this method after it has pulled a buffer. If the element needed\nto preroll, this function will perform the preroll and will then block\nuntil the element state is changed.\nThis function should be called with the PREROLL_LOCK held.\nParameters:\nthe sink\nthe mini object that caused the preroll\nGST_FLOW_OK if the preroll completed and processing can\ncontinue. Any other return value should be returned from the render vmethod.\nIf the sink spawns its own thread for pulling buffers from upstream it\nshould call this method after it has pulled a buffer. If the element needed\nto preroll, this function will perform the preroll and will then block\nuntil the element state is changed.\nThis function should be called with the PREROLL_LOCK held.\nParameters:\nthe sink\nthe mini object that caused the preroll\nGst.FlowReturn.OK if the preroll completed and processing can\ncontinue. Any other return value should be returned from the render vmethod.\nIf the sink spawns its own thread for pulling buffers from upstream it\nshould call this method after it has pulled a buffer. If the element needed\nto preroll, this function will perform the preroll and will then block\nuntil the element state is changed.\nThis function should be called with the PREROLL_LOCK held.\nParameters:\nthe sink\nthe mini object that caused the preroll\nGst.FlowReturn.OK if the preroll completed and processing can\ncontinue. Any other return value should be returned from the render vmethod.\n"});