fragment_downloaded_cb({"url":"base/gstaggregator.html#GstAggregator","fragment":"\n\tGstAggregator\n\nMembers\nClass structure\n\n\tGstAggregatorClass\n\nFields\n\n\tGstBase.AggregatorClass\n\nAttributes\n\n\tGstBase.AggregatorClass\n\nAttributes\n\n\tGstBase.Aggregator\n\nMembers\n\n\tGstBase.Aggregator\n\nMembers\nAggregator base class object structure.\nthe aggregator's source pad\n\n\tSince\t\t\t: 1.14\n\t\t\nThe aggregator base class will handle in a thread-safe way all manners of\nconcurrent flushes, seeks, pad additions and removals, leaving to the\nsubclass the responsibility of clipping buffers, and aggregating buffers in\nthe way the implementor sees fit.\nIt will also take care of event ordering (stream-start, segment, eos).\nBasically, a simple implementation will override aggregate, and call\n_finish_buffer from inside that function.\n\n\tSince\t\t\t: 1.14\n\t\t\nThe aggregator base class will handle in a thread-safe way all manners of\nconcurrent flushes, seeks, pad additions and removals, leaving to the\nsubclass the responsibility of clipping buffers, and aggregating buffers in\nthe way the implementor sees fit.\nIt will also take care of event ordering (stream-start, segment, eos).\nBasically, a simple implementation will override aggregate, and call\n_finish_buffer from inside that function.\n\n\tSince\t\t\t: 1.14\n\t\t\nThe aggregator base class will handle in a thread-safe way all manners of\nconcurrent flushes, seeks, pad additions and removals, leaving to the\nsubclass the responsibility of clipping buffers, and aggregating buffers in\nthe way the implementor sees fit.\nIt will also take care of event ordering (stream-start, segment, eos).\nBasically, a simple implementation will override aggregate, and call\n_finish_buffer from inside that function.\n\n\tSince\t\t\t: 1.14\n\t\t\nAggregator base class object structure.\nthe aggregator's source pad\n\n\tSince\t\t\t: 1.14\n\t\t\nAggregator base class object structure.\nthe aggregator's source pad\n\n\tSince\t\t\t: 1.14\n\t\t\n"});