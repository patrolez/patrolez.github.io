fragment_downloaded_cb({"url":"base/gstbasesrc.html#gstbasesrc-page","fragment":"GstBaseSrc\nThis is a generic base class for source elements. The following\ntypes of sources are supported:\nThe source can be configured to operate in any GstFormat with the\ngst_base_src_set_format method. The currently set format determines\nthe format of the internal GstSegment and any GST_EVENT_SEGMENT\nevents. The default format for GstBaseSrc is GST_FORMAT_BYTES.\nGstBaseSrc always supports push mode scheduling. If the following\nconditions are met, it also supports pull mode scheduling:\nIf all the conditions are met for operating in pull mode, GstBaseSrc is\nautomatically seekable in push mode as well. The following conditions must\nbe met to make the element seekable in push mode when the format is not\nGST_FORMAT_BYTES:\nWhen the element does not meet the requirements to operate in pull mode, the\noffset and length in the create method should be ignored.\nIt is recommended to subclass GstPushSrc instead, in this situation. If the\nelement can operate in pull mode but only with specific offsets and\nlengths, it is allowed to generate an error when the wrong values are passed\nto the create function.\nGstBaseSrc has support for live sources. Live sources are sources that when\npaused discard data, such as audio or video capture devices. A typical live\nsource also produces data at a fixed rate and thus provides a clock to publish\nthis rate.\nUse gst_base_src_set_live to activate the live source mode.\nA live source does not produce data in the PAUSED state. This means that the\ncreate method will not be called in PAUSED but only in\nPLAYING. To signal the pipeline that the element will not produce data, the\nreturn value from the READY to PAUSED state will be\nGST_STATE_CHANGE_NO_PREROLL.\nA typical live source will timestamp the buffers it creates with the\ncurrent running time of the pipeline. This is one reason why a live source\ncan only produce data in the PLAYING state, when the clock is actually\ndistributed and running.\nLive sources that synchronize and block on the clock (an audio source, for\nexample) can use gst_base_src_wait_playing when the\ncreate function was interrupted by a state change to\nPAUSED.\nThe get_times method can be used to implement pseudo-live\nsources. It only makes sense to implement the get_times\nfunction if the source is a live source. The get_times\nfunction should return timestamps starting from 0, as if it were a non-live\nsource. The base class will make sure that the timestamps are transformed\ninto the current running_time. The base source will then wait for the\ncalculated running_time before pushing out the buffer.\nFor live sources, the base class will by default report a latency of 0.\nFor pseudo live sources, the base class will by default measure the difference\nbetween the first buffer timestamp and the start time of get_times and will\nreport this value as the latency.\nSubclasses should override the query function when this behaviour is not\nacceptable.\nThere is only support in GstBaseSrc for exactly one source pad, which\nshould be named \"src\". A source implementation (subclass of GstBaseSrc)\nshould install a pad template in its class_init function, like so:\n\nrandom access sources like files\nseekable sources\nlive sources\n\n\nThe format is set to GST_FORMAT_BYTES (default).\n\nis_seekable returns TRUE.\n\n\n\nis_seekable returns TRUE.\n\nquery can convert all supported seek formats to the\ninternal format as set with gst_base_src_set_format.\n\ndo_seek is implemented, performs the seek and returns\nTRUE.\n\n"});