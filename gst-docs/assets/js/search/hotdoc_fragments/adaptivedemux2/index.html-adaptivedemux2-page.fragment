fragment_downloaded_cb({"url":"adaptivedemux2/index.html#adaptivedemux2-page","fragment":"adaptivedemux2\nWhat is an adaptive demuxer?  Adaptive demuxers are special demuxers in the\nsense that they don't actually demux data received from upstream but download\nthe data themselves.\nAdaptive formats (HLS, DASH, MSS) are composed of a manifest file and a set\nof fragments. The manifest describes the available media and the sequence of\nfragments to use. Each fragment contains a small part of the media (typically\nonly a few seconds). It is possible for the manifest to have the same media\navailable in different configurations (bitrates for example) so that the\nclient can select the one that best suits its scenario (network fluctuation,\nhardware requirements...).\nFurthermore, that manifest can also specify alternative medias (such as audio\nor subtitle tracks in different languages). Only the fragments for the\nrequested selection will be download.\nThese elements can therefore \"adapt\" themselves to the network conditions (as\nopposed to the server doing that adaptation) and user choices, which is why\nthey are called \"adaptive\" demuxers.\nNote: These elements require a \"streams-aware\" container to work\n(i.e. urisourcebin, decodebin3, playbin3, or any bin/pipeline with the\nGST_BIN_FLAG_STREAMS_AWARE flag set).\nSubclasses:\nWhile GstAdaptiveDemux is responsible for the workflow, it knows nothing\nabout the intrinsics of the subclass formats, so the subclasses are\nresponsible for maintaining the manifest data structures and stream\ninformation.\n"});