fragment_downloaded_cb({"url":"gst-editing-services/gestimeline.html#GESTimeline::select-tracks-for-object","fragment":"\n\tselect-tracks-for-object\n\n\n\tselect-tracks-for-object\n\n\n\tselect-tracks-for-object\n\nThis will be emitted whenever the timeline needs to determine which\ntracks a clip's children should be added to. The track element will\nbe added to each of the tracks given in the return. If a track\nelement is selected to go into multiple tracks, it will be copied\ninto the additional tracks, under the same clip. Note that the copy\nwill not keep its properties or state in sync with the original.\nConnect to this signal once if you wish to control which element\nshould be added to which track. Doing so will overwrite the default\nbehaviour, which adds track_element to all tracks whose\ntrack-type includes the track_element's\ntrack-type.\nNote that under the default track selection, if a clip would produce\nmultiple core children of the same GESTrackType, it will choose\none of the core children arbitrarily to place in the corresponding\ntracks, with a warning for the other core children that are not\nplaced in the track. For example, this would happen for a GESUriClip\nthat points to a file that contains multiple audio streams. If you\nwish to choose the stream, you could connect to this signal, and use,\nsay, ges_uri_source_asset_get_stream_info to choose which core\nsource to add.\nWhen a clip is first added to a timeline, its core elements will\nbe created for the current tracks in the timeline if they have not\nalready been created. Then this will be emitted for each of these\ncore children to select which tracks, if any, they should be added\nto. It will then be called for any non-core children in the clip.\nIn addition, if a new track element is ever added to a clip in a\ntimeline (and it is not already part of a track) this will be emitted\nto select which tracks the element should be added to.\nFinally, as a special case, if a track is added to the timeline\nafter it already contains clips, then it will request the creation\nof the clips' core elements of the corresponding type, if they have\nnot already been created, and this signal will be emitted for each of\nthese newly created elements. In addition, this will also be released\nfor all other track elements in the timeline's clips that have not\nyet been assigned a track. However, in this final case, the timeline\nwill only check whether the newly added track appears in the track\nlist. If it does appear, the track element will be added to the newly\nadded track. All other tracks in the returned track list are ignored.\nIn this latter case, track elements that are already part of a track\nwill not be asked if they want to be copied into the new track. If\nyou wish to do this, you can use ges_clip_add_child_to_track.\nNote that the returned GPtrArray should own a new reference to each\nof its contained GESTrack. The timeline will set the GDestroyNotify\nfree function on the GPtrArray to dereference the elements.\nParameters:\nThe clip that track_element is being added to\nThe element being added\nAn array of\nGESTrack-s that track_element should be added to, or NULL to\nnot add the element to any track.\n\n\tFlags:\t\n\t\n\t\t\n\t\t\t\tRun Last\n\t\t\t\n\nThis will be emitted whenever the timeline needs to determine which\ntracks a clip's children should be added to. The track element will\nbe added to each of the tracks given in the return. If a track\nelement is selected to go into multiple tracks, it will be copied\ninto the additional tracks, under the same clip. Note that the copy\nwill not keep its properties or state in sync with the original.\nConnect to this signal once if you wish to control which element\nshould be added to which track. Doing so will overwrite the default\nbehaviour, which adds track_element to all tracks whose\ntrack-type includes the track_element's\ntrack-type.\nNote that under the default track selection, if a clip would produce\nmultiple core children of the same GES.TrackType, it will choose\none of the core children arbitrarily to place in the corresponding\ntracks, with a warning for the other core children that are not\nplaced in the track. For example, this would happen for a GES.UriClip\nthat points to a file that contains multiple audio streams. If you\nwish to choose the stream, you could connect to this signal, and use,\nsay, GES.UriSourceAsset.prototype.get_stream_info to choose which core\nsource to add.\nWhen a clip is first added to a timeline, its core elements will\nbe created for the current tracks in the timeline if they have not\nalready been created. Then this will be emitted for each of these\ncore children to select which tracks, if any, they should be added\nto. It will then be called for any non-core children in the clip.\nIn addition, if a new track element is ever added to a clip in a\ntimeline (and it is not already part of a track) this will be emitted\nto select which tracks the element should be added to.\nFinally, as a special case, if a track is added to the timeline\nafter it already contains clips, then it will request the creation\nof the clips' core elements of the corresponding type, if they have\nnot already been created, and this signal will be emitted for each of\nthese newly created elements. In addition, this will also be released\nfor all other track elements in the timeline's clips that have not\nyet been assigned a track. However, in this final case, the timeline\nwill only check whether the newly added track appears in the track\nlist. If it does appear, the track element will be added to the newly\nadded track. All other tracks in the returned track list are ignored.\nIn this latter case, track elements that are already part of a track\nwill not be asked if they want to be copied into the new track. If\nyou wish to do this, you can use GES.Clip.prototype.add_child_to_track.\nNote that the returned GLib.PtrArray should own a new reference to each\nof its contained GES.Track. The timeline will set the GLib.DestroyNotify\nfree function on the GLib.PtrArray to dereference the elements.\nParameters:\nThe clip that track_element is being added to\nThe element being added\nAn array of\nGES.Track-s that track_element should be added to, or null to\nnot add the element to any track.\n\n\tFlags:\t\n\t\n\t\t\n\t\t\t\tRun Last\n\t\t\t\n\nThis will be emitted whenever the timeline needs to determine which\ntracks a clip's children should be added to. The track element will\nbe added to each of the tracks given in the return. If a track\nelement is selected to go into multiple tracks, it will be copied\ninto the additional tracks, under the same clip. Note that the copy\nwill not keep its properties or state in sync with the original.\nConnect to this signal once if you wish to control which element\nshould be added to which track. Doing so will overwrite the default\nbehaviour, which adds track_element to all tracks whose\ntrack_type includes the track_element's\ntrack_type.\nNote that under the default track selection, if a clip would produce\nmultiple core children of the same GES.TrackType, it will choose\none of the core children arbitrarily to place in the corresponding\ntracks, with a warning for the other core children that are not\nplaced in the track. For example, this would happen for a GES.UriClip\nthat points to a file that contains multiple audio streams. If you\nwish to choose the stream, you could connect to this signal, and use,\nsay, GES.UriSourceAsset.get_stream_info to choose which core\nsource to add.\nWhen a clip is first added to a timeline, its core elements will\nbe created for the current tracks in the timeline if they have not\nalready been created. Then this will be emitted for each of these\ncore children to select which tracks, if any, they should be added\nto. It will then be called for any non-core children in the clip.\nIn addition, if a new track element is ever added to a clip in a\ntimeline (and it is not already part of a track) this will be emitted\nto select which tracks the element should be added to.\nFinally, as a special case, if a track is added to the timeline\nafter it already contains clips, then it will request the creation\nof the clips' core elements of the corresponding type, if they have\nnot already been created, and this signal will be emitted for each of\nthese newly created elements. In addition, this will also be released\nfor all other track elements in the timeline's clips that have not\nyet been assigned a track. However, in this final case, the timeline\nwill only check whether the newly added track appears in the track\nlist. If it does appear, the track element will be added to the newly\nadded track. All other tracks in the returned track list are ignored.\nIn this latter case, track elements that are already part of a track\nwill not be asked if they want to be copied into the new track. If\nyou wish to do this, you can use GES.Clip.add_child_to_track.\nNote that the returned GLib.PtrArray should own a new reference to each\nof its contained GES.Track. The timeline will set the GLib.DestroyNotify\nfree function on the GLib.PtrArray to dereference the elements.\nParameters:\nThe clip that track_element is being added to\nThe element being added\nAn array of\nGES.Track-s that track_element should be added to, or None to\nnot add the element to any track.\n\n\tFlags:\t\n\t\n\t\t\n\t\t\t\tRun Last\n\t\t\t\n\n"});