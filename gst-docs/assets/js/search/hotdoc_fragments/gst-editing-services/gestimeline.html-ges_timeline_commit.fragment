fragment_downloaded_cb({"url":"gst-editing-services/gestimeline.html#ges_timeline_commit","fragment":"\n\tges_timeline_commit\n\n\n\tGES.Timeline.prototype.commit\n\n\n\tGES.Timeline.commit\n\nCommit all the pending changes of the clips contained in the\ntimeline.\nWhen changes happen in a timeline, they are not immediately executed\ninternally, in a way that effects the output data of the timeline. You\nshould call this method when you are done with a set of changes and you\nwant them to be executed.\nAny pending changes will be executed in the backend. The\ncommited signal will be emitted once this has completed.\nYou should not try to change the state of the timeline, seek it or add\ntracks to it before receiving this signal. You can use\nges_timeline_commit_sync if you do not want to perform other tasks in\nthe mean time.\nNote that all the pending changes will automatically be executed when\nthe timeline goes from GST_STATE_READY to GST_STATE_PAUSED, which is\nusually triggered by a corresponding state changes in a containing\nGESPipeline.\nParameters:\nA GESTimeline\nTRUE if pending changes were committed, or FALSE if nothing\nneeded to be committed.\nCommit all the pending changes of the clips contained in the\ntimeline.\nWhen changes happen in a timeline, they are not immediately executed\ninternally, in a way that effects the output data of the timeline. You\nshould call this method when you are done with a set of changes and you\nwant them to be executed.\nAny pending changes will be executed in the backend. The\ncommited signal will be emitted once this has completed.\nYou should not try to change the state of the timeline, seek it or add\ntracks to it before receiving this signal. You can use\nGES.Timeline.prototype.commit_sync if you do not want to perform other tasks in\nthe mean time.\nNote that all the pending changes will automatically be executed when\nthe timeline goes from Gst.State.READY to Gst.State.PAUSED, which is\nusually triggered by a corresponding state changes in a containing\nGES.Pipeline.\nParameters:\nA GES.Timeline\ntrue if pending changes were committed, or false if nothing\nneeded to be committed.\nCommit all the pending changes of the clips contained in the\ntimeline.\nWhen changes happen in a timeline, they are not immediately executed\ninternally, in a way that effects the output data of the timeline. You\nshould call this method when you are done with a set of changes and you\nwant them to be executed.\nAny pending changes will be executed in the backend. The\ncommited signal will be emitted once this has completed.\nYou should not try to change the state of the timeline, seek it or add\ntracks to it before receiving this signal. You can use\nGES.Timeline.commit_sync if you do not want to perform other tasks in\nthe mean time.\nNote that all the pending changes will automatically be executed when\nthe timeline goes from Gst.State.READY to Gst.State.PAUSED, which is\nusually triggered by a corresponding state changes in a containing\nGES.Pipeline.\nParameters:\nA GES.Timeline\nTrue if pending changes were committed, or False if nothing\nneeded to be committed.\n"});