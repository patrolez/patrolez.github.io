fragment_downloaded_cb({"url":"gst-editing-services/gesasset.html#ges_asset_request","fragment":"\n\tges_asset_request\n\n\n\tGES.Asset.prototype.request\n\n\n\tGES.Asset.request\n\nReturns an asset with the given properties. If such an asset already\nexists in the cache (it has been previously created in GES), then a\nreference to the existing asset is returned. Otherwise, a newly created\nasset is returned, and also added to the cache.\nIf the requested asset has been loaded with an error, then error is\nset, if given, and NULL will be returned instead.\nNote that the given id may not be exactly the id that is\nset on the returned asset. For instance, it may be adjusted into a\nstandard format. Or, if a GESExtractable type does not have its\nextraction parametrised, as is the case by default, then the given id\nmay be ignored entirely and the id set to some standard, in\nwhich case a NULL id can be given.\nSimilarly, the given extractable_type may not be exactly the\nextractable-type that is set on the returned asset. Instead,\nthe actual extractable type may correspond to a subclass of the given\nextractable_type, depending on the given id.\nMoreover, depending on the given extractable_type, the returned asset\nmay belong to a subclass of GESAsset.\nFinally, if the requested asset has a proxy, then the proxy\nthat is found at the end of the chain of proxies is returned (a proxy's\nproxy will take its place, and so on, unless it has no proxy).\nSome asset subclasses only support asynchronous construction of its\nassets, such as GESUriClip. For such assets this method will fail, and\nyou should use ges_asset_request_async instead. In the case of\nGESUriClip, you can use ges_uri_clip_asset_request_sync if you only\nwant to wait for the request to finish.\nParameters:\nThe extractable-type of the asset\nThe id of the asset\nAn error to be set if the requested asset has\nloaded with an error, or NULL to ignore\nA reference to the requested\nasset, or NULL if an error occurred.\nReturns an asset with the given properties. If such an asset already\nexists in the cache (it has been previously created in GES), then a\nreference to the existing asset is returned. Otherwise, a newly created\nasset is returned, and also added to the cache.\nIf the requested asset has been loaded with an error, then error is\nset, if given, and null will be returned instead.\nNote that the given id may not be exactly the id that is\nset on the returned asset. For instance, it may be adjusted into a\nstandard format. Or, if a GES.Extractable type does not have its\nextraction parametrised, as is the case by default, then the given id\nmay be ignored entirely and the id set to some standard, in\nwhich case a null id can be given.\nSimilarly, the given extractable_type may not be exactly the\nextractable-type that is set on the returned asset. Instead,\nthe actual extractable type may correspond to a subclass of the given\nextractable_type, depending on the given id.\nMoreover, depending on the given extractable_type, the returned asset\nmay belong to a subclass of GES.Asset.\nFinally, if the requested asset has a proxy, then the proxy\nthat is found at the end of the chain of proxies is returned (a proxy's\nproxy will take its place, and so on, unless it has no proxy).\nSome asset subclasses only support asynchronous construction of its\nassets, such as GES.UriClip. For such assets this method will fail, and\nyou should use GES.Asset.prototype.request_async instead. In the case of\nGES.UriClip, you can use GES.UriClipAsset.prototype.request_sync if you only\nwant to wait for the request to finish.\nParameters:\nThe extractable-type of the asset\nThe id of the asset\nA reference to the requested\nasset, or null if an error occurred.\nReturns an asset with the given properties. If such an asset already\nexists in the cache (it has been previously created in GES), then a\nreference to the existing asset is returned. Otherwise, a newly created\nasset is returned, and also added to the cache.\nIf the requested asset has been loaded with an error, then error is\nset, if given, and None will be returned instead.\nNote that the given id may not be exactly the id that is\nset on the returned asset. For instance, it may be adjusted into a\nstandard format. Or, if a GES.Extractable type does not have its\nextraction parametrised, as is the case by default, then the given id\nmay be ignored entirely and the id set to some standard, in\nwhich case a None id can be given.\nSimilarly, the given extractable_type may not be exactly the\nextractable_type that is set on the returned asset. Instead,\nthe actual extractable type may correspond to a subclass of the given\nextractable_type, depending on the given id.\nMoreover, depending on the given extractable_type, the returned asset\nmay belong to a subclass of GES.Asset.\nFinally, if the requested asset has a proxy, then the proxy\nthat is found at the end of the chain of proxies is returned (a proxy's\nproxy will take its place, and so on, unless it has no proxy).\nSome asset subclasses only support asynchronous construction of its\nassets, such as GES.UriClip. For such assets this method will fail, and\nyou should use GES.Asset.request_async instead. In the case of\nGES.UriClip, you can use GES.UriClipAsset.request_sync if you only\nwant to wait for the request to finish.\nParameters:\nThe extractable_type of the asset\nThe id of the asset\nA reference to the requested\nasset, or None if an error occurred.\n"});