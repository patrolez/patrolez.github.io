fragment_downloaded_cb({"url":"tcp/multifdsink.html#multifdsink-page","fragment":"multifdsink\nThis plugin writes incoming data to a set of file descriptors. The\nfile descriptors can be added to multifdsink by emitting the add signal.\nFor each descriptor added, the client-added signal will be called.\nThe multifdsink element needs to be set into READY, PAUSED or PLAYING state\nbefore operations such as adding clients are possible.\nA client can also be added with the add-full signal\nthat allows for more control over what and how much data a client\ninitially receives.\nClients can be removed from multifdsink by emitting the remove signal. For\neach descriptor removed, the client-removed signal will be called. The\nclient-removed signal can also be fired when multifdsink decides that a\nclient is not active anymore or, depending on the value of the\nrecover-policy property, if the client is reading too slowly.\nIn all cases, multifdsink will never close a file descriptor itself.\nThe user of multifdsink is responsible for closing all file descriptors.\nThis can for example be done in response to the client-fd-removed signal.\nNote that multifdsink still has a reference to the file descriptor when the\nclient-removed signal is emitted, so that \"get-stats\" can be performed on\nthe descriptor; it is therefore not safe to close the file descriptor in\nthe client-removed signal handler, and you should use the\nclient-fd-removed signal to safely close the fd.\nMultifdsink internally keeps a queue of the incoming buffers and uses a\nseparate thread to send the buffers to the clients. This ensures that no\nclient write can block the pipeline and that clients can read with different\nspeeds.\nWhen adding a client to multifdsink, the sync-method property will define\nwhich buffer in the queued buffers will be sent first to the client. Clients\ncan be sent the most recent buffer (which might not be decodable by the\nclient if it is not a keyframe), the next keyframe received in\nmultifdsink (which can take some time depending on the keyframe rate), or the\nlast received keyframe (which will cause a simple burst-on-connect).\nMultifdsink will always keep at least one keyframe in its internal buffers\nwhen the sync-mode is set to latest-keyframe.\nThere are additional values for the sync-method\nproperty to allow finer control over burst-on-connect behaviour. By selecting\nthe 'burst' method a minimum burst size can be chosen, 'burst-keyframe'\nadditionally requires that the burst begin with a keyframe, and\n'burst-with-keyframe' attempts to burst beginning with a keyframe, but will\nprefer a minimum burst size even if it requires not starting with a keyframe.\nMultifdsink can be instructed to keep at least a minimum amount of data\nexpressed in time or byte units in its internal queues with the\ntime-min and bytes-min properties respectively.\nThese properties are useful if the application adds clients with the\nadd-full signal to make sure that a burst connect can\nactually be honored.\nWhen streaming data, clients are allowed to read at a different rate than\nthe rate at which multifdsink receives data. If the client is reading too\nfast, no data will be send to the client until multifdsink receives more\ndata. If the client, however, reads too slowly, data for that client will be\nqueued up in multifdsink. Two properties control the amount of data\n(buffers) that is queued in multifdsink: buffers-max and\nbuffers-soft-max. A client that falls behind by\nbuffers-max is removed from multifdsink forcibly.\nA client with a lag of at least buffers-soft-max enters the recovery\nprocedure which is controlled with the recover-policy property.\nA recover policy of NONE will do nothing, RESYNC_LATEST will send the most recently\nreceived buffer as the next buffer for the client, RESYNC_SOFT_LIMIT\npositions the client to the soft limit in the buffer queue and\nRESYNC_KEYFRAME positions the client at the most recent keyframe in the\nbuffer queue.\nmultifdsink will by default synchronize on the clock before serving the\nbuffers to the clients. This behaviour can be disabled by setting the sync\nproperty to FALSE. Multifdsink will by default not do QoS and will never\ndrop late buffers.\n"});