fragment_downloaded_cb({"url":"srtp/srtpdec.html#srtpdec-page","fragment":"srtpdec\ngstrtpdec acts as a decoder that removes security from SRTP and SRTCP\npackets (encryption and authentication) and out RTP and RTCP. It\nreceives packet of type 'application/x-srtp' or 'application/x-srtcp'\non its sink pad, and outs packets of type 'application/x-rtp' or\n'application/x-rtcp' on its source pad.\nFor each packet received, it checks if the internal SSRC is in the list\nof streams already in use. If this is not the case, it sends a signal to\nthe user to get the needed parameters to create a new stream : master\nkey, encryption and authentication mechanisms for both RTP and RTCP. If\nthe user can't provide those parameters, the buffer is dropped and a\nwarning is emitted.\nThis element uses libsrtp library. The encryption and authentication\nmechanisms available are :\nEncryption\nAuthentication\nNote that for SRTP protection, authentication is mandatory (non-null)\nif encryption is used (non-null).\nEach packet received is first analysed (checked for valid SSRC) then\nits buffer is unprotected with libsrtp, then pushed on the source pad.\nIf protection failed or the stream could not be created, the buffer\nis dropped and a warning is emitted.\nWhen the maximum usage of the master key is reached, a soft-limit\nsignal is sent to the user, and new parameters (master key) are needed\nin return. If the hard limit is reached, a flag is set and every\nsubsequent packet is dropped, until a new key is set and the stream\nhas been updated.\nIf a stream is to be shared between multiple clients the SRTP\nrollover counter for a given SSRC must be set in the caps \"roc\" field\nwhen the request-key signal is emitted by the decoder. The rollover\ncounters should have been transmitted by a signaling protocol by some\nother means. If no rollover counter is provided by the user, 0 is\nused by default.\nIt is possible to receive a stream protected by multiple master keys, each buffer\nthen contains a Master Key Identifier (MKI) to identify which key was used for this\nbuffer. If multiple keys are needed, the first key can be specified in the caps as\n\"srtp-key=(buffer)key1data, mki=(buffer)mki1data\", then the second one can be given in\nthe same caps as \"srtp-key2=(buffer)key2data, mki2=(buffer)mki2data\", and more can\nbe added up to 15.\n\nAES_ICM 256 bits (maximum security)\nAES_ICM 128 bits (default)\nNULL\n\n\nHMAC_SHA1 80 bits (default, maximum protection)\nHMAC_SHA1 32 bits\nNULL\n\n"});