fragment_downloaded_cb({"url":"gst-rtsp-server/rtsp-onvif-media.html#gst_rtsp_onvif_media_collect_backchannel","fragment":"\n\tgst_rtsp_onvif_media_collect_backchannel\n\n\n\tGstRtspServer.RTSPOnvifMedia.prototype.collect_backchannel\n\n\n\tGstRtspServer.RTSPOnvifMedia.collect_backchannel\n\nFind the ONVIF backchannel depayloader element. It should be named\n'depay_backchannel', be placed in a bin called 'onvif-backchannel'\nand return all supported RTP caps on a caps query. Complete RTP caps with\nat least the payload type, clock-rate and encoding-name are required.\nA new GstRTSPStream is created for the backchannel if found.\nParameters:\na GstRTSPOnvifMedia\nTRUE if a backchannel stream could be found and created\n\n\tSince\t\t\t: 1.14\n\t\t\nFind the ONVIF backchannel depayloader element. It should be named\n'depay_backchannel', be placed in a bin called 'onvif-backchannel'\nand return all supported RTP caps on a caps query. Complete RTP caps with\nat least the payload type, clock-rate and encoding-name are required.\nA new GstRtspServer.RTSPStream is created for the backchannel if found.\nParameters:\na GstRtspServer.RTSPOnvifMedia\ntrue if a backchannel stream could be found and created\n\n\tSince\t\t\t: 1.14\n\t\t\nFind the ONVIF backchannel depayloader element. It should be named\n'depay_backchannel', be placed in a bin called 'onvif-backchannel'\nand return all supported RTP caps on a caps query. Complete RTP caps with\nat least the payload type, clock-rate and encoding-name are required.\nA new GstRtspServer.RTSPStream is created for the backchannel if found.\nParameters:\na GstRtspServer.RTSPOnvifMedia\nTrue if a backchannel stream could be found and created\n\n\tSince\t\t\t: 1.14\n\t\t\n"});