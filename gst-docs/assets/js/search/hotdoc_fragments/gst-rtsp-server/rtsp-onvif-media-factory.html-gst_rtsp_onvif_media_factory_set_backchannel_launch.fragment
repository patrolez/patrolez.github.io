fragment_downloaded_cb({"url":"gst-rtsp-server/rtsp-onvif-media-factory.html#gst_rtsp_onvif_media_factory_set_backchannel_launch","fragment":"\n\tgst_rtsp_onvif_media_factory_set_backchannel_launch\n\n\n\tGstRtspServer.RTSPOnvifMediaFactory.prototype.set_backchannel_launch\n\n\n\tGstRtspServer.RTSPOnvifMediaFactory.set_backchannel_launch\n\nThe gst_parse_launch line to use for constructing the ONVIF backchannel\npipeline in the default prepare vmethod if requested by the client.\nThe pipeline description should return a GstBin as the toplevel element\nwhich can be accomplished by enclosing the description with brackets '('\n')'.\nThe description should return a pipeline with a single depayloader named\ndepay_backchannel. A caps query on the depayloader's sinkpad should return\nall possible, complete RTP caps that are going to be supported. At least\nthe payload type, clock-rate and encoding-name need to be specified.\nNote: The pipeline part passed here must end in sinks that are not waiting\nuntil pre-rolling before reaching the PAUSED state, i.e. setting\nasync=false on GstBaseSink. Otherwise the whole media will not be able to\nprepare.\nParameters:\na GstRTSPMediaFactory\nthe launch description\n\n\tSince\t\t\t: 1.14\n\t\t\nThe Gst.prototype.parse_launch line to use for constructing the ONVIF backchannel\npipeline in the default prepare vmethod if requested by the client.\nThe pipeline description should return a GstBin as the toplevel element\nwhich can be accomplished by enclosing the description with brackets '('\n')'.\nThe description should return a pipeline with a single depayloader named\ndepay_backchannel. A caps query on the depayloader's sinkpad should return\nall possible, complete RTP caps that are going to be supported. At least\nthe payload type, clock-rate and encoding-name need to be specified.\nNote: The pipeline part passed here must end in sinks that are not waiting\nuntil pre-rolling before reaching the PAUSED state, i.e. setting\nasync=false on GstBase.BaseSink. Otherwise the whole media will not be able to\nprepare.\nParameters:\na GstRtspServer.RTSPMediaFactory\nthe launch description\n\n\tSince\t\t\t: 1.14\n\t\t\nThe Gst.parse_launch line to use for constructing the ONVIF backchannel\npipeline in the default prepare vmethod if requested by the client.\nThe pipeline description should return a GstBin as the toplevel element\nwhich can be accomplished by enclosing the description with brackets '('\n')'.\nThe description should return a pipeline with a single depayloader named\ndepay_backchannel. A caps query on the depayloader's sinkpad should return\nall possible, complete RTP caps that are going to be supported. At least\nthe payload type, clock-rate and encoding-name need to be specified.\nNote: The pipeline part passed here must end in sinks that are not waiting\nuntil pre-rolling before reaching the PAUSED state, i.e. setting\nasync=false on GstBase.BaseSink. Otherwise the whole media will not be able to\nprepare.\nParameters:\na GstRtspServer.RTSPMediaFactory\nthe launch description\n\n\tSince\t\t\t: 1.14\n\t\t\n"});