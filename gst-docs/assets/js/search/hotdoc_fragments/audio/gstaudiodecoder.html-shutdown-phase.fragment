fragment_downloaded_cb({"url":"audio/gstaudiodecoder.html#shutdown-phase","fragment":"Shutdown phase\nSubclass is responsible for providing pad template caps for\nsource and sink pads. The pads need to be named \"sink\" and \"src\". It also\nneeds to set the fixed caps on srcpad, when the format is ensured.  This\nis typically when base class calls subclass' set_format function, though\nit might be delayed until calling gst_audio_decoder_finish_frame.\nIn summary, above process should have subclass concentrating on\ncodec data processing while leaving other matters to base class,\nsuch as most notably timestamp handling.  While it may exert more control\nin this area (see e.g. pre_push), it is very much not recommended.\nIn particular, base class will try to arrange for perfect output timestamps\nas much as possible while tracking upstream timestamps.\nTo this end, if deviation between the next ideal expected perfect timestamp\nand upstream exceeds tolerance, then resync to upstream\noccurs (which would happen always if the tolerance mechanism is disabled).\nIn non-live pipelines, baseclass can also (configurably) arrange for\noutput buffer aggregation which may help to redue large(r) numbers of\nsmall(er) buffers being pushed and processed downstream. Note that this\nfeature is only available if the buffer layout is interleaved. For planar\nbuffers, the decoder implementation is fully responsible for the output\nbuffer size.\nOn the other hand, it should be noted that baseclass only provides limited\nseeking support (upon explicit subclass request), as full-fledged support\nshould rather be left to upstream demuxer, parser or alike.  This simple\napproach caters for seeking and duration reporting using estimated input\nbitrates.\nThings that subclass need to take care of:\nProvide pad templates\nSet source pad caps when appropriate\nSet user-configurable properties to sane defaults for format and\nimplementing codec at hand, and convey some subclass capabilities and\nexpectations in context.\nAccept data in handle_frame and provide encoded results to\ngst_audio_decoder_finish_frame.  If it is prepared to perform\nPLC, it should also accept NULL data in handle_frame and provide for\ndata for indicated duration.\n\nGstAudioDecoder class calls stop to inform the subclass that data\nparsing will be stopped.\n\n\n\nProvide pad templates\n\n\nSet source pad caps when appropriate\n\n\nSet user-configurable properties to sane defaults for format and\nimplementing codec at hand, and convey some subclass capabilities and\nexpectations in context.\n\n\nAccept data in handle_frame and provide encoded results to\ngst_audio_decoder_finish_frame.  If it is prepared to perform\nPLC, it should also accept NULL data in handle_frame and provide for\ndata for indicated duration.\n\n\n"});