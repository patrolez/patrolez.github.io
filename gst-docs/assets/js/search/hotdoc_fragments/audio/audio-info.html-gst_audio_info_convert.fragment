fragment_downloaded_cb({"url":"audio/audio-info.html#gst_audio_info_convert","fragment":"\n\tgst_audio_info_convert\n\n\n\tGstAudio.AudioInfo.prototype.convert\n\n\n\tGstAudio.AudioInfo.convert\n\nConverts among various GstFormat types.  This function handles\nGST_FORMAT_BYTES, GST_FORMAT_TIME, and GST_FORMAT_DEFAULT.  For\nraw audio, GST_FORMAT_DEFAULT corresponds to audio frames.  This\nfunction can be used to handle pad queries of the type GST_QUERY_CONVERT.\nParameters:\na GstAudioInfo\nGstFormat of the src_val\nvalue to convert\nGstFormat of the dest_val\npointer to destination value\nTRUE if the conversion was successful.\nConverts among various Gst.Format types.  This function handles\nGST_FORMAT_BYTES, GST_FORMAT_TIME, and GST_FORMAT_DEFAULT.  For\nraw audio, GST_FORMAT_DEFAULT corresponds to audio frames.  This\nfunction can be used to handle pad queries of the type GST_QUERY_CONVERT.\nParameters:\na GstAudio.AudioInfo\nGst.Format of the src_val\nvalue to convert\nGst.Format of the dest_val\nReturns a tuple made of:\nTRUE if the conversion was successful.\nTRUE if the conversion was successful.\nConverts among various Gst.Format types.  This function handles\nGST_FORMAT_BYTES, GST_FORMAT_TIME, and GST_FORMAT_DEFAULT.  For\nraw audio, GST_FORMAT_DEFAULT corresponds to audio frames.  This\nfunction can be used to handle pad queries of the type GST_QUERY_CONVERT.\nParameters:\na GstAudio.AudioInfo\nGst.Format of the src_val\nvalue to convert\nGst.Format of the dest_val\nReturns a tuple made of:\nTRUE if the conversion was successful.\nTRUE if the conversion was successful.\n"});