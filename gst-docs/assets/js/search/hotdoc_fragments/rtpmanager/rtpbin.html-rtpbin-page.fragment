fragment_downloaded_cb({"url":"rtpmanager/rtpbin.html#rtpbin-page","fragment":"rtpbin\nRTP bin combines the functions of rtpsession, rtpssrcdemux,\nrtpjitterbuffer and rtpptdemux in one element. It allows for multiple\nRTP sessions that will be synchronized together using RTCP SR packets.\nrtpbin is configured with a number of request pads that define the\nfunctionality that is activated, similar to the rtpsession element.\nTo use rtpbin as an RTP receiver, request a recv_rtp_sink_%u pad. The session\nnumber must be specified in the pad name.\nData received on the recv_rtp_sink_%u pad will be processed in the rtpsession\nmanager and after being validated forwarded on rtpssrcdemux element. Each\nRTP stream is demuxed based on the SSRC and send to a rtpjitterbuffer. After\nthe packets are released from the jitterbuffer, they will be forwarded to a\nrtpptdemux element. The rtpptdemux element will demux the packets based\non the payload type and will create a unique pad recv_rtp_src_%u_%u_%u on\nrtpbin with the session number, SSRC and payload type respectively as the pad\nname.\nTo also use rtpbin as an RTCP receiver, request a recv_rtcp_sink_%u pad. The\nsession number must be specified in the pad name.\nIf you want the session manager to generate and send RTCP packets, request\nthe send_rtcp_src_%u pad with the session number in the pad name. Packet pushed\non this pad contain SR/RR RTCP reports that should be sent to all participants\nin the session.\nTo use rtpbin as a sender, request a send_rtp_sink_%u pad, which will\nautomatically create a send_rtp_src_%u pad. If the session number is not provided,\nthe pad from the lowest available session will be returned. The session manager will modify the\nSSRC in the RTP packets to its own SSRC and will forward the packets on the\nsend_rtp_src_%u pad after updating its internal state.\nThe session manager needs the clock-rate of the payload types it is handling\nand will signal the request-pt-map signal when it needs such a\nmapping. One can clear the cached values with the clear-pt-map\nsignal.\nAccess to the internal statistics of rtpbin is provided with the\nget-internal-session property. This action signal gives access to the\nRTPSession object which further provides action signals to retrieve the\ninternal source and other sources.\nrtpbin also has signals (#GstRtpBin::request-rtp-encoder,\nrequest-rtp-decoder, request-rtcp-encoder and\nrequest-rtp-decoder) to dynamically request for RTP and RTCP encoders\nand decoders in order to support SRTP. The encoders must provide the pads\nrtp_sink_%u and rtp_src_%u for RTP and rtcp_sink_%u and rtcp_src_%u for\nRTCP. The session number will be used in the pad name. The decoders must provide\nrtp_sink and rtp_src for RTP and rtcp_sink and rtcp_src for RTCP. The decoders will\nbe placed before the rtpsession element, thus they must support SSRC demuxing\ninternally.\nrtpbin has signals (#GstRtpBin::request-aux-sender and\nrequest-aux-receiver to dynamically request an element that can be\nused to create or merge additional RTP streams. AUX elements are needed to\nimplement FEC or retransmission (such as RFC 4588). An AUX sender must have one\nsink_%u pad that matches the sessionid in the signal and it should have 1 or\nmore src_%u pads. For each src_%\\u pad, a session will be made (if needed)\nand the pad will be linked to the session send_rtp_sink pad. Each session will\nthen expose its source pad as send_rtp_src_%u on rtpbin.\nAn AUX receiver has 1 src_%u pad that much match the sessionid in the signal\nand 1 or more sink_%u pads. A session will be made for each sink_%u pad\nwhen the corresponding recv_rtp_sink_%u pad is requested on rtpbin.\nThe request-jitterbuffer signal can be used to provide a custom\nelement to perform arrival time smoothing, reordering and optionally packet\nloss detection and retransmission requests.\n"});