fragment_downloaded_cb({"url":"rtpmanager/rtpfunnel.html#rtpfunnel-page","fragment":"rtpfunnel\nRTP funnel is basically like a normal funnel with a few added\nfunctionalities to support bundling.\nBundle is the concept of sending multiple streams in a single RTP session.\nThese can be both audio and video streams, and several of both.\nOne of the advantages with bundling is that you can get away with fewer\nports for sending and receiving media. Also the RTCP traffic gets more\ncompact if you can report on multiple streams in a single sender/receiver\nreport.\nOne of the reasons for a specialized RTP funnel is that some messages\ncoming upstream want to find their way back to the right stream,\nand a normal funnel can't know which of its sinkpads it should send\nthese messages to. The RTP funnel achieves this by keeping track of the\nSSRC of each stream on its sinkpad, and then uses the fact that upstream\nevents are tagged inside rtpbin with the appropriate SSRC, so that upon\nreceiving such an event, the RTP funnel can do a simple lookup for the\nright pad to forward the event to.\nA good example here is the KeyUnit event. If several video encoders are\nbeing bundled together using the RTP funnel, and one of the decoders on\nthe receiving side asks for a KeyUnit, typically a RTCP PLI message will\nbe sent from the receiver to the sender, and this will be transformed into\na GstForceKeyUnit event inside GstRTPSession, and sent upstream. The\nRTP funnel can than make sure that this event hits the right encoder based\non the SSRC embedded in the event.\nAnother feature of the RTP funnel is that it will mux together TWCC\n(Transport-Wide Congestion Control) sequence-numbers. The point being that\nit should increment \"transport-wide\", meaning potentially several\nbundled streams. Note that not all streams being bundled needs to be\naffected by this. As an example Google WebRTC will use bundle with audio\nand video, but will only use TWCC sequence-numbers for the video-stream(s).\n"});