fragment_downloaded_cb({"url":"rtpmanager/rtpjitterbuffer.html#rtpjitterbuffer-page","fragment":"rtpjitterbuffer\nThis element reorders and removes duplicate RTP packets as they are received\nfrom a network source.\nThe element needs the clock-rate of the RTP payload in order to estimate the\ndelay. This information is obtained either from the caps on the sink pad or,\nwhen no caps are present, from the request-pt-map signal.\nTo clear the previous pt-map use the clear-pt-map signal.\nThe rtpjitterbuffer will wait for missing packets up to a configurable time\nlimit using the latency property. Packets arriving too\nlate are considered to be lost packets. If the do-lost\nproperty is set, lost packets will result in a custom serialized downstream\nevent of name GstRTPPacketLost. The lost packet events are usually used by a\ndepayloader or other element to create concealment data or some other logic\nto gracefully handle the missing packets.\nThe jitterbuffer will use the DTS (or PTS if no DTS is set) of the incoming\nbuffer and the rtptime inside the RTP packet to create a PTS on the outgoing\nbuffer.\nThe jitterbuffer can also be configured to send early retransmission events\nupstream by setting the do-retransmission property. In\nthis mode, the jitterbuffer tries to estimate when a packet should arrive and\nsends a custom upstream event named GstRTPRetransmissionRequest when the\npacket is considered late. The initial expected packet arrival time is\ncalculated as follows:\nIf seqnum N arrived at time T, seqnum N+1 is expected to arrive at\nT + packet-spacing + rtx-delay. The packet spacing is\ncalculated from the DTS (or PTS is no DTS) of two consecutive RTP\npackets with different rtptime.\nIf seqnum N0 arrived at time T0 and seqnum Nm arrived at time Tm,\nseqnum Ni is expected at time Ti = T0 + i*(Tm - T0)/(Nm - N0). Any\npreviously scheduled timeout is overwritten.\nIf seqnum N arrived, all seqnum older than\nN - rtx-delay-reorder are considered late\nimmediately. This is to request fast feedback for abnormally reorder\npackets before any of the previous timeouts is triggered.\nA late packet triggers the GstRTPRetransmissionRequest custom upstream\nevent. After the initial timeout expires and the retransmission event is\nsent, the timeout is scheduled for\nT + rtx-retry-timeout. If the missing packet did not\narrive after rtx-retry-timeout, a new\nGstRTPRetransmissionRequest is sent upstream and the timeout is rescheduled\nagain for T + rtx-retry-timeout. This repeats until\nrtx-retry-period elapsed, at which point no further\nretransmission requests are sent and the regular logic is performed to\nschedule a lost packet as discussed above.\nThis element acts as a live element and so adds latency\nto the pipeline.\nThis element will automatically be used inside rtpbin.\n\n\nIf seqnum N arrived at time T, seqnum N+1 is expected to arrive at\nT + packet-spacing + rtx-delay. The packet spacing is\ncalculated from the DTS (or PTS is no DTS) of two consecutive RTP\npackets with different rtptime.\n\n\nIf seqnum N0 arrived at time T0 and seqnum Nm arrived at time Tm,\nseqnum Ni is expected at time Ti = T0 + i*(Tm - T0)/(Nm - N0). Any\npreviously scheduled timeout is overwritten.\n\n\nIf seqnum N arrived, all seqnum older than\nN - rtx-delay-reorder are considered late\nimmediately. This is to request fast feedback for abnormally reorder\npackets before any of the previous timeouts is triggered.\n\n\n"});