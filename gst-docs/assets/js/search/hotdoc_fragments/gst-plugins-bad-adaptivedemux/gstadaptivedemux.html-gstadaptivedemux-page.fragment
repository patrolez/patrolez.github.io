fragment_downloaded_cb({"url":"gst-plugins-bad-adaptivedemux/gstadaptivedemux.html#gstadaptivedemux-page","fragment":"gstadaptivedemux\nWhat is an adaptive demuxer?\nAdaptive demuxers are special demuxers in the sense that they don't\nactually demux data received from upstream but download the data\nthemselves.\nAdaptive formats (HLS, DASH, MSS) are composed of a manifest file and\na set of fragments. The manifest describes the available media and\nthe sequence of fragments to use. Each fragment contains a small\npart of the media (typically only a few seconds). It is possible for\nthe manifest to have the same media available in different configurations\n(bitrates for example) so that the client can select the one that\nbest suits its scenario (network fluctuation, hardware requirements...).\nIt is possible to switch from one representation of the media to another\nduring playback. That's why it is called 'adaptive', because it can be\nadapted to the client's needs.\nArchitectural overview:\nThe manifest is received by the demuxer in its sink pad and, upon receiving\nEOS, it parses the manifest and exposes the streams available in it. For\neach stream a source element will be created and will download the list\nof fragments one by one. Once a fragment is finished downloading, the next\nURI is set to the source element and it starts fetching it and pushing\nthrough the stream's pad. This implies that each stream is independent from\neach other as it runs on a separate thread.\nAfter downloading each fragment, the download rate of it is calculated and\nthe demuxer has a chance to switch to a different bitrate if needed. The\nswitch can be done by simply pushing a new caps before the next fragment\nwhen codecs are the same, or by exposing a new pad group if it needs\na codec change.\nExtra features:\nSubclasses:\nWhile GstAdaptiveDemux is responsible for the workflow, it knows nothing\nabout the intrinsics of the subclass formats, so the subclasses are\nresponsible for maintaining the manifest data structures and stream\ninformation.\n\nNot linked streams: Streams that are not-linked have their download threads\ninterrupted to save network bandwidth. When they are\nrelinked a reconfigure event is received and the\nstream is restarted.\n\n"});