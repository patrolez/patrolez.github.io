fragment_downloaded_cb({"url":"gst-devtools/gst-validate-environment-variables.html#gstvalidate-environment-variables","fragment":"GstValidate Environment Variables\nThe runtime behaviour of GstValidate applications can be influenced by a\nnumber of environment variables.\nGST_VALIDATE.\nThis environment variable can be set to a list of debug options, which\ncause GstValidate to print out different types of test result\ninformation and consider differently the level of the reported issues.\nGST_VALIDATE_FILE.\nSet this variable to a colon-separated list of paths to redirect all\nGstValidate messages to this file. If left unset, debug messages are\noutput to standard error.\nYou can use the special names stdout and stderr to use those output.\nGST_VALIDATE_APPS_DIR.\nSet this variable to a colon separated list of paths. The validate test\nrunner will execute all .py scripts found within the directories.\nBy default GstValidate will look for test applications in the folders:\nGST_VALIDATE_PLUGIN_PATH.\nSet this variable to a colon-separated list of paths. GstValidate will\nscan these paths for GstPlugin files and add them to the GstRegistry.\nBy default GstValidate will look for plugins in the user data directory\nspecified in the XDG standard:\n.local/share/gstreamer-GST_API_VERSION/plugins and the\nsystem wide user data directory:\n/usr/lib/gstreamer-GST_API_VERSION/validate\nGST_VALIDATE_SCENARIOS_PATH.\nSet this variable to a colon-separated list of paths. GstValidate will\nscan these paths for GstValidate scenario files. By default GstValidate\nwill look for scenarios in the user data directory as specified in the\nXDG standard:\n.local/share/gstreamer-GST_API_VERSION/validate/scenarios and the\nsystem wide user data directory:\n/usr/lib/gstreamer-GST_API_VERSION/validate/scenarios\nGST_VALIDATE_CONFIG.\nSet this variable to a colon-separated list of paths to GstValidate\nconfig files or directly as a string in the GstCaps serialization\nformat. The config file has a format similar to the scenario file. The\nname of the configuration corresponds to the name of the plugin the\nconfiguration applies to.\nThe special name \"core\" is used to configure GstValidate core\nfunctionalities (monitors, scenarios, etc...).\nIf you want to make sure to set a property on a element of a type (for\nexample to disable QoS on all sinks) you can do:\nIf you want the GstPipeline to get dumped when an issue of a certain\nlevel (and higher) happens, you can do:\nNote that you will still need to set GST_DEBUG_DUMP_DOT_DIR.\nFor more examples you can look at the ssim GstValidate plugin\ndocumentation to see how to configure that plugin.\nYou can also check that a src pad is pushing buffers at a minimum\nfrequency. For example to check if v4l2src is producing at least 60 frames\nper second you can do:\nThis config accepts the following fields:\nmin-buffer-frequency: the expected minimum rate, in buffers per\nsecond, at which buffers are pushed on the pad\ntarget-element-{factory-name,name,klass}: the factory-name, object\nname or class of the element to check\nname: (optional) only check the frequency if the src pad has this\nname\nbuffer-frequency-start: (optional) if defined, validate will\nignore the frequency of the pad during the time specified in this\nfield, in ns. This can be useful when testing live pipelines where\nconfiguring and setting up elements can take some time slowing down\nthe first buffers until the pipeline reaches its cruising speed.\nGST_VALIDATE_OVERRIDE.\nSet this variable to a colon-separated list of dynamically linkable\nfiles that GstValidate will scan looking for overrides. By default\nGstValidate will look for scenarios in the user data directory as\nspecified in the XDG standard:\n.local/share/gstreamer-GST_API_VERSION/validate/scenarios and the\nsystem wide user data directory:\n/usr/lib/gstreamer-GST_API_VERSION/validate/scenarios\nGST_VALIDATE_SCENARIO_WAIT_MULITPLIER.\nA decimal number to set as a multiplier for the wait actions. For\nexample if you set GST_VALIDATE_SCENARIO_WAIT_MULITPLIER=0.5, for a\nwait action that has a duration of 2.0 the waiting time will only be of\n1.0 second. If set to 0, wait action will be ignored.\nGST_VALIDATE_REPORTING_DETAILS.\nThe reporting level can be set through the\nGST_VALIDATE_REPORTING_DETAILS environment variable, as a\ncomma-separated list of (optional) object categories / names and levels.\nOmit the object category / name to set the global level.\nExamples:\nLevels being:\nSetting the reporting level allows to control the way issues are\nreported when calling gst_validate_runner_printf().\nGST_VALIDATE_LAUNCHER_DEBUG.\nYou can activate debug logs setting the environment variable GST_VALIDATE_LAUNCHER_DEBUG.\nExamples:\nIt uses the same syntax as PITIVI_DEBUG\n(more information at: https://developer.pitivi.org/Bug_reporting.html#debug-logs).\n\n\nfatal-criticals: Causes GstValidate to consider only critical issues as import enough\nto consider the test failed (default behaviour)\n\nfatal-warnings: Causes GstValidate to consider warning, and critical issues as\nimport enough to consider the test failed\n\nfatal-issues: Causes GstValidate to consider issue, warning, and critical issues\nas import enough to consider the test failed\n\nprint-issues: Causes GstValidate to print issue, warning and critical issues in\nthe final reports (default behaviour)\n\nprint-warnings: Causes GstValidate to only print warning and critical issues in the\nfinal reports\n\nprint-criticals: Causes GstValidate to only print critical issues in the final\nreports\n\n\nsubprojects/gst-examples/webrtc/check/validate/apps\nsubprojects/gst-editing-services/tests/validate\n\n\n\nmin-buffer-frequency: the expected minimum rate, in buffers per\nsecond, at which buffers are pushed on the pad\n\n\ntarget-element-{factory-name,name,klass}: the factory-name, object\nname or class of the element to check\n\n\nname: (optional) only check the frequency if the src pad has this\nname\n\n\nbuffer-frequency-start: (optional) if defined, validate will\nignore the frequency of the pad during the time specified in this\nfield, in ns. This can be useful when testing live pipelines where\nconfiguring and setting up elements can take some time slowing down\nthe first buffers until the pipeline reaches its cruising speed.\nGST_VALIDATE_OVERRIDE.\n\n\n\n\nnone: No debugging level specified or desired. Used to deactivate\ndebugging output.\n\nsynthetic: Summary of the issues found, with no details.\n\nsubchain: If set as the default level, similar issues can be reported multiple\ntimes for different subchains. If set as the level for a particular\nobject (my_object:subchain), validate will report the issues where\nthe object is the first to report an issue for a subchain.\n\nmonitor: If set as the default level, all the distinct issues for all the\nmonitors will be reported. If set as the level for a particular\nobject, all the distinct issues for this object will be reported.\nNote that if the same issue happens twice on the same object, up\nuntil this level that issue is only reported once.\n\nall: All the issues will be reported, even those that repeat themselves\ninside the same object. This can be very verbose if set\nglobally.\n\n"});