fragment_downloaded_cb({"url":"gst-devtools/gst-validate-transcoding.html#the-encoding-profile-serialization-format","fragment":"The encoding profile serialization format\nThis is the serialization format of a GstEncodingProfile.\nInternally the transcoding application uses GstEncodeBin.\ngst-validate-transcoding-GST_API_VERSION uses its own serialization\nformat to describe the GstEncodeBin.profile property of the\nencodebin.\nThe simplest serialized profile looks like:\nFor example to encode a stream into a WebM container, with an OGG audio\nstream and a VP8 video stream, the serialized GstEncodingProfile\nwill look like:\nYou can also set the preset name of the encoding profile using the\ncaps+preset_name syntax as in:\nMoreover, you can set the presence property\nof an encoding profile using the |presence syntax as in:\nThis field allows you to specify how many times maximum a\nGstEncodingProfile can be used inside an encodebin.\nYou can also use the restriction_caps->encoded_format_caps syntax to\nspecify the restriction caps\nto be set on a GstEncodingProfile. It\ncorresponds to the restriction GstCaps to apply before the encoder\nthat will be used in the profile. The fields present in restriction caps\nare properties of the raw stream (that is, before encoding), such as\nheight and width for video and depth and sampling rate for audio. This\nproperty does not make sense for muxers.\nTo force a video stream to be encoded with a Full HD resolution (using\nWebM as the container format, VP8 as the video codec and Vorbis as the\naudio codec), you should use:\n"});