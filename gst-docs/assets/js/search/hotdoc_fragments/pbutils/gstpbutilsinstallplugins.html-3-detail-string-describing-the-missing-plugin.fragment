fragment_downloaded_cb({"url":"pbutils/gstpbutilsinstallplugins.html#3-detail-string-describing-the-missing-plugin","fragment":"3. Detail string describing the missing plugin\nThe string is in UTF-8 encoding and is made up of several fields,\nseparated by '|' characters (but neither the first nor the last\ncharacter is a '|'). The fields are:\nAn entire ID string might then look like this, for example: gstreamer|1.0|totem|Vorbis audio decoder|decoder-audio/x-vorbis\nPlugin installers parsing this ID string should expect further fields\nalso separated by '|' symbols and either ignore them, warn the user, or\nerror out when encountering them.\nThose unfamiliar with the GStreamer 'caps' system should note a few\nthings about the caps string used in the above decoder/encoder case:\n\nplugin system identifier, ie. \"gstreamer\"\nThis identifier determines the format of the rest of the detail\nstring. Automatic plugin installers should not process detail\nstrings with unknown identifiers. This allows other plugin-based\nlibraries to use the same mechanism for their automatic plugin\ninstallation needs, or for the format to be changed should it turn\nout to be insufficient.\nplugin system version, e.g. \"1.0\"\nThis is required so that when there is GStreamer-2.0 at some point\nin future, the different major versions can still co-exist and use\nthe same plugin install mechanism in the same way.\napplication identifier, e.g. \"totem\"\nThis may also be in the form of \"pid/12345\" if the program name\ncan't be obtained for some reason.\nhuman-readable localised description of the required component, e.g.\n\"Vorbis audio decoder\"\nidentifier string for the required component (see below for details\nabout how to map this to the package/plugin that needs installing),\ne.g.\n\nurisource-$(PROTOCOL_REQUIRED), e.g. urisource-http or\nurisource-mms\nelement-$(ELEMENT_REQUIRED), e.g. element-videoconvert\ndecoder-$(CAPS_REQUIRED), e.g. (do read below for more\ndetails!):\n\ndecoder-audio/x-vorbis\ndecoder-application/ogg\ndecoder-audio/mpeg, mpegversion=(int)4\ndecoder-video/mpeg, systemstream=(boolean)true,\nmpegversion=(int)2\n\n\nencoder-$(CAPS_REQUIRED), e.g. encoder-audio/x-vorbis\n\n\noptional further fields not yet specified\n\n\nurisource-$(PROTOCOL_REQUIRED), e.g. urisource-http or\nurisource-mms\nelement-$(ELEMENT_REQUIRED), e.g. element-videoconvert\ndecoder-$(CAPS_REQUIRED), e.g. (do read below for more\ndetails!):\n\ndecoder-audio/x-vorbis\ndecoder-application/ogg\ndecoder-audio/mpeg, mpegversion=(int)4\ndecoder-video/mpeg, systemstream=(boolean)true,\nmpegversion=(int)2\n\n\nencoder-$(CAPS_REQUIRED), e.g. encoder-audio/x-vorbis\n\n\ndecoder-audio/x-vorbis\ndecoder-application/ogg\ndecoder-audio/mpeg, mpegversion=(int)4\ndecoder-video/mpeg, systemstream=(boolean)true,\nmpegversion=(int)2\n\n\nthe first part (\"video/mpeg\") of the caps string is a GStreamer\nmedia type and not a MIME type. Wherever possible, the GStreamer\nmedia type will be the same as the corresponding MIME type, but\noften it is not.\na caps string may or may not have additional comma-separated fields\nof various types (as seen in the examples above)\nthe caps string of a 'required' component (as above) will always\nhave fields with fixed values, whereas an introspected string (see\nbelow) may have fields with non-fixed values. Compare for example:\n\n\naudio/mpeg, mpegversion=(int)4 vs.\naudio/mpeg, mpegversion=(int){2, 4}\n\n\nvideo/mpeg, mpegversion=(int)2 vs.\nvideo/mpeg, systemstream=(boolean){ true, false}, mpegversion=(int)[1, 2]\n\n\n\n\n\n\naudio/mpeg, mpegversion=(int)4 vs.\naudio/mpeg, mpegversion=(int){2, 4}\n\n\nvideo/mpeg, mpegversion=(int)2 vs.\nvideo/mpeg, systemstream=(boolean){ true, false}, mpegversion=(int)[1, 2]\n\n\n"});