fragment_downloaded_cb({"url":"check/gstharness.html#gst_harness_set_blocking_push_mode","fragment":"\n\tgst_harness_set_blocking_push_mode\n\n\n\tGstCheck.Harness.prototype.set_blocking_push_mode\n\n\n\tGstCheck.Harness.set_blocking_push_mode\n\nSetting this will make the harness block in the chain-function, and\nthen release when gst_harness_pull or gst_harness_try_pull is called.\nCan be useful when wanting to control a src-element that is not implementing\ngst_clock_id_wait so it can't be controlled by the GstTestClock, since\nit otherwise would produce buffers as fast as possible.\nMT safe.\nParameters:\na GstHarness\n\n\tSince\t\t\t: 1.6\n\t\t\nSetting this will make the harness block in the chain-function, and\nthen release when GstCheck.Harness.prototype.pull or GstCheck.Harness.prototype.try_pull is called.\nCan be useful when wanting to control a src-element that is not implementing\nGst.Clock.prototype.id_wait so it can't be controlled by the GstCheck.TestClock, since\nit otherwise would produce buffers as fast as possible.\nMT safe.\nParameters:\na GstCheck.Harness\n\n\tSince\t\t\t: 1.6\n\t\t\nSetting this will make the harness block in the chain-function, and\nthen release when GstCheck.Harness.pull or GstCheck.Harness.try_pull is called.\nCan be useful when wanting to control a src-element that is not implementing\nGst.Clock.id_wait so it can't be controlled by the GstCheck.TestClock, since\nit otherwise would produce buffers as fast as possible.\nMT safe.\nParameters:\na GstCheck.Harness\n\n\tSince\t\t\t: 1.6\n\t\t\n"});