fragment_downloaded_cb({"url":"check/gstcheckbufferstraw.html#gst_buffer_straw_start_pipeline","fragment":"\n\tgst_buffer_straw_start_pipeline\n\n\n\tGstCheck.prototype.buffer_straw_start_pipeline\n\n\n\tGstCheck.buffer_straw_start_pipeline\n\nSets up a pipeline for buffer sucking. This will allow you to call\ngst_buffer_straw_get_buffer to access buffers as they pass over pad.\nThis function is normally used in unit tests that want to verify that a\nparticular element is outputting correct buffers. For example, you would make\na pipeline via gst_parse_launch, pull out the pad you want to monitor, then\ncall gst_buffer_straw_get_buffer to get the buffers that pass through pad.\nThe pipeline will block until you have sucked off the buffers.\nThis function will set the state of bin to PLAYING; to clean up, be sure to\ncall gst_buffer_straw_stop_pipeline.\nNote that you may not start two buffer straws at the same time. This function\nis intended for unit tests, not general API use. In fact it calls fail_if\nfrom libcheck, so you cannot use it outside unit tests.\nParameters:\nthe pipeline to run\na pad on an element in bin\nSets up a pipeline for buffer sucking. This will allow you to call\nGstCheck.prototype.buffer_straw_get_buffer to access buffers as they pass over pad.\nThis function is normally used in unit tests that want to verify that a\nparticular element is outputting correct buffers. For example, you would make\na pipeline via Gst.prototype.parse_launch, pull out the pad you want to monitor, then\ncall GstCheck.prototype.buffer_straw_get_buffer to get the buffers that pass through pad.\nThe pipeline will block until you have sucked off the buffers.\nThis function will set the state of bin to PLAYING; to clean up, be sure to\ncall GstCheck.prototype.buffer_straw_stop_pipeline.\nNote that you may not start two buffer straws at the same time. This function\nis intended for unit tests, not general API use. In fact it calls fail_if\nfrom libcheck, so you cannot use it outside unit tests.\nParameters:\nthe pipeline to run\na pad on an element in bin\nSets up a pipeline for buffer sucking. This will allow you to call\nGstCheck.buffer_straw_get_buffer to access buffers as they pass over pad.\nThis function is normally used in unit tests that want to verify that a\nparticular element is outputting correct buffers. For example, you would make\na pipeline via Gst.parse_launch, pull out the pad you want to monitor, then\ncall GstCheck.buffer_straw_get_buffer to get the buffers that pass through pad.\nThe pipeline will block until you have sucked off the buffers.\nThis function will set the state of bin to PLAYING; to clean up, be sure to\ncall GstCheck.buffer_straw_stop_pipeline.\nNote that you may not start two buffer straws at the same time. This function\nis intended for unit tests, not general API use. In fact it calls fail_if\nfrom libcheck, so you cannot use it outside unit tests.\nParameters:\nthe pipeline to run\na pad on an element in bin\n"});