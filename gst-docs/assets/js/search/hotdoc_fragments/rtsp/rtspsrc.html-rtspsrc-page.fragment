fragment_downloaded_cb({"url":"rtsp/rtspsrc.html#rtspsrc-page","fragment":"rtspsrc\nMakes a connection to an RTSP server and read the data.\nrtspsrc strictly follows RFC 2326 and therefore does not (yet) support\nRealMedia/Quicktime/Microsoft extensions.\nRTSP supports transport over TCP or UDP in unicast or multicast mode. By\ndefault rtspsrc will negotiate a connection in the following order:\nUDP unicast/UDP multicast/TCP. The order cannot be changed but the allowed\nprotocols can be controlled with the protocols property.\nrtspsrc currently understands SDP as the format of the session description.\nFor each stream listed in the SDP a new rtp_stream%d pad will be created\nwith caps derived from the SDP media description. This is a caps of mime type\n\"application/x-rtp\" that can be connected to any available RTP depayloader\nelement.\nrtspsrc will internally instantiate an RTP session manager element\nthat will handle the RTCP messages to and from the server, jitter removal,\npacket reordering along with providing a clock for the pipeline.\nThis feature is implemented using the gstrtpbin element.\nrtspsrc acts like a live source and will therefore only generate data in the\nPLAYING state.\nIf a RTP session times out then the rtspsrc will generate an element message\nnamed \"GstRTSPSrcTimeout\". Currently this is only supported for timeouts\ntriggered by RTCP.\nThe message's structure contains three fields:\nGstRTSPSrcTimeoutCause cause: the cause of the timeout.\ngint stream-number: an internal identifier of the stream that timed out.\nguint ssrc: the SSRC of the stream that timed out.\n"});