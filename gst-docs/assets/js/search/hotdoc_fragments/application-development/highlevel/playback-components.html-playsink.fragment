fragment_downloaded_cb({"url":"application-development/highlevel/playback-components.html#playsink","fragment":"Playsink\nThe playsink element is a powerful sink element. It has request pads for\nraw decoded audio, video and text and it will configure itself to play\nthe media streams. It has the following features:\nIt exposes GstStreamVolume, GstVideoOverlay, GstNavigation and\nGstColorBalance interfaces and automatically plugs software elements\nto implement the interfaces when needed.\nIt will automatically plug conversion elements.\nCan optionally render visualizations when there is no video input.\nConfigurable sink elements.\nConfigurable audio/video sync offset to fine-tune synchronization in\nbadly muxed files.\nSupport for taking a snapshot of the last video frame.\nBelow is an example of how you can use playsink. We use a uridecodebin\nelement to decode into raw audio and video streams which we then link to\nthe playsink request pads. We only link the first audio and video pads,\nyou could use an input-selector to link all pads.\nThis example will show audio and video depending on what you give it.\nTry this example on an audio file and you will see that it shows\nvisualizations. You can change the visualization at runtime by changing\nthe vis-plugin property.\n\n\nIt exposes GstStreamVolume, GstVideoOverlay, GstNavigation and\nGstColorBalance interfaces and automatically plugs software elements\nto implement the interfaces when needed.\n\n\nIt will automatically plug conversion elements.\n\n\nCan optionally render visualizations when there is no video input.\n\n\nConfigurable sink elements.\n\n\nConfigurable audio/video sync offset to fine-tune synchronization in\nbadly muxed files.\n\n\nSupport for taking a snapshot of the last video frame.\n\n\n"});