fragment_downloaded_cb({"url":"application-development/advanced/autoplugging.html#autoplugging","fragment":"Autoplugging\nIn Your first application, you've learned to\nbuild a simple media player for Ogg/Vorbis files. By using alternative\nelements, you are able to build media players for other media types,\nsuch as Ogg/Speex, MP3 or even video formats. However, you would rather\nwant to build an application that can automatically detect the media\ntype of a stream and automatically generate the best possible pipeline\nby looking at all available elements in a system. This process is called\nautoplugging, and GStreamer contains high-quality autopluggers. If\nyou're looking for an autoplugger, don't read any further and go to\nPlayback Components. This chapter will\nexplain the concept of autoplugging and typefinding. It will explain\nwhat systems GStreamer includes to dynamically detect the type of a\nmedia stream, and how to generate a pipeline of decoder elements to\nplayback this media. The same principles can also be used for\ntranscoding. Because of the full dynamicity of this concept, GStreamer\ncan be automatically extended to support new media types without needing\nany adaptations to its autopluggers.\nWe will first introduce the concept of Media types as a dynamic and\nextendible way of identifying media streams. After that, we will\nintroduce the concept of typefinding to find the type of a media stream.\nLastly, we will explain how autoplugging and the GStreamer registry can\nbe used to setup a pipeline that will convert media from one mediatype\nto another, for example for media decoding.\n"});