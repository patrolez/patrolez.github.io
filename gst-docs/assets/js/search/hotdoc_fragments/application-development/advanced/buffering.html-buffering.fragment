fragment_downloaded_cb({"url":"application-development/advanced/buffering.html#buffering","fragment":"Buffering\nThe purpose of buffering is to accumulate enough data in a pipeline so\nthat playback can occur smoothly and without interruptions. It is\ntypically done when reading from a (slow) and non-live network source\nbut can also be used for live sources.\nGStreamer provides support for the following use cases:\nBuffering up to a specific amount of data, in memory, before\nstarting playback so that network fluctuations are minimized. See\nStream buffering.\nDownload of the network file to a local disk with fast seeking in\nthe downloaded data. This is similar to the quicktime/youtube\nplayers. See Download buffering.\nCaching of (semi)-live streams to a local, on disk, ringbuffer with\nseeking in the cached area. This is similar to tivo-like\ntimeshifting. See Timeshift buffering.\nGStreamer can provide the application with progress reports about the\ncurrent buffering state as well as let the application decide on how to\nbuffer and when the buffering stops.\nIn the most simple case, the application has to listen for BUFFERING\nmessages on the bus. If the percent indicator inside the BUFFERING\nmessage is smaller than 100, the pipeline is buffering. When a message\nis received with 100 percent, buffering is complete. In the buffering\nstate, the application should keep the pipeline in the PAUSED state.\nWhen buffering completes, it can put the pipeline (back) in the PLAYING\nstate.\nWhat follows is an example of how the message handler could deal with\nthe BUFFERING messages. We will see more advanced methods in Buffering\nstrategies.\n\n\nBuffering up to a specific amount of data, in memory, before\nstarting playback so that network fluctuations are minimized. See\nStream buffering.\n\n\nDownload of the network file to a local disk with fast seeking in\nthe downloaded data. This is similar to the quicktime/youtube\nplayers. See Download buffering.\n\n\nCaching of (semi)-live streams to a local, on disk, ringbuffer with\nseeking in the cached area. This is similar to tivo-like\ntimeshifting. See Timeshift buffering.\n\n\n"});