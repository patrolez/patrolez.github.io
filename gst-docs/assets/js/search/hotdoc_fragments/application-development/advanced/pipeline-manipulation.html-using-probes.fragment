fragment_downloaded_cb({"url":"application-development/advanced/pipeline-manipulation.html#using-probes","fragment":"Using probes\nProbing is best envisioned as having access to a pad listener. Technically, a\nprobe is nothing more than a callback that can be attached to a pad using\ngst_pad_add_probe (). Conversely, you can use gst_pad_remove_probe () to\nremove the callback. While attached, the probe notifies you of any activity\non the pad. You can define what kind of notifications you are interested in when\nyou add the probe.\nProbe types:\nA buffer is pushed or pulled. You want to specify the\nGST_PAD_PROBE_TYPE_BUFFER when registering the probe. Because\nthe pad can be scheduled in different ways. It is also possible to\nspecify in what scheduling mode you are interested with the optional\nGST_PAD_PROBE_TYPE_PUSH and GST_PAD_PROBE_TYPE_PULL flags.\nYou can use this probe to inspect, modify or drop the buffer. See\nData probes.\nA buffer list is pushed. Use the GST_PAD_PROBE_TYPE_BUFFER_LIST\nwhen registering the probe.\nAn event travels over a pad. Use the\nGST_PAD_PROBE_TYPE_EVENT_DOWNSTREAM and\nGST_PAD_PROBE_TYPE_EVENT_UPSTREAM flags to select downstream\nand upstream events. There is also a convenience\nGST_PAD_PROBE_TYPE_EVENT_BOTH to be notified of events going\nin both directions. By default, flush events do not cause\na notification. You need to explicitly enable\nGST_PAD_PROBE_TYPE_EVENT_FLUSH to receive callbacks from\nflushing events. Events are always only notified in push mode.\nYou can use this type of probe to inspect, modify or drop the event.\nA query travels over a pad. Use the\nGST_PAD_PROBE_TYPE_QUERY_DOWNSTREAM and\nGST_PAD_PROBE_TYPE_QUERY_UPSTREAM flags to select downstream\nand upstream queries. The convenience\nGST_PAD_PROBE_TYPE_QUERY_BOTH can also be used to select both\ndirections. Query probes are notified twice: when the query\ntravels upstream/downstream and when the query result is\nreturned. You can select in what stage the callback will be called\nwith the GST_PAD_PROBE_TYPE_PUSH and\nGST_PAD_PROBE_TYPE_PULL, respectively when the query is\nperformed and when the query result is returned.\nYou can use a query probe to inspect or modify queries, or even to answer\nthem in the probe callback. To answer a query you place the result value\nin the query and return GST_PAD_PROBE_DROP from the callback.\nIn addition to notifying you of dataflow, you can also ask the probe\nto block the dataflow when the callback returns. This is called a\nblocking probe and is activated by specifying the\nGST_PAD_PROBE_TYPE_BLOCK flag. You can use this flag with the\nother flags to only block dataflow on selected activity. A pad\nbecomes unblocked again if you remove the probe or when you return\nGST_PAD_PROBE_REMOVE from the callback. You can let only the\ncurrently blocked item pass by returning GST_PAD_PROBE_PASS from\nthe callback, it will block again on the next item.\nBlocking probes are used to temporarily block pads because they are\nunlinked or because you are going to unlink them. If the dataflow is\nnot blocked, the pipeline would go into an error state if data is\npushed on an unlinked pad. We will see how to use blocking probes to\npartially preroll a pipeline. See also Play a section of a media\nfile.\nBe notified when no activity is happening on a pad. You install this\nprobe with the GST_PAD_PROBE_TYPE_IDLE flag. You can specify\nGST_PAD_PROBE_TYPE_PUSH and/or GST_PAD_PROBE_TYPE_PULL to\nonly be notified depending on the pad scheduling mode. The IDLE\nprobe is also a blocking probe in that it will not let any data pass\non the pad for as long as the IDLE probe is installed.\nYou can use idle probes to dynamically relink a pad. We will see how\nto use idle probes to replace an element in the pipeline. See also\nDynamically changing the\npipeline.\n\n\nA buffer is pushed or pulled. You want to specify the\nGST_PAD_PROBE_TYPE_BUFFER when registering the probe. Because\nthe pad can be scheduled in different ways. It is also possible to\nspecify in what scheduling mode you are interested with the optional\nGST_PAD_PROBE_TYPE_PUSH and GST_PAD_PROBE_TYPE_PULL flags.\nYou can use this probe to inspect, modify or drop the buffer. See\nData probes.\n\n\nA buffer list is pushed. Use the GST_PAD_PROBE_TYPE_BUFFER_LIST\nwhen registering the probe.\n\n\nAn event travels over a pad. Use the\nGST_PAD_PROBE_TYPE_EVENT_DOWNSTREAM and\nGST_PAD_PROBE_TYPE_EVENT_UPSTREAM flags to select downstream\nand upstream events. There is also a convenience\nGST_PAD_PROBE_TYPE_EVENT_BOTH to be notified of events going\nin both directions. By default, flush events do not cause\na notification. You need to explicitly enable\nGST_PAD_PROBE_TYPE_EVENT_FLUSH to receive callbacks from\nflushing events. Events are always only notified in push mode.\nYou can use this type of probe to inspect, modify or drop the event.\n\n\nA query travels over a pad. Use the\nGST_PAD_PROBE_TYPE_QUERY_DOWNSTREAM and\nGST_PAD_PROBE_TYPE_QUERY_UPSTREAM flags to select downstream\nand upstream queries. The convenience\nGST_PAD_PROBE_TYPE_QUERY_BOTH can also be used to select both\ndirections. Query probes are notified twice: when the query\ntravels upstream/downstream and when the query result is\nreturned. You can select in what stage the callback will be called\nwith the GST_PAD_PROBE_TYPE_PUSH and\nGST_PAD_PROBE_TYPE_PULL, respectively when the query is\nperformed and when the query result is returned.\nYou can use a query probe to inspect or modify queries, or even to answer\nthem in the probe callback. To answer a query you place the result value\nin the query and return GST_PAD_PROBE_DROP from the callback.\n\n\nIn addition to notifying you of dataflow, you can also ask the probe\nto block the dataflow when the callback returns. This is called a\nblocking probe and is activated by specifying the\nGST_PAD_PROBE_TYPE_BLOCK flag. You can use this flag with the\nother flags to only block dataflow on selected activity. A pad\nbecomes unblocked again if you remove the probe or when you return\nGST_PAD_PROBE_REMOVE from the callback. You can let only the\ncurrently blocked item pass by returning GST_PAD_PROBE_PASS from\nthe callback, it will block again on the next item.\nBlocking probes are used to temporarily block pads because they are\nunlinked or because you are going to unlink them. If the dataflow is\nnot blocked, the pipeline would go into an error state if data is\npushed on an unlinked pad. We will see how to use blocking probes to\npartially preroll a pipeline. See also Play a section of a media\nfile.\n\n\nBe notified when no activity is happening on a pad. You install this\nprobe with the GST_PAD_PROBE_TYPE_IDLE flag. You can specify\nGST_PAD_PROBE_TYPE_PUSH and/or GST_PAD_PROBE_TYPE_PULL to\nonly be notified depending on the pad scheduling mode. The IDLE\nprobe is also a blocking probe in that it will not let any data pass\non the pad for as long as the IDLE probe is installed.\nYou can use idle probes to dynamically relink a pad. We will see how\nto use idle probes to replace an element in the pipeline. See also\nDynamically changing the\npipeline.\n\n\n"});