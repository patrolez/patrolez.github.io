fragment_downloaded_cb({"url":"application-development/advanced/autoplugging.html#media-types-as-a-way-to-identify-streams","fragment":"Media types as a way to identify streams\nWe have previously introduced the concept of capabilities as a way for\nelements (or, rather, pads) to agree on a media type when streaming data\nfrom one element to the next (see Capabilities of a pad). We have\nexplained that a capability is a combination of a media type and a set of\nproperties. For most container formats (those are the files that you will find\non your hard disk; Ogg, for example, is a container format), no properties are\nneeded to describe the stream. Only a media type is needed. A full list\nof media types and accompanying properties can be found in the Plugin\nWriter's Guide.\nAn element must associate a media type to its source and sink pads when\nit is loaded into the system. GStreamer knows about the different\nelements and what type of data they expect and emit through the\nGStreamer registry. This allows for very dynamic and extensible element\ncreation as we will see.\nIn Your first application, we've learned to\nbuild a music player for Ogg/Vorbis files. Let's look at the media types\nassociated with each pad in this pipeline. The Hello world pipeline\nwith media types shows what\nmedia type belongs to each pad in this pipeline.\n\nNow that we have an idea how GStreamer identifies known media streams,\nwe can look at methods GStreamer uses to setup pipelines for media\nhandling and for media type detection.\n"});