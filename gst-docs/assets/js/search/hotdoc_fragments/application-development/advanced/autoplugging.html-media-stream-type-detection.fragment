fragment_downloaded_cb({"url":"application-development/advanced/autoplugging.html#media-stream-type-detection","fragment":"Media stream type detection\nUsually, when loading a media stream, the type of the stream is not\nknown. This means that before we can choose a pipeline to decode the\nstream, we first need to detect the stream type. GStreamer uses the\nconcept of typefinding for this. Typefinding is a normal part of a\npipeline, it will read data for as long as the type of a stream is\nunknown. During this period, it will provide data to all plugins that\nimplement a typefinder. When one of the typefinders recognizes the\nstream, the typefind element will emit a signal and act as a passthrough\nmodule from that point on. If no type was found, it will emit an error\nand further media processing will stop.\nOnce the typefind element has found a type, the application can use this\nto plug together a pipeline to decode the media stream. This will be\ndiscussed in the next section.\nPlugins in GStreamer can, as mentioned before, implement typefinder\nfunctionality. A plugin implementing this functionality will submit a\nmedia type, optionally a set of file extensions commonly used for this\nmedia type, and a typefind function. Once this typefind function inside\nthe plugin is called, the plugin will see if the data in this media\nstream matches a specific pattern that marks the media type identified\nby that media type. If it does, it will notify the typefind element of\nthis fact, telling which mediatype was recognized and how certain we are\nthat this stream is indeed that mediatype. Once this run has been\ncompleted for all plugins implementing a typefind functionality, the\ntypefind element will tell the application what kind of media stream it\nthinks to have recognized.\nThe following code should explain how to use the typefind element. It\nwill print the detected media type, or tell that the media type was not\nfound. The next section will introduce more useful behaviours, such as\nplugging together a decoding pipeline.\nOnce a media type has been detected, you can plug an element (e.g. a\ndemuxer or decoder) to the source pad of the typefind element, and\ndecoding of the media stream will start right after.\n"});