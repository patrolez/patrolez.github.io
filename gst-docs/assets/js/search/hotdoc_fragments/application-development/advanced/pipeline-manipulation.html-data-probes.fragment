fragment_downloaded_cb({"url":"application-development/advanced/pipeline-manipulation.html#data-probes","fragment":"Data probes\nData probes notify you when there is data passing on a pad. Pass\nGST_PAD_PROBE_TYPE_BUFFER and/or GST_PAD_PROBE_TYPE_BUFFER_LIST to\ngst_pad_add_probe () for creating this kind of probe. Most common buffer\noperations elements can do in _chain () functions, can be done in probe\ncallbacks.\nData probes run in the pipeline's streaming thread context, so callbacks\nshould try to avoid blocking and generally, avoid doing weird stuff. Doing so\ncould have a negative impact on the pipeline's performance or, in case of bugs,\nlead to deadlocks or crashes. More precisely, one should usually avoid calling\nGUI-related functions from within a probe callback, nor try to change the state\nof the pipeline. An application may post custom messages on the pipeline's bus\nto communicate with the main application thread and have it do things like stop\nthe pipeline.\nThe following is an example on using data probes. Compare this program's output\nwith that of gst-launch-1.0 videotestsrc ! xvimagesink if you are not\nsure what to look for:\nStrictly speaking, a pad probe callback is only allowed to modify the\nbuffer content if the buffer is writable. Whether this is the case or\nnot depends a lot on the pipeline and the elements involved. Often\nenough, this is the case, but sometimes it is not, and if it is not then\nunexpected modification of the data or metadata can introduce bugs that\nare very hard to debug and track down. You can check if a buffer is\nwritable with gst_buffer_is_writable (). Since you can pass back a\ndifferent buffer than the one passed in, it is a good idea to make the\nbuffer writable in the callback function with gst_buffer_make_writable ().\nPad probes are best suited for looking at data as it passes through the\npipeline. If you need to modify data, you should rather write your own\nGStreamer element. Base classes like GstAudioFilter, GstVideoFilter or\nGstBaseTransform make this fairly easy.\nIf you just want to inspect buffers as they pass through the pipeline,\nyou don't even need to set up pad probes. You could also just insert an\nidentity element into the pipeline and connect to its \"handoff\" signal.\nThe identity element also provides a few useful debugging tools like the\ndump and last-message properties; the latter is enabled by\npassing the '-v' switch to gst-launch and setting the silent property\non the identity to FALSE.\n"});