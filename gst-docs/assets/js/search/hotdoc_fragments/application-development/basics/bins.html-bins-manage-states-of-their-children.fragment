fragment_downloaded_cb({"url":"application-development/basics/bins.html#bins-manage-states-of-their-children","fragment":"Bins manage states of their children\nBins manage the state of all elements contained in them. If you set a\nbin (or a pipeline, which is a special top-level type of bin) to a\ncertain target state using gst_element_set_state (), it will make sure\nall elements contained within it will also be set to this state. This\nmeans it's usually only necessary to set the state of the top-level\npipeline to start up the pipeline or shut it down.\nThe bin will perform the state changes on all its children from the sink\nelement to the source element. This ensures that the downstream element\nis ready to receive data when the upstream element is brought to PAUSED\nor PLAYING. Similarly when shutting down, the sink elements will be set\nto READY or NULL first, which will cause the upstream elements to\nreceive a FLUSHING error and stop the streaming threads before the\nelements are set to the READY or NULL state.\nNote, however, that if elements are added to a bin or pipeline that's\nalready running, e.g. from within a \"pad-added\" signal callback, its\nstate will not automatically be brought in line with the current state\nor target state of the bin or pipeline it was added to. Instead, you\nneed to set it to the desired target state yourself using\ngst_element_set_state () or gst_element_sync_state_with_parent ()\nwhen adding elements to an already-running pipeline.\n"});