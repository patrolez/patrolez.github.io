fragment_downloaded_cb({"url":"application-development/basics/elements.html#creating-a-gstelement","fragment":"Creating a GstElement\n\nThe simplest way to create an element is to use\ngst_element_factory_make ().\nThis function takes a factory name and an element name for the newly\ncreated element. The name of the element is something you can use later\non to look up the element in a bin, for example. The name will also be\nused in debug output. You can pass NULL as the name argument to get a\nunique, default name.\nWhen you don't need the element anymore, you need to unref it using\ngst_object_unref ().\nThis decreases the reference count for the element by 1. An element has\na refcount of 1 when it gets created. An element gets destroyed\ncompletely when the refcount is decreased to 0.\nThe following example [1] shows how to create an element named\nsource from the element factory named fakesrc. It checks if the\ncreation succeeded. After checking, it unrefs the element.\ngst_element_factory_make is actually a shorthand for a combination of\ntwo functions. A\nGstElement\nobject is created from a factory. To create the element, you have to get\naccess to a\nGstElementFactory\nobject using a unique factory name. This is done with\ngst_element_factory_find ().\nThe following code fragment is used to get a factory that can be used to\ncreate the fakesrc element, a fake data source. The function\ngst_element_factory_create ()\nwill use the element factory to create an element with the given name.\n"});