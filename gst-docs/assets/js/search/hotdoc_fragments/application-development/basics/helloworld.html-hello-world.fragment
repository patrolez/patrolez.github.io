fragment_downloaded_cb({"url":"application-development/basics/helloworld.html#hello-world","fragment":"Hello world\nWe're going to create a simple first application, a simple Ogg/Vorbis\ncommand-line audio player. For this, we will use only standard GStreamer\ncomponents. The player will read a file specified on the command-line.\nLet's get started!\nWe've learned, in Initializing GStreamer, that the\nfirst thing to do in your application is to initialize GStreamer by\ncalling gst_init (). Also, make sure that the application includes\ngst/gst.h so all function names and objects are properly defined. Use\n#include <gst/gst.h> to do that.\nNext, you'll want to create the different elements using\ngst_element_factory_make (). For an Ogg/Vorbis audio player, we'll\nneed a source element that reads files from a disk. GStreamer includes\nthis element under the name “filesrc”. Next, we'll need something to\nparse the file and decode it into raw audio. GStreamer has two elements\nfor this: the first parses Ogg streams into elementary streams (video,\naudio) and is called “oggdemux”. The second is a Vorbis audio decoder,\nit's conveniently called “vorbisdec”. Since “oggdemux” creates dynamic\npads for each elementary stream, you'll need to set a “pad-added” event\nhandler on the “oggdemux” element, like you've learned in Dynamic (or\nsometimes) pads, to link the\nOgg demuxer and the Vorbis decoder elements together. At last, we'll\nalso need an audio output element, we will use “autoaudiosink”, which\nautomatically detects your audio device.\nThe last thing left to do is to add all elements into a container\nelement, a GstPipeline, and wait until we've played the whole song.\nWe've previously learned how to add elements to a container bin in\nBins, and we've learned about element states in\nElement States. We will also attach a message handler to\nthe pipeline bus so we can retrieve errors and detect the end-of-stream.\nLet's now add all the code together to get our very first audio player:\nWe now have created a complete pipeline. We can visualise the pipeline\nas follows:\n\n"});