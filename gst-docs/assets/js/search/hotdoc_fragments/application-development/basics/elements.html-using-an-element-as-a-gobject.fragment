fragment_downloaded_cb({"url":"application-development/basics/elements.html#using-an-element-as-a-gobject","fragment":"Using an element as a GObject\n\nA\nGstElement\ncan have several properties which are implemented using standard\nGObject properties. The usual GObject methods to query, set and get\nproperty values and GParamSpecs are therefore supported.\nEvery GstElement inherits at least one property from its parent\nGstObject: the \"name\" property. This is the name you provide to the\nfunctions gst_element_factory_make () or gst_element_factory_create (). You can get and set this property using the functions\ngst_object_set_name and gst_object_get_name or use the GObject\nproperty mechanism as shown below.\nMost plugins provide additional properties to provide more information\nabout their configuration or to configure the element. gst-inspect is\na useful tool to query the properties of a particular element, it will\nalso use property introspection to give a short explanation about the\nfunction of the property and about the parameter types and ranges it\nsupports. See gst-inspect in\nthe appendix for details about gst-inspect.\nFor more information about GObject properties we recommend you read\nthe GObject\nmanual and an\nintroduction to The Glib Object\nsystem.\nA\nGstElement\nalso provides various GObject signals that can be used as a flexible\ncallback mechanism. Here, too, you can use gst-inspect to see which\nsignals a specific element supports. Together, signals and properties\nare the most basic way in which elements and applications interact.\n"});