fragment_downloaded_cb({"url":"application-development/basics/pads.html#dynamic-or-sometimes-pads","fragment":"Dynamic (or sometimes) pads\nSome elements might not have all of their pads when the element is\ncreated. This can happen, for example, with an Ogg demuxer element. The\nelement will read the Ogg stream and create dynamic pads for each\ncontained elementary stream (vorbis, theora) when it detects such a\nstream in the Ogg stream. Likewise, it will delete the pad when the\nstream ends. This principle is very useful for demuxer elements, for\nexample.\nRunning gst-inspect-1.0 oggdemux will show that the element has only one\npad: a sink pad called 'sink'. The other pads are “dormant”. You can see\nthis in the pad template because there is an “Availability: Sometimes”\nproperty. Depending on the type of Ogg file you play, the pads will be\ncreated. We will see that this is very important when you are going to\ncreate dynamic pipelines. You can attach a signal handler to an element\nto inform you when the element has created a new pad from one of its\n“sometimes” pad templates. The following piece of code is an example\nof how to do this:\nIt is not uncommon to add elements to the pipeline only from within the\n\"pad-added\" callback. If you do this, don't forget to set the state of\nthe newly-added elements to the target state of the pipeline using\ngst_element_set_state () or gst_element_sync_state_with_parent ().\n"});