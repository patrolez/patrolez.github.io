fragment_downloaded_cb({"url":"application-development/basics/data.html#buffers","fragment":"Buffers\nBuffers contain the data that will flow through the pipeline you have\ncreated. A source element will typically create a new buffer and pass it\nthrough a pad to the next element in the chain. When using the GStreamer\ninfrastructure to create a media pipeline you will not have to deal with\nbuffers yourself; the elements will do that for you.\nA buffer consists, amongst others, of:\nPointers to memory objects. Memory objects encapsulate a region in\nthe memory.\nA timestamp for the buffer.\nA refcount that indicates how many elements are using this buffer.\nThis refcount will be used to destroy the buffer when no element has\na reference to it.\nBuffer flags.\nThe simple case is that a buffer is created, memory allocated, data put\nin it, and passed to the next element. That element reads the data, does\nsomething (like creating a new buffer and decoding into it), and\nunreferences the buffer. This causes the data to be free'ed and the\nbuffer to be destroyed. A typical video or audio decoder works like\nthis.\nThere are more complex scenarios, though. Elements can modify buffers\nin-place, i.e. without allocating a new one. Elements can also write to\nhardware memory (such as from video-capture sources) or memory allocated\nfrom the X-server (using XShm). Buffers can be read-only, and so on.\n\n\nPointers to memory objects. Memory objects encapsulate a region in\nthe memory.\n\n\nA timestamp for the buffer.\n\n\nA refcount that indicates how many elements are using this buffer.\nThis refcount will be used to destroy the buffer when no element has\na reference to it.\n\n\nBuffer flags.\n\n\n"});