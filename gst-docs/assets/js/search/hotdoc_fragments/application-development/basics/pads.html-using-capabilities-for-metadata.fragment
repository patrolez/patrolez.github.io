fragment_downloaded_cb({"url":"application-development/basics/pads.html#using-capabilities-for-metadata","fragment":"Using capabilities for metadata\nA pad can have a set (i.e. one or more) of capabilities attached to it.\nCapabilities (GstCaps) are represented as an array of one or more\nGstStructures, and each GstStructure is an array of fields where\neach field consists of a field name string (e.g. \"width\") and a typed\nvalue (e.g. G_TYPE_INT or GST_TYPE_INT_RANGE).\nNote that there is a distinct difference between the possible\ncapabilities of a pad (ie. usually what you find as caps of pad\ntemplates as they are shown in gst-inspect), the allowed caps of a pad\n(can be the same as the pad's template caps or a subset of them,\ndepending on the possible caps of the peer pad) and lastly negotiated\ncaps (these describe the exact format of a stream or buffer and contain\nexactly one structure and have no variable bits like ranges or lists,\nie. they are fixed caps).\nYou can get values of properties in a set of capabilities by querying\nindividual properties of one structure. You can get a structure from a\ncaps using gst_caps_get_structure () and the number of structures in a\nGstCaps using gst_caps_get_size ().\nCaps are called simple caps when they contain only one structure, and\nfixed caps when they contain only one structure and have no variable\nfield types (like ranges or lists of possible values). Two other special\ntypes of caps are ANY caps and empty caps.\nHere is an example of how to extract the width and height from a set of\nfixed video caps:\n"});