fragment_downloaded_cb({"url":"rtplib/gstrtpbuffer.html#gst_rtp_buffer_allocate_data","fragment":"\n\tgst_rtp_buffer_allocate_data\n\n\n\tGstRtp.RTPBuffer.prototype.allocate_data\n\n\n\tGstRtp.RTPBuffer.allocate_data\n\nAllocate enough data in buffer to hold an RTP packet with csrc_count CSRCs,\na payload length of payload_len and padding of pad_len.\nbuffer must be writable and all previous memory in buffer will be freed.\nIf pad_len is >0, the padding bit will be set. All other RTP header fields\nwill be set to 0/FALSE.\nParameters:\na GstBuffer\nthe length of the payload\nthe amount of padding\nthe number of CSRC entries\nAllocate enough data in buffer to hold an RTP packet with csrc_count CSRCs,\na payload length of payload_len and padding of pad_len.\nbuffer must be writable and all previous memory in buffer will be freed.\nIf pad_len is >0, the padding bit will be set. All other RTP header fields\nwill be set to 0/FALSE.\nParameters:\na Gst.Buffer\nthe length of the payload\nthe amount of padding\nthe number of CSRC entries\nAllocate enough data in buffer to hold an RTP packet with csrc_count CSRCs,\na payload length of payload_len and padding of pad_len.\nbuffer must be writable and all previous memory in buffer will be freed.\nIf pad_len is >0, the padding bit will be set. All other RTP header fields\nwill be set to 0/FALSE.\nParameters:\na Gst.Buffer\nthe length of the payload\nthe amount of padding\nthe number of CSRC entries\n"});