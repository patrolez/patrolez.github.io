fragment_downloaded_cb({"url":"rtplib/gstrtpbuffer.html#gst_rtp_buffer_new_allocate_len","fragment":"\n\tgst_rtp_buffer_new_allocate_len\n\n\n\tGstRtp.RTPBuffer.prototype.new_allocate_len\n\n\n\tGstRtp.RTPBuffer.new_allocate_len\n\nCreate a new GstBuffer that can hold an RTP packet that is exactly\npacket_len long. The length of the payload depends on pad_len and\ncsrc_count and can be calculated with gst_rtp_buffer_calc_payload_len.\nAll RTP header fields will be set to 0/FALSE.\nParameters:\nthe total length of the packet\nthe amount of padding\nthe number of CSRC entries\nA newly allocated buffer that can hold an RTP packet of packet_len.\nCreate a new Gst.Buffer that can hold an RTP packet that is exactly\npacket_len long. The length of the payload depends on pad_len and\ncsrc_count and can be calculated with GstRtp.RTPBuffer.prototype.calc_payload_len.\nAll RTP header fields will be set to 0/FALSE.\nParameters:\nthe total length of the packet\nthe amount of padding\nthe number of CSRC entries\nA newly allocated buffer that can hold an RTP packet of packet_len.\nCreate a new Gst.Buffer that can hold an RTP packet that is exactly\npacket_len long. The length of the payload depends on pad_len and\ncsrc_count and can be calculated with GstRtp.RTPBuffer.calc_payload_len.\nAll RTP header fields will be set to 0/FALSE.\nParameters:\nthe total length of the packet\nthe amount of padding\nthe number of CSRC entries\nA newly allocated buffer that can hold an RTP packet of packet_len.\n"});