fragment_downloaded_cb({"url":"rtplib/gstrtpbaseaudiopayload.html#gst_rtp_base_audio_payload_flush","fragment":"\n\tgst_rtp_base_audio_payload_flush\n\n\n\tGstRtp.RTPBaseAudioPayload.prototype.flush\n\n\n\tGstRtp.RTPBaseAudioPayload.flush\n\nCreate an RTP buffer and store payload_len bytes of the adapter as the\npayload. Set the timestamp on the new buffer to timestamp before pushing\nthe buffer downstream.\nIf payload_len is -1, all pending bytes will be flushed. If timestamp is\n-1, the timestamp will be calculated automatically.\nParameters:\na GstRTPBasePayload\nlength of payload\na GstClockTime\na GstFlowReturn\nCreate an RTP buffer and store payload_len bytes of the adapter as the\npayload. Set the timestamp on the new buffer to timestamp before pushing\nthe buffer downstream.\nIf payload_len is -1, all pending bytes will be flushed. If timestamp is\n-1, the timestamp will be calculated automatically.\nParameters:\na GstRtp.RTPBasePayload\nlength of payload\na Number\na Gst.FlowReturn\nCreate an RTP buffer and store payload_len bytes of the adapter as the\npayload. Set the timestamp on the new buffer to timestamp before pushing\nthe buffer downstream.\nIf payload_len is -1, all pending bytes will be flushed. If timestamp is\n-1, the timestamp will be calculated automatically.\nParameters:\na GstRtp.RTPBasePayload\nlength of payload\na int\na Gst.FlowReturn\n"});