fragment_downloaded_cb({"url":"rtplib/gstrtpbasedepayload.html#GstRTPBaseDepayloadClass::process_rtp_packet","fragment":"\n\tprocess_rtp_packet\n\n\n\tvfunc_process_rtp_packet\n\n\n\tdo_process_rtp_packet\n\nSame as the process virtual function, but slightly more\nefficient, since it is passed the rtp buffer structure that has already\nbeen mapped (with GST_MAP_READ) by the base class and thus does not have\nto be mapped again by the subclass. Can be used by the subclass to process\nincoming rtp packets. If the subclass returns a buffer without a valid\ntimestamp, the timestamp of the input buffer will be applied to the result\nbuffer and the output buffer will be pushed out. If this function returns\nNULL, nothing is pushed out. Since: 1.6.\nParameters:\nSame as the process virtual function, but slightly more\nefficient, since it is passed the rtp buffer structure that has already\nbeen mapped (with GST_MAP_READ) by the base class and thus does not have\nto be mapped again by the subclass. Can be used by the subclass to process\nincoming rtp packets. If the subclass returns a buffer without a valid\ntimestamp, the timestamp of the input buffer will be applied to the result\nbuffer and the output buffer will be pushed out. If this function returns\nnull, nothing is pushed out. Since: 1.6.\nParameters:\nSame as the process virtual function, but slightly more\nefficient, since it is passed the rtp buffer structure that has already\nbeen mapped (with GST_MAP_READ) by the base class and thus does not have\nto be mapped again by the subclass. Can be used by the subclass to process\nincoming rtp packets. If the subclass returns a buffer without a valid\ntimestamp, the timestamp of the input buffer will be applied to the result\nbuffer and the output buffer will be pushed out. If this function returns\nNone, nothing is pushed out. Since: 1.6.\nParameters:\n"});