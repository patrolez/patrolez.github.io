fragment_downloaded_cb({"url":"rtplib/gstrtpbasepayload.html#gst_rtp_base_payload_allocate_output_buffer","fragment":"\n\tgst_rtp_base_payload_allocate_output_buffer\n\n\n\tGstRtp.RTPBasePayload.prototype.allocate_output_buffer\n\n\n\tGstRtp.RTPBasePayload.allocate_output_buffer\n\nAllocate a new GstBuffer with enough data to hold an RTP packet with\nminimum csrc_count CSRCs, a payload length of payload_len and padding of\npad_len. If payload has source-info TRUE additional\nCSRCs may be allocated and filled with RTP source information.\nParameters:\na GstRTPBasePayload\nthe length of the payload\nthe amount of padding\nthe minimum number of CSRC entries\nA newly allocated buffer that can hold an RTP packet with given\nparameters.\n\n\tSince\t\t\t: 1.16\n\t\t\nAllocate a new Gst.Buffer with enough data to hold an RTP packet with\nminimum csrc_count CSRCs, a payload length of payload_len and padding of\npad_len. If payload has source-info true additional\nCSRCs may be allocated and filled with RTP source information.\nParameters:\na GstRtp.RTPBasePayload\nthe length of the payload\nthe amount of padding\nthe minimum number of CSRC entries\nA newly allocated buffer that can hold an RTP packet with given\nparameters.\n\n\tSince\t\t\t: 1.16\n\t\t\nAllocate a new Gst.Buffer with enough data to hold an RTP packet with\nminimum csrc_count CSRCs, a payload length of payload_len and padding of\npad_len. If payload has source_info True additional\nCSRCs may be allocated and filled with RTP source information.\nParameters:\na GstRtp.RTPBasePayload\nthe length of the payload\nthe amount of padding\nthe minimum number of CSRC entries\nA newly allocated buffer that can hold an RTP packet with given\nparameters.\n\n\tSince\t\t\t: 1.16\n\t\t\n"});