fragment_downloaded_cb({"url":"rtplib/gstrtcpbuffer.html#gst_rtcp_packet_xr_get_rle_info","fragment":"\n\tgst_rtcp_packet_xr_get_rle_info\n\n\n\tGstRtp.RTCPPacket.prototype.xr_get_rle_info\n\n\n\tGstRtp.RTCPPacket.xr_get_rle_info\n\nParse the extended report block for Loss RLE and Duplicated LRE block type.\nParameters:\na valid XR GstRTCPPacket which is Loss RLE or Duplicate RLE report.\nthe SSRC of the RTP data packet source being reported upon by this report block.\nthe amount of thinning performed on the sequence number space.\nthe first sequence number that this block reports on.\nthe last sequence number that this block reports on plus one.\nthe number of chunks calculated by block length.\nTRUE if the report block is correctly parsed.\n\n\tSince\t\t\t: 1.16\n\t\t\nParse the extended report block for Loss RLE and Duplicated LRE block type.\nParameters:\na valid XR GstRtp.RTCPPacket which is Loss RLE or Duplicate RLE report.\nthe SSRC of the RTP data packet source being reported upon by this report block.\nthe amount of thinning performed on the sequence number space.\nthe first sequence number that this block reports on.\nthe last sequence number that this block reports on plus one.\nthe number of chunks calculated by block length.\ntrue if the report block is correctly parsed.\n\n\tSince\t\t\t: 1.16\n\t\t\nParse the extended report block for Loss RLE and Duplicated LRE block type.\nParameters:\na valid XR GstRtp.RTCPPacket which is Loss RLE or Duplicate RLE report.\nthe SSRC of the RTP data packet source being reported upon by this report block.\nthe amount of thinning performed on the sequence number space.\nthe first sequence number that this block reports on.\nthe last sequence number that this block reports on plus one.\nthe number of chunks calculated by block length.\nTrue if the report block is correctly parsed.\n\n\tSince\t\t\t: 1.16\n\t\t\n"});