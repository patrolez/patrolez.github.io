fragment_downloaded_cb({"url":"rtplib/gstrtpbasepayload.html#gst_rtp_base_payload_set_options","fragment":"\n\tgst_rtp_base_payload_set_options\n\n\n\tGstRtp.RTPBasePayload.prototype.set_options\n\n\n\tGstRtp.RTPBasePayload.set_options\n\nSet the rtp options of the payloader. These options will be set in the caps\nof the payloader. Subclasses must call this method before calling\ngst_rtp_base_payload_push or gst_rtp_base_payload_set_outcaps.\nParameters:\na GstRTPBasePayload\nthe media type (typically \"audio\" or \"video\")\nif the payload type is dynamic\nthe encoding name\nthe clock rate of the media\nSet the rtp options of the payloader. These options will be set in the caps\nof the payloader. Subclasses must call this method before calling\nGstRtp.RTPBasePayload.prototype.push or gst_rtp_base_payload_set_outcaps (not introspectable).\nParameters:\na GstRtp.RTPBasePayload\nthe media type (typically \"audio\" or \"video\")\nif the payload type is dynamic\nthe encoding name\nthe clock rate of the media\nSet the rtp options of the payloader. These options will be set in the caps\nof the payloader. Subclasses must call this method before calling\nGstRtp.RTPBasePayload.push or gst_rtp_base_payload_set_outcaps (not introspectable).\nParameters:\na GstRtp.RTPBasePayload\nthe media type (typically \"audio\" or \"video\")\nif the payload type is dynamic\nthe encoding name\nthe clock rate of the media\n"});