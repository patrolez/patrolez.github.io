fragment_downloaded_cb({"url":"contribute/index.html#coding-style","fragment":"Coding Style\nTry to stick to the GStreamer indentation and coding style. There is a script\ncalled gst-indent which you can run over your .c or .cpp\nfiles if you want your code auto-indented before making the patch. The script\nrequires GNU indent to be installed already. Please do not run gst-indent on\nheader files, our header file indentation is free-form. If you build GStreamer\nfrom git, a local commit hook will be installed that checks if your commit\nconforms to the required style (also using GNU indent).\nDifferent versions of GNU indent may occasionally yield slightly different\nindentations. If that happens, please ignore any indentation changes in\nsections of code that your patch does not touch. You can do that by staging\nchanges selectively via git add -p. You can bypass the local indentation\ncheck hook by using git commit -n, but it will still be checked again later\nwhen you submit your changes through GitLab for merging.\nWe are working on making this less hasslesome.\nCompiler requirements:\nOther style guidelines:\n\nwe are targetting the C99 compiler and preprocesser feature subset\nsupported by gcc 5.4, clang and vs2017. Newer features can be\nused conditionally as long as there is a suitable fallback. This is similar\nto GLib's compiler requirements.\n\n\ndo not use tabs for indentation in new code, not even in freeform header files\ndo not use packed structures for parsing external data, instead use helper\nAPIs such as GstByteReader and GstBitReader for\ndata parsing\nfrom GStreamer 1.20 onwards you may in particular also\n\nuse c++-style // comments\n\ndeclare variables inline (as opposed to only at the beginning of a block)\nuse advanced/nicer struct initialisers\n\n\n\n\nuse c++-style // comments\n\ndeclare variables inline (as opposed to only at the beginning of a block)\nuse advanced/nicer struct initialisers\n\n"});