fragment_downloaded_cb({"url":"contribute/index.html#setting-up-your-branch","fragment":"Setting up your branch\nNext, you make a git branch with one or more commits you want to submit\nfor review and merging. For that you will first need a local branch which\nyou can create with e.g.\nThen you can make your modifications and create a local commit with e.g.\nThis will pop up an editor where you can create your commit message. It should\nlook something like:\nThen exit the editor, and you should have a commit.\nPlease make sure your commits are as terse and precise as possible. Do not\ninclude 'clean-ups' or non-functional changes, since they distract from the\nreal changes and make things harder to review, and also lower the chances that\nthe patch will still apply cleanly to the latest version in git. If you feel\nthere are things to clean up, please submit the clean-ups as a separate patch\nthat does not contain any functional changes. See\nWriting Good Commit Messages for more\ninformation.\nIt's best to run git add or git commit on specific directories or files\ninstead of using git commit -a, as it's too easy to accidentally contaminate\na patch with changes that belong into it with git commit -a, in particular\nchanges to the common submodule.\nYou can check your commit(s) with git show or git log -p or using a GUI\nsuch as gitg or gitk.\nMake sure the author is correctly set to your full name and e-mail address.\nIf you haven't used git before, it would be a good idea to tell it who you are:\nYou can make changes to the last commit using:\ngit commit --amend to fix up the commit message\ngit commit --amend --author='John You <john@you.com>' to fix up the author\ngit add path/to/file1.[ch]; git commit --amend to incorporate fixes\nmade to the files since the last commit (i.e. what shows up in git diff).\nIf you just want to add some of the changes, but not all of them you can\nuse git add -p file.c, then it will ask you for each individual change\nwhether you want to add it or leave it.\nOnce everything looks fine, you can push the branch to your personal fork git\nrepository with:\nYou can use\nfor testing to see what would happen without actually doing anything yet.\nAs before, replace $GITLAB_USERNAME with your actual gitlab username.\nAfter you have pushed the branch to your personal fork you will see a link\non the terminal with which you can create a merge request for the upstream\nrepository. It will look something like this:\nClicking on that link will take you to a page where you can enter a description\nof the changes you are submitting. If your branch contains only one commit, the\ntitle and description will be auto-filled using the commit message.\n\nOn the same page, ensure that these checkboxes are selected and create the\nmerge request:\n\nIf you don't see the link or want to do this later, you can go to the branch\nlist of your personal repository at https://gitlab.freedesktop.org/$GITLAB_USERNAME/gstreamer/branches\nand hit the 'Merge Request' button when ready. This will open a new page where\nyou can select the source project $GITLAB_USERNAME/gstreamer + source branch\nfix-xyz and the target project gstreamer/gstreamer and target branch\nmain. Then you will be able to enter a description of the changes you are\nsubmitting.\n\n\ngit commit --amend to fix up the commit message\n\n\ngit commit --amend --author='John You <john@you.com>' to fix up the author\n\n\ngit add path/to/file1.[ch]; git commit --amend to incorporate fixes\nmade to the files since the last commit (i.e. what shows up in git diff).\nIf you just want to add some of the changes, but not all of them you can\nuse git add -p file.c, then it will ask you for each individual change\nwhether you want to add it or leave it.\n\n\n"});