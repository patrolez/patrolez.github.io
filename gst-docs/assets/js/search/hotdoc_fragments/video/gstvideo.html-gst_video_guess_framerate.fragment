fragment_downloaded_cb({"url":"video/gstvideo.html#gst_video_guess_framerate","fragment":"\n\tgst_video_guess_framerate\n\n\n\tGstVideo.prototype.video_guess_framerate\n\n\n\tGstVideo.video_guess_framerate\n\nGiven the nominal duration of one video frame,\nthis function will check some standard framerates for\na close match (within 0.1%) and return one if possible,\nIt will calculate an arbitrary framerate if no close\nmatch was found, and return FALSE.\nIt returns FALSE if a duration of 0 is passed.\nParameters:\nNominal duration of one frame\nNumerator of the calculated framerate\nDenominator of the calculated framerate\nTRUE if a close \"standard\" framerate was\nrecognised, and FALSE otherwise.\n\n\tSince\t\t\t: 1.6\n\t\t\nGiven the nominal duration of one video frame,\nthis function will check some standard framerates for\na close match (within 0.1%) and return one if possible,\nIt will calculate an arbitrary framerate if no close\nmatch was found, and return false.\nIt returns false if a duration of 0 is passed.\nParameters:\nNominal duration of one frame\nReturns a tuple made of:\ntrue if a close \"standard\" framerate was\nrecognised, and false otherwise.\ntrue if a close \"standard\" framerate was\nrecognised, and false otherwise.\ntrue if a close \"standard\" framerate was\nrecognised, and false otherwise.\n\n\tSince\t\t\t: 1.6\n\t\t\nGiven the nominal duration of one video frame,\nthis function will check some standard framerates for\na close match (within 0.1%) and return one if possible,\nIt will calculate an arbitrary framerate if no close\nmatch was found, and return False.\nIt returns False if a duration of 0 is passed.\nParameters:\nNominal duration of one frame\nReturns a tuple made of:\nTrue if a close \"standard\" framerate was\nrecognised, and False otherwise.\nTrue if a close \"standard\" framerate was\nrecognised, and False otherwise.\nTrue if a close \"standard\" framerate was\nrecognised, and False otherwise.\n\n\tSince\t\t\t: 1.6\n\t\t\n"});