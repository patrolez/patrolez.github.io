fragment_downloaded_cb({"url":"video/gstvideometa.html#GstVideoMeta","fragment":"\n\tGstVideoMeta\n\nMembers\n\n\tGstVideo.VideoMeta\n\nMembers\n\n\tGstVideo.VideoMeta\n\nMembers\nExtra buffer metadata describing image properties\nThis meta can also be used by downstream elements to specifiy their\nbuffer layout requirements for upstream. Upstream should try to\nfit those requirements, if possible, in order to prevent buffer copies.\nThis is done by passing a custom GstStructure to\ngst_query_add_allocation_meta when handling the ALLOCATION query.\nThis structure should be named 'video-meta' and can have the following\nfields:\nSince 1.24 it can be serialized using gst_meta_serialize and\ngst_meta_deserialize.\nparent GstMeta\nthe buffer this metadata belongs to\nadditional video flags\nthe video format\nidentifier of the frame\nthe video width\nthe video height\nthe number of planes in the image\narray of offsets for the planes. This field might not always be\nvalid, it is used by the default implementation of map.\narray of strides for the planes. This field might not always be\nvalid, it is used by the default implementation of map.\nthe paddings and alignment constraints of the video buffer.\nIt is up to the caller of gst_buffer_add_video_meta_full() to set it\nusing gst_video_meta_set_alignment, if they did not it defaults\nto no padding and no alignment. Since: 1.18\nExtra buffer metadata describing image properties\nThis meta can also be used by downstream elements to specifiy their\nbuffer layout requirements for upstream. Upstream should try to\nfit those requirements, if possible, in order to prevent buffer copies.\nThis is done by passing a custom Gst.Structure to\nGst.Query.prototype.add_allocation_meta when handling the ALLOCATION query.\nThis structure should be named 'video-meta' and can have the following\nfields:\nSince 1.24 it can be serialized using Gst.Meta.prototype.serialize and\nGst.prototype.meta_deserialize.\nparent Gst.Meta\nthe buffer this metadata belongs to\nadditional video flags\nthe video format\nidentifier of the frame\nthe video width\nthe video height\nthe number of planes in the image\narray of offsets for the planes. This field might not always be\nvalid, it is used by the default implementation of map.\narray of strides for the planes. This field might not always be\nvalid, it is used by the default implementation of map.\nthe paddings and alignment constraints of the video buffer.\nIt is up to the caller of gst_buffer_add_video_meta_full() to set it\nusing GstVideo.VideoMeta.prototype.set_alignment, if they did not it defaults\nto no padding and no alignment. Since: 1.18\nExtra buffer metadata describing image properties\nThis meta can also be used by downstream elements to specifiy their\nbuffer layout requirements for upstream. Upstream should try to\nfit those requirements, if possible, in order to prevent buffer copies.\nThis is done by passing a custom Gst.Structure to\nGst.Query.add_allocation_meta when handling the ALLOCATION query.\nThis structure should be named 'video-meta' and can have the following\nfields:\nSince 1.24 it can be serialized using Gst.Meta.serialize and\nGst.meta_deserialize.\nparent Gst.Meta\nthe buffer this metadata belongs to\nadditional video flags\nthe video format\nidentifier of the frame\nthe video width\nthe video height\nthe number of planes in the image\narray of offsets for the planes. This field might not always be\nvalid, it is used by the default implementation of map.\narray of strides for the planes. This field might not always be\nvalid, it is used by the default implementation of map.\nthe paddings and alignment constraints of the video buffer.\nIt is up to the caller of gst_buffer_add_video_meta_full() to set it\nusing GstVideo.VideoMeta.set_alignment, if they did not it defaults\nto no padding and no alignment. Since: 1.18\n\npadding-top (uint): extra pixels on the top\npadding-bottom (uint): extra pixels on the bottom\npadding-left (uint): extra pixels on the left side\npadding-right (uint): extra pixels on the right side\nThe padding fields have the same semantic as alignment\nand so represent the paddings requested on produced video buffers.\n\n\npadding-top (uint): extra pixels on the top\npadding-bottom (uint): extra pixels on the bottom\npadding-left (uint): extra pixels on the left side\npadding-right (uint): extra pixels on the right side\nThe padding fields have the same semantic as alignment\nand so represent the paddings requested on produced video buffers.\n\n\npadding-top (uint): extra pixels on the top\npadding-bottom (uint): extra pixels on the bottom\npadding-left (uint): extra pixels on the left side\npadding-right (uint): extra pixels on the right side\nThe padding fields have the same semantic as alignment\nand so represent the paddings requested on produced video buffers.\n\n"});