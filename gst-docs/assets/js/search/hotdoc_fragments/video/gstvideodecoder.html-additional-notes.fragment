fragment_downloaded_cb({"url":"video/gstvideodecoder.html#additional-notes","fragment":"Additional Notes\nSeeking/Flushing\nEnd Of Stream\nThe subclass is responsible for providing pad template caps for\nsource and sink pads. The pads need to be named \"sink\" and \"src\". It also\nneeds to provide information about the output caps, when they are known.\nThis may be when the base class calls the subclass' set_format function,\nthough it might be during decoding, before calling\ngst_video_decoder_finish_frame. This is done via\ngst_video_decoder_set_output_state\nThe subclass is also responsible for providing (presentation) timestamps\n(likely based on corresponding input ones).  If that is not applicable\nor possible, the base class provides limited framerate based interpolation.\nSimilarly, the base class provides some limited (legacy) seeking support\nif specifically requested by the subclass, as full-fledged support\nshould rather be left to upstream demuxer, parser or alike.  This simple\napproach caters for seeking and duration reporting using estimated input\nbitrates. To enable it, a subclass should call\ngst_video_decoder_set_estimate_rate to enable handling of incoming\nbyte-streams.\nThe base class provides some support for reverse playback, in particular\nin case incoming data is not packetized or upstream does not provide\nfragments on keyframe boundaries.  However, the subclass should then be\nprepared for the parsing and frame processing stage to occur separately\n(in normal forward processing, the latter immediately follows the former),\nThe subclass also needs to ensure the parsing stage properly marks\nkeyframes, unless it knows the upstream elements will do so properly for\nincoming data.\nThe bare minimum that a functional subclass needs to implement is:\nProvide pad templates\nInform the base class of output caps via\ngst_video_decoder_set_output_state\nParse input data, if it is not considered packetized from upstream\nData will be provided to parse which should invoke\ngst_video_decoder_add_to_frame and gst_video_decoder_have_frame to\nseparate the data belonging to each video frame.\nAccept data in handle_frame and provide decoded results to\ngst_video_decoder_finish_frame, or call gst_video_decoder_drop_frame.\n\n\nSeeking/Flushing\n\nWhen the pipeline is seeked or otherwise flushed, the subclass is\ninformed via a call to its reset callback, with the hard parameter\nset to true. This indicates the subclass should drop any internal data\nqueues and timestamps and prepare for a fresh set of buffers to arrive\nfor parsing and decoding.\n\n\n\nEnd Of Stream\n\nAt end-of-stream, the subclass parse function may be called some final\ntimes with the at_eos parameter set to true, indicating that the element\nshould not expect any more data to be arriving, and it should parse and\nremaining frames and call gst_video_decoder_have_frame if possible.\n\n\n\n\nWhen the pipeline is seeked or otherwise flushed, the subclass is\ninformed via a call to its reset callback, with the hard parameter\nset to true. This indicates the subclass should drop any internal data\nqueues and timestamps and prepare for a fresh set of buffers to arrive\nfor parsing and decoding.\n\n\nAt end-of-stream, the subclass parse function may be called some final\ntimes with the at_eos parameter set to true, indicating that the element\nshould not expect any more data to be arriving, and it should parse and\nremaining frames and call gst_video_decoder_have_frame if possible.\n\n\n\nProvide pad templates\n\n\nInform the base class of output caps via\ngst_video_decoder_set_output_state\n\n\nParse input data, if it is not considered packetized from upstream\nData will be provided to parse which should invoke\ngst_video_decoder_add_to_frame and gst_video_decoder_have_frame to\nseparate the data belonging to each video frame.\n\n\nAccept data in handle_frame and provide decoded results to\ngst_video_decoder_finish_frame, or call gst_video_decoder_drop_frame.\n\n\n"});