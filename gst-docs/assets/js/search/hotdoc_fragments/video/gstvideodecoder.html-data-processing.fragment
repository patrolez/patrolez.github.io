fragment_downloaded_cb({"url":"video/gstvideodecoder.html#data-processing","fragment":"Data processing\nThe base class gathers input data, and optionally allows subclass\nto parse this into subsequently manageable chunks, typically\ncorresponding to and referred to as 'frames'.\nEach input frame is provided in turn to the subclass' handle_frame\ncallback.\nWhen the subclass enables the subframe mode with gst_video_decoder_set_subframe_mode,\nthe base class will provide to the subclass the same input frame with\ndifferent input buffers to the subclass handle_frame\ncallback. During this call, the subclass needs to take\nownership of the input_buffer as GstVideoCodecFrame.input_buffer\nwill have been changed before the next subframe buffer is received.\nThe subclass will call gst_video_decoder_have_last_subframe\nwhen a new input frame can be created by the base class.\nEvery subframe will share the same GstVideoCodecFrame.output_buffer\nto write the decoding result. The subclass is responsible to protect\nits access.\nIf codec processing results in decoded data, the subclass should call\ngst_video_decoder_finish_frame to have decoded data pushed\ndownstream. In subframe mode\nthe subclass should call gst_video_decoder_finish_subframe until the\nlast subframe where it should call gst_video_decoder_finish_frame.\nThe subclass can detect the last subframe using GST_VIDEO_BUFFER_FLAG_MARKER\non buffers or using its own logic to collect the subframes.\nIn case of decoding failure, the subclass must call\ngst_video_decoder_drop_frame or gst_video_decoder_drop_subframe,\nto allow the base class to do timestamp and offset tracking, and possibly\nto requeue the frame for a later attempt in the case of reverse playback.\n\n\nThe base class gathers input data, and optionally allows subclass\nto parse this into subsequently manageable chunks, typically\ncorresponding to and referred to as 'frames'.\n\n\nEach input frame is provided in turn to the subclass' handle_frame\ncallback.\n\n\nWhen the subclass enables the subframe mode with gst_video_decoder_set_subframe_mode,\nthe base class will provide to the subclass the same input frame with\ndifferent input buffers to the subclass handle_frame\ncallback. During this call, the subclass needs to take\nownership of the input_buffer as GstVideoCodecFrame.input_buffer\nwill have been changed before the next subframe buffer is received.\nThe subclass will call gst_video_decoder_have_last_subframe\nwhen a new input frame can be created by the base class.\nEvery subframe will share the same GstVideoCodecFrame.output_buffer\nto write the decoding result. The subclass is responsible to protect\nits access.\n\n\nIf codec processing results in decoded data, the subclass should call\ngst_video_decoder_finish_frame to have decoded data pushed\ndownstream. In subframe mode\nthe subclass should call gst_video_decoder_finish_subframe until the\nlast subframe where it should call gst_video_decoder_finish_frame.\nThe subclass can detect the last subframe using GST_VIDEO_BUFFER_FLAG_MARKER\non buffers or using its own logic to collect the subframes.\nIn case of decoding failure, the subclass must call\ngst_video_decoder_drop_frame or gst_video_decoder_drop_subframe,\nto allow the base class to do timestamp and offset tracking, and possibly\nto requeue the frame for a later attempt in the case of reverse playback.\n\n\n"});