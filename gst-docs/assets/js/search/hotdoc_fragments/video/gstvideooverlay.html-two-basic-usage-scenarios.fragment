fragment_downloaded_cb({"url":"video/gstvideooverlay.html#two-basic-usage-scenarios","fragment":"Two basic usage scenarios\nThere are two basic usage scenarios: in the simplest case, the application\nuses playbin or playsink or knows exactly what particular element is used\nfor video output, which is usually the case when the application creates\nthe videosink to use (e.g. xvimagesink, ximagesink, etc.) itself; in this\ncase, the application can just create the videosink element, create and\nrealize the window to render the video on and then\ncall gst_video_overlay_set_window_handle directly with the XID or native\nwindow handle, before starting up the pipeline.\nAs playbin and playsink implement the video overlay interface and proxy\nit transparently to the actual video sink even if it is created later, this\ncase also applies when using these elements.\nIn the other and more common case, the application does not know in advance\nwhat GStreamer video sink element will be used for video output. This is\nusually the case when an element such as autovideosink is used.\nIn this case, the video sink element itself is created\nasynchronously from a GStreamer streaming thread some time after the\npipeline has been started up. When that happens, however, the video sink\nwill need to know right then whether to render onto an already existing\napplication window or whether to create its own window. This is when it\nposts a prepare-window-handle message, and that is also why this message needs\nto be handled in a sync bus handler which will be called from the streaming\nthread directly (because the video sink will need an answer right then).\nAs response to the prepare-window-handle element message in the bus sync\nhandler, the application may use gst_video_overlay_set_window_handle to tell\nthe video sink to render onto an existing window surface. At this point the\napplication should already have obtained the window handle / XID, so it\njust needs to set it. It is generally not advisable to call any GUI toolkit\nfunctions or window system functions from the streaming thread in which the\nprepare-window-handle message is handled, because most GUI toolkits and\nwindowing systems are not thread-safe at all and a lot of care would be\nrequired to co-ordinate the toolkit and window system calls of the\ndifferent threads (Gtk+ users please note: prior to Gtk+ 2.18\nGDK_WINDOW_XID was just a simple structure access, so generally fine to do\nwithin the bus sync handler; this macro was changed to a function call in\nGtk+ 2.18 and later, which is likely to cause problems when called from a\nsync handler; see below for a better approach without GDK_WINDOW_XID\nused in the callback).\n"});