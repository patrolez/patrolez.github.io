fragment_downloaded_cb({"url":"video/gstvideooverlay.html#gstvideooverlay-page","fragment":"GstVideoOverlay\nThe GstVideoOverlay interface is used for 2 main purposes :\nUsing the Window created by the video sink is probably the simplest scenario,\nin some cases, though, it might not be flexible enough for application\ndevelopers if they need to catch events such as mouse moves and button\nclicks.\nSetting a specific Window identifier on the video sink element is the most\nflexible solution but it has some issues. Indeed the application needs to set\nits Window identifier at the right time to avoid internal Window creation\nfrom the video sink element. To solve this issue a GstMessage is posted on\nthe bus to inform the application that it should set the Window identifier\nimmediately. Here is an example on how to do that correctly:\n\nTo get a grab on the Window where the video sink element is going to render.\nThis is achieved by either being informed about the Window identifier that\nthe video sink element generated, or by forcing the video sink element to use\na specific Window identifier for rendering.\nTo force a redrawing of the latest video frame the video sink element\ndisplayed on the Window. Indeed if the GstPipeline is in GST_STATE_PAUSED\nstate, moving the Window around will damage its content. Application\ndevelopers will want to handle the Expose events themselves and force the\nvideo sink element to refresh the Window's content.\n\n"});