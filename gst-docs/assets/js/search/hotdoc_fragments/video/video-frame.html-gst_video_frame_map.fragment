fragment_downloaded_cb({"url":"video/video-frame.html#gst_video_frame_map","fragment":"\n\tgst_video_frame_map\n\n\n\tGstVideo.prototype.video_frame_map\n\n\n\tGstVideo.video_frame_map\n\nUse info and buffer to fill in the values of frame. frame is usually\nallocated on the stack, and you will pass the address to the GstVideoFrame\nstructure allocated on the stack; gst_video_frame_map will then fill in\nthe structures with the various video-specific information you need to access\nthe pixels of the video buffer. You can then use accessor macros such as\nGST_VIDEO_FRAME_COMP_DATA, GST_VIDEO_FRAME_PLANE_DATA,\nGST_VIDEO_FRAME_COMP_STRIDE, GST_VIDEO_FRAME_PLANE_STRIDE etc.\nto get to the pixels.\nAll video planes of buffer will be mapped and the pointers will be set in\nframe->data.\nThe purpose of this function is to make it easy for you to get to the video\npixels in a generic way, without you having to worry too much about details\nsuch as whether the video data is allocated in one contiguous memory chunk\nor multiple memory chunks (e.g. one for each plane); or if custom strides\nand custom plane offsets are used or not (as signalled by GstVideoMeta on\neach buffer). This function will just fill the GstVideoFrame structure\nwith the right values and if you use the accessor macros everything will\njust work and you can access the data easily. It also maps the underlying\nmemory chunks for you.\nParameters:\npointer to GstVideoFrame\na GstVideoInfo\nthe buffer to map\nGstMapFlags\nTRUE on success.\nUse info and buffer to fill in the values of frame. frame is usually\nallocated on the stack, and you will pass the address to the GstVideo.VideoFrame\nstructure allocated on the stack; GstVideo.prototype.video_frame_map will then fill in\nthe structures with the various video-specific information you need to access\nthe pixels of the video buffer. You can then use accessor macros such as\nGST_VIDEO_FRAME_COMP_DATA (not introspectable), GST_VIDEO_FRAME_PLANE_DATA (not introspectable),\nGST_VIDEO_FRAME_COMP_STRIDE (not introspectable), GST_VIDEO_FRAME_PLANE_STRIDE (not introspectable) etc.\nto get to the pixels.\nAll video planes of buffer will be mapped and the pointers will be set in\nframe->data.\nThe purpose of this function is to make it easy for you to get to the video\npixels in a generic way, without you having to worry too much about details\nsuch as whether the video data is allocated in one contiguous memory chunk\nor multiple memory chunks (e.g. one for each plane); or if custom strides\nand custom plane offsets are used or not (as signalled by GstVideoMeta on\neach buffer). This function will just fill the GstVideo.VideoFrame structure\nwith the right values and if you use the accessor macros everything will\njust work and you can access the data easily. It also maps the underlying\nmemory chunks for you.\nParameters:\na GstVideo.VideoInfo\nthe buffer to map\nGst.MapFlags\nReturns a tuple made of:\ntrue on success.\ntrue on success.\nUse info and buffer to fill in the values of frame. frame is usually\nallocated on the stack, and you will pass the address to the GstVideo.VideoFrame\nstructure allocated on the stack; GstVideo.video_frame_map will then fill in\nthe structures with the various video-specific information you need to access\nthe pixels of the video buffer. You can then use accessor macros such as\nGST_VIDEO_FRAME_COMP_DATA (not introspectable), GST_VIDEO_FRAME_PLANE_DATA (not introspectable),\nGST_VIDEO_FRAME_COMP_STRIDE (not introspectable), GST_VIDEO_FRAME_PLANE_STRIDE (not introspectable) etc.\nto get to the pixels.\nAll video planes of buffer will be mapped and the pointers will be set in\nframe->data.\nThe purpose of this function is to make it easy for you to get to the video\npixels in a generic way, without you having to worry too much about details\nsuch as whether the video data is allocated in one contiguous memory chunk\nor multiple memory chunks (e.g. one for each plane); or if custom strides\nand custom plane offsets are used or not (as signalled by GstVideoMeta on\neach buffer). This function will just fill the GstVideo.VideoFrame structure\nwith the right values and if you use the accessor macros everything will\njust work and you can access the data easily. It also maps the underlying\nmemory chunks for you.\nParameters:\na GstVideo.VideoInfo\nthe buffer to map\nGst.MapFlags\nReturns a tuple made of:\nTrue on success.\nTrue on success.\n"});