fragment_downloaded_cb({"url":"installing/building-from-source-using-meson.html#how-does-it-work","fragment":"How does it work?\nStart a new shell session with a specific set of environment variables, that\ntell GStreamer where to find plugins or libraries.\nThe most important options are:\nThe general idea is to set up the meson build directory, build the project and\nthe switch to the development environment with gst-env. This creates a\ndevelopment environment in your shell, that provides a separate set of plugins\nand tools.\nTo check if you are in the development environment run: echo $GST_ENV, which will be set by gst_env to gst-$GST_VERSION.\nYou will notice the prompt changed accordingly. You can then run any GStreamer\ntool you just built directly (like gst-inspect-1.0, gst-launch-1.0, ...).\n\n\nShell context related variables\n\n\nPATH - System path used to search for executable files, gst-env will\nappend folders containing executables from the build directory.\n\nGST_PLUGIN_PATH - List of paths to search for plugins (.so/.dll\nfiles), gst-env will add all plugins found within the\nGstPluginsPath.json file and from a few other locations.\n\nGST_PLUGIN_SYSTEM_PATH  - When set this will make GStreamer check for\nplugins in system wide paths, this is kept blank on purpose by gst-env to\navoid using plugins installed outside the environment.\n\nGST_REGISTRY - Use a custom file as plugin cache / registry. gst-env\nutilizes the one found in the given build directory.\n\n\n\nMeson (build environment) related variables\n\n\nGST_VERSION - Sets the build version in meson.\n\nGST_ENV - Makes sure that neither meson or ninja are run from within the\ngst-env. Can be used to identify if the environment is active.\n\n\n\nValidation (test runners) related variables\n\n\nGST_VALIDATE_SCENARIOS_PATH - List of paths to search for validation\nscenario files (list of actions to be executed by the pipeline). By default\ngst-env will use all scenarious found in the\nprefix/share/gstreamer-1.0/validate/scenarios directory within the parent\ndirectory of gst-env.py.\n\nGST_VALIDATE_PLUGIN_PATH - List of paths to search for plugin files to\nadd to the plugin registry. The default search path is in the given build\ndirectory under subprojects/gst-devtools/validate/plugins.\n\n\n\n\n\nPATH - System path used to search for executable files, gst-env will\nappend folders containing executables from the build directory.\n\nGST_PLUGIN_PATH - List of paths to search for plugins (.so/.dll\nfiles), gst-env will add all plugins found within the\nGstPluginsPath.json file and from a few other locations.\n\nGST_PLUGIN_SYSTEM_PATH  - When set this will make GStreamer check for\nplugins in system wide paths, this is kept blank on purpose by gst-env to\navoid using plugins installed outside the environment.\n\nGST_REGISTRY - Use a custom file as plugin cache / registry. gst-env\nutilizes the one found in the given build directory.\n\n\n\nGST_VERSION - Sets the build version in meson.\n\nGST_ENV - Makes sure that neither meson or ninja are run from within the\ngst-env. Can be used to identify if the environment is active.\n\n\n\nGST_VALIDATE_SCENARIOS_PATH - List of paths to search for validation\nscenario files (list of actions to be executed by the pipeline). By default\ngst-env will use all scenarious found in the\nprefix/share/gstreamer-1.0/validate/scenarios directory within the parent\ndirectory of gst-env.py.\n\nGST_VALIDATE_PLUGIN_PATH - List of paths to search for plugin files to\nadd to the plugin registry. The default search path is in the given build\ndirectory under subprojects/gst-devtools/validate/plugins.\n\n"});