fragment_downloaded_cb({"url":"gstreamer/gstclock.html#gstclock-page","fragment":"GstClock\nGStreamer uses a global clock to synchronize the plugins in a pipeline.\nDifferent clock implementations are possible by implementing this abstract\nbase class or, more conveniently, by subclassing GstSystemClock.\nThe GstClock returns a monotonically increasing time with the method\ngst_clock_get_time. Its accuracy and base time depend on the specific\nclock implementation but time is always expressed in nanoseconds. Since the\nbaseline of the clock is undefined, the clock time returned is not\nmeaningful in itself, what matters are the deltas between two clock times.\nThe time returned by a clock is called the absolute time.\nThe pipeline uses the clock to calculate the running time. Usually all\nrenderers synchronize to the global clock using the buffer timestamps, the\nGST_EVENT_SEGMENT events and the element's base time, see GstPipeline.\nA clock implementation can support periodic and single shot clock\nnotifications both synchronous and asynchronous.\nOne first needs to create a GstClockID for the periodic or single shot\nnotification using gst_clock_new_single_shot_id or\ngst_clock_new_periodic_id.\nTo perform a blocking wait for the specific time of the GstClockID use\ngst_clock_id_wait. To receive a callback when the specific time is reached\nin the clock use gst_clock_id_wait_async. Both these calls can be\ninterrupted with the gst_clock_id_unschedule call. If the blocking wait is\nunscheduled a return value of GST_CLOCK_UNSCHEDULED is returned.\nPeriodic callbacks scheduled async will be repeatedly called automatically\nuntil they are unscheduled. To schedule a sync periodic callback,\ngst_clock_id_wait should be called repeatedly.\nThe async callbacks can happen from any thread, either provided by the core\nor from a streaming thread. The application should be prepared for this.\nA GstClockID that has been unscheduled cannot be used again for any wait\noperation, a new GstClockID should be created and the old unscheduled one\nshould be destroyed with gst_clock_id_unref.\nIt is possible to perform a blocking wait on the same GstClockID from\nmultiple threads. However, registering the same GstClockID for multiple\nasync notifications is not possible, the callback will only be called for\nthe thread registering the entry last.\nNone of the wait operations unref the GstClockID, the owner is responsible\nfor unreffing the ids itself. This holds for both periodic and single shot\nnotifications. The reason being that the owner of the GstClockID has to\nkeep a handle to the GstClockID to unblock the wait on FLUSHING events or\nstate changes and if the entry would be unreffed automatically, the handle\nmight become invalid without any notification.\nThese clock operations do not operate on the running time, so the callbacks\nwill also occur when not in PLAYING state as if the clock just keeps on\nrunning. Some clocks however do not progress when the element that provided\nthe clock is not PLAYING.\nWhen a clock has the GST_CLOCK_FLAG_CAN_SET_MASTER flag set, it can be\nslaved to another GstClock with gst_clock_set_master. The clock will\nthen automatically be synchronized to this master clock by repeatedly\nsampling the master clock and the slave clock and recalibrating the slave\nclock with gst_clock_set_calibration. This feature is mostly useful for\nplugins that have an internal clock but must operate with another clock\nselected by the GstPipeline.  They can track the offset and rate difference\nof their internal clock relative to the master clock by using the\ngst_clock_get_calibration function.\nThe master/slave synchronisation can be tuned with the timeout,\nwindow-size and window-threshold properties.\nThe timeout property defines the interval to sample the master\nclock and run the calibration functions. window-size defines the\nnumber of samples to use when calibrating and window-threshold\ndefines the minimum number of samples before the calibration is performed.\n"});