fragment_downloaded_cb({"url":"gstreamer/gstpipeline.html#gstpipeline-page","fragment":"GstPipeline\nA GstPipeline is a special GstBin used as the toplevel container for\nthe filter graph. The GstPipeline will manage the selection and\ndistribution of a global GstClock as well as provide a GstBus to the\napplication.\ngst_pipeline_new is used to create a pipeline. when you are done with\nthe pipeline, use gst_object_unref to free its resources including all\nadded GstElement objects (if not otherwise referenced).\nElements are added and removed from the pipeline using the GstBin\nmethods like gst_bin_add and gst_bin_remove (see GstBin).\nBefore changing the state of the GstPipeline (see GstElement) a GstBus\nshould be retrieved with gst_pipeline_get_bus. This GstBus should then\nbe used to receive GstMessage from the elements in the pipeline. Listening\nto the GstBus is necessary for retrieving error messages from the\nGstPipeline and otherwise the GstPipeline might stop without any\nindication, why. Furthermore, the GstPipeline posts messages even if\nnobody listens on the GstBus, which will pile up and use up memory.\nBy default, a GstPipeline will automatically flush the pending GstBus\nmessages when going to the NULL state to ensure that no circular\nreferences exist when no messages are read from the GstBus. This\nbehaviour can be changed with gst_pipeline_set_auto_flush_bus.\nWhen the GstPipeline performs the PAUSED to PLAYING state change it will\nselect a clock for the elements. The clock selection algorithm will by\ndefault select a clock provided by an element that is most upstream\n(closest to the source). For live pipelines (ones that return\nGST_STATE_CHANGE_NO_PREROLL from the gst_element_set_state call) this\nwill select the clock provided by the live source. For normal pipelines\nthis will select a clock provided by the sinks (most likely the audio\nsink). If no element provides a clock, a default GstSystemClock is used.\nThe clock selection can be controlled with the gst_pipeline_use_clock\nmethod, which will enforce a given clock on the pipeline. With\ngst_pipeline_auto_clock the default clock selection algorithm can be\nrestored.\nA GstPipeline maintains a running time for the elements. The running\ntime is defined as the difference between the current clock time and\nthe base time. When the pipeline goes to READY or a flushing seek is\nperformed on it, the running time is reset to 0. When the pipeline is\nset from PLAYING to PAUSED, the current clock time is sampled and used to\nconfigure the base time for the elements when the pipeline is set\nto PLAYING again. The effect is that the running time (as the difference\nbetween the clock time and the base time) will count how much time was spent\nin the PLAYING state. This default behaviour can be changed with the\ngst_element_set_start_time method.\n"});