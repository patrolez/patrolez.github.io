fragment_downloaded_cb({"url":"gstreamer/gstsegment.html#GstSegment","fragment":"\n\tGstSegment\n\nMembers\n\n\tGst.Segment\n\nMembers\n\n\tGst.Segment\n\nMembers\nThe structure that holds the configured region of interest in a media file.\nflags for this segment\nthe playback rate of the segment is set in response to a seek\nevent and, without any seek, the value should be 1.0. This\nvalue is used by elements that synchronize buffer running\ntimes on\nthe clock (usually the sink elements), leading to consuming\nbuffers faster (for a value > 1.0) or slower (for 0.0 < value < 1.0) than normal playback speed. The rate also\ndefines the playback direction, meaning that when the value is\nlower than 0.0, the playback happens in reverse, and the\nstream-time\nis going backward. The rate value should never be 0.0.\nThe applied rate is the rate that has been applied to the stream.\nThe effective/resulting playback rate of a stream is\nrate * applied_rate.\nThe applied rate can be set by source elements when a server is\nsending the stream with an already modified playback speed\nrate. Filter elements that modify the stream in a way that\nmodifies the playback speed should also modify the applied\nrate. For example the videorate element when its\nrate property is set will set the applied rate of\nthe segment it pushed downstream. Also scaletempo applies the\ninput segment rate to the stream and outputs a segment with\nrate=1.0 and applied_rate=<inputsegment.rate>.\nthe unit used for all of the segment's values.\nthe running time (plus elapsed time, see offset) of the\nsegment start (stop if\nrate < 0.0).\nthe offset expresses the elapsed time (in buffer timestamps)\nbefore a seek with its start (stop if rate < 0.0) seek type\nset to GST_SEEK_TYPE_NONE, the value is set to the position\nof the segment at the time of the seek.\nthe start time of the segment (in buffer timestamps)\n(PTS), that is the timestamp of the first\nbuffer to output inside the segment (last one during\nreverse playback). For example decoders will\nclip out the buffers before the start\ntime.\nthe stop time of the segment (in buffer timestamps)\n(PTS), that is the timestamp of the last\nbuffer to output inside the segment (first one during\nreverse playback). For example decoders will\nclip out buffers after the stop time.\nthe stream time of the segment start\n(stop if rate < 0.0).\nthe buffer timestamp position in the segment is supposed to be\nupdated by elements such as sources, demuxers or parsers to\ntrack progress by setting it to the last pushed buffer' end time\n(timestamp + duration) for that\nspecific segment. The position is used when reconfiguring the\nsegment with gst_segment_do_seek when the seek is only\nupdating the segment (see offset).\nthe duration of the segment is the maximum absolute difference\nbetween start and stop if stop is not\nset, otherwise it should be the difference between those\ntwo values. This should be set by elements that know the\noverall stream duration (like demuxers) and will be used when\nseeking with GST_SEEK_TYPE_END.\nThe structure that holds the configured region of interest in a media file.\nflags for this segment\nthe playback rate of the segment is set in response to a seek\nevent and, without any seek, the value should be 1.0. This\nvalue is used by elements that synchronize buffer running\ntimes on\nthe clock (usually the sink elements), leading to consuming\nbuffers faster (for a value > 1.0) or slower (for 0.0 < value < 1.0) than normal playback speed. The rate also\ndefines the playback direction, meaning that when the value is\nlower than 0.0, the playback happens in reverse, and the\nstream-time\nis going backward. The rate value should never be 0.0.\nThe applied rate is the rate that has been applied to the stream.\nThe effective/resulting playback rate of a stream is\nrate * applied_rate.\nThe applied rate can be set by source elements when a server is\nsending the stream with an already modified playback speed\nrate. Filter elements that modify the stream in a way that\nmodifies the playback speed should also modify the applied\nrate. For example the videorate (not introspectable) element when its\nrate (not introspectable) property is set will set the applied rate of\nthe segment it pushed downstream. Also scaletempo (not introspectable) applies the\ninput segment rate to the stream and outputs a segment with\nrate=1.0 and applied_rate=<inputsegment.rate>.\nthe unit used for all of the segment's values.\nthe running time (plus elapsed time, see offset) of the\nsegment start (stop if\nrate < 0.0).\nthe offset expresses the elapsed time (in buffer timestamps)\nbefore a seek with its start (stop if rate < 0.0) seek type\nset to Gst.SeekType.NONE, the value is set to the position\nof the segment at the time of the seek.\nthe start time of the segment (in buffer timestamps)\n(PTS), that is the timestamp of the first\nbuffer to output inside the segment (last one during\nreverse playback). For example decoders will\nclip out the buffers before the start\ntime.\nthe stop time of the segment (in buffer timestamps)\n(PTS), that is the timestamp of the last\nbuffer to output inside the segment (first one during\nreverse playback). For example decoders will\nclip out buffers after the stop time.\nthe stream time of the segment start\n(stop if rate < 0.0).\nthe buffer timestamp position in the segment is supposed to be\nupdated by elements such as sources, demuxers or parsers to\ntrack progress by setting it to the last pushed buffer' end time\n(timestamp + duration) for that\nspecific segment. The position is used when reconfiguring the\nsegment with Gst.Segment.prototype.do_seek when the seek is only\nupdating the segment (see offset).\nthe duration of the segment is the maximum absolute difference\nbetween start and stop if stop is not\nset, otherwise it should be the difference between those\ntwo values. This should be set by elements that know the\noverall stream duration (like demuxers) and will be used when\nseeking with Gst.SeekType.END.\nThe structure that holds the configured region of interest in a media file.\nflags for this segment\nthe playback rate of the segment is set in response to a seek\nevent and, without any seek, the value should be 1.0. This\nvalue is used by elements that synchronize buffer running\ntimes on\nthe clock (usually the sink elements), leading to consuming\nbuffers faster (for a value > 1.0) or slower (for 0.0 < value < 1.0) than normal playback speed. The rate also\ndefines the playback direction, meaning that when the value is\nlower than 0.0, the playback happens in reverse, and the\nstream-time\nis going backward. The rate value should never be 0.0.\nThe applied rate is the rate that has been applied to the stream.\nThe effective/resulting playback rate of a stream is\nrate * applied_rate.\nThe applied rate can be set by source elements when a server is\nsending the stream with an already modified playback speed\nrate. Filter elements that modify the stream in a way that\nmodifies the playback speed should also modify the applied\nrate. For example the videorate (not introspectable) element when its\nrate (not introspectable) property is set will set the applied rate of\nthe segment it pushed downstream. Also scaletempo (not introspectable) applies the\ninput segment rate to the stream and outputs a segment with\nrate=1.0 and applied_rate=<inputsegment.rate>.\nthe unit used for all of the segment's values.\nthe running time (plus elapsed time, see offset) of the\nsegment start (stop if\nrate < 0.0).\nthe offset expresses the elapsed time (in buffer timestamps)\nbefore a seek with its start (stop if rate < 0.0) seek type\nset to Gst.SeekType.NONE, the value is set to the position\nof the segment at the time of the seek.\nthe start time of the segment (in buffer timestamps)\n(PTS), that is the timestamp of the first\nbuffer to output inside the segment (last one during\nreverse playback). For example decoders will\nclip out the buffers before the start\ntime.\nthe stop time of the segment (in buffer timestamps)\n(PTS), that is the timestamp of the last\nbuffer to output inside the segment (first one during\nreverse playback). For example decoders will\nclip out buffers after the stop time.\nthe stream time of the segment start\n(stop if rate < 0.0).\nthe buffer timestamp position in the segment is supposed to be\nupdated by elements such as sources, demuxers or parsers to\ntrack progress by setting it to the last pushed buffer' end time\n(timestamp + duration) for that\nspecific segment. The position is used when reconfiguring the\nsegment with Gst.Segment.do_seek when the seek is only\nupdating the segment (see offset).\nthe duration of the segment is the maximum absolute difference\nbetween start and stop if stop is not\nset, otherwise it should be the difference between those\ntwo values. This should be set by elements that know the\noverall stream duration (like demuxers) and will be used when\nseeking with Gst.SeekType.END.\n"});