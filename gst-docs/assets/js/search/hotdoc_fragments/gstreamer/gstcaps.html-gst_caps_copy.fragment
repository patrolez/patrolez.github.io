fragment_downloaded_cb({"url":"gstreamer/gstcaps.html#gst_caps_copy","fragment":"\n\tgst_caps_copy\n\n\n\tGst.Caps.prototype.copy\n\n\n\tGst.Caps.copy\n\nCreates a new GstCaps as a copy of the old caps. The new caps will have a\nrefcount of 1, owned by the caller. The structures are copied as well.\nNote that this function is the semantic equivalent of a gst_caps_ref\nfollowed by a gst_caps_make_writable. If you only want to hold on to a\nreference to the data, you should use gst_caps_ref.\nParameters:\na GstCaps.\nthe new GstCaps\nCreates a new Gst.Caps as a copy of the old caps. The new caps will have a\nrefcount of 1, owned by the caller. The structures are copied as well.\nNote that this function is the semantic equivalent of a gst_caps_ref (not introspectable)\nfollowed by a gst_caps_make_writable (not introspectable). If you only want to hold on to a\nreference to the data, you should use gst_caps_ref (not introspectable).\nParameters:\na Gst.Caps.\nthe new Gst.Caps\nCreates a new Gst.Caps as a copy of the old caps. The new caps will have a\nrefcount of 1, owned by the caller. The structures are copied as well.\nNote that this function is the semantic equivalent of a gst_caps_ref (not introspectable)\nfollowed by a gst_caps_make_writable (not introspectable). If you only want to hold on to a\nreference to the data, you should use gst_caps_ref (not introspectable).\nParameters:\na Gst.Caps.\nthe new Gst.Caps\n"});