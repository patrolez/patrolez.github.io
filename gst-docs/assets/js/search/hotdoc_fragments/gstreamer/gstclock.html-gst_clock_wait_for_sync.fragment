fragment_downloaded_cb({"url":"gstreamer/gstclock.html#gst_clock_wait_for_sync","fragment":"\n\tgst_clock_wait_for_sync\n\n\n\tGst.Clock.prototype.wait_for_sync\n\n\n\tGst.Clock.wait_for_sync\n\nWaits until clock is synced for reporting the current time. If timeout\nis GST_CLOCK_TIME_NONE it will wait forever, otherwise it will time out\nafter timeout nanoseconds.\nFor asynchronous waiting, the synced signal can be used.\nThis returns immediately with TRUE if GST_CLOCK_FLAG_NEEDS_STARTUP_SYNC\nis not set on the clock, or if the clock is already synced.\nParameters:\na GstClock\ntimeout for waiting or GST_CLOCK_TIME_NONE\nTRUE if waiting was successful, or FALSE on timeout\n\n\tSince\t\t\t: 1.6\n\t\t\nWaits until clock is synced for reporting the current time. If timeout\nis Gst.CLOCK_TIME_NONE it will wait forever, otherwise it will time out\nafter timeout nanoseconds.\nFor asynchronous waiting, the synced signal can be used.\nThis returns immediately with true if Gst.ClockFlags.NEEDS_STARTUP_SYNC\nis not set on the clock, or if the clock is already synced.\nParameters:\na GstClock\ntimeout for waiting or Gst.CLOCK_TIME_NONE\ntrue if waiting was successful, or false on timeout\n\n\tSince\t\t\t: 1.6\n\t\t\nWaits until clock is synced for reporting the current time. If timeout\nis Gst.CLOCK_TIME_NONE it will wait forever, otherwise it will time out\nafter timeout nanoseconds.\nFor asynchronous waiting, the synced signal can be used.\nThis returns immediately with True if Gst.ClockFlags.NEEDS_STARTUP_SYNC\nis not set on the clock, or if the clock is already synced.\nParameters:\na GstClock\ntimeout for waiting or Gst.CLOCK_TIME_NONE\nTrue if waiting was successful, or False on timeout\n\n\tSince\t\t\t: 1.6\n\t\t\n"});