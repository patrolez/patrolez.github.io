fragment_downloaded_cb({"url":"gstreamer/gstsegment.html#GstSeekFlags","fragment":"\n\tGstSeekFlags\n\nMembers\n\n\tGst.SeekFlags\n\nMembers\n\n\tGst.SeekFlags\n\nMembers\nFlags to be used with gst_element_seek or gst_event_new_seek. All flags\ncan be used together.\nA non flushing seek might take some time to perform as the currently\nplaying data in the pipeline will not be cleared.\nAn accurate seek might be slower for formats that don't have any indexes\nor timestamp markers in the stream. Specifying this flag might require a\ncomplete scan of the file in those cases.\nWhen performing a segment seek: after the playback of the segment completes,\nno EOS will be emitted by the element that performed the seek, but a\nGST_MESSAGE_SEGMENT_DONE message will be posted on the bus by the element.\nWhen this message is posted, it is possible to send a new seek event to\ncontinue playback. With this seek method it is possible to perform seamless\nlooping or simple linear editing.\nWhen only changing the playback rate and not the direction, the\nGST_SEEK_FLAG_INSTANT_RATE_CHANGE flag can be used for a non-flushing seek\nto signal that the rate change should be applied immediately. This requires\nspecial support in the seek handlers (e.g. demuxers) and any elements\nsynchronizing to the clock, and in general can't work in all cases (for example\nUDP streaming where the delivery rate is controlled by a remote server). The\ninstant-rate-change mode supports changing the trickmode-related GST_SEEK_ flags,\nbut can't be used in conjunction with other seek flags that affect the new\nplayback position - as the playback position will not be changing.\nWhen doing fast forward (rate > 1.0) or fast reverse (rate < -1.0) trickmode\nplayback, the GST_SEEK_FLAG_TRICKMODE flag can be used to instruct decoders\nand demuxers to adjust the playback rate by skipping frames. This can improve\nperformance and decrease CPU usage because not all frames need to be decoded.\nBeyond that, the GST_SEEK_FLAG_TRICKMODE_KEY_UNITS flag can be used to\nrequest that decoders skip all frames except key units, and\nGST_SEEK_FLAG_TRICKMODE_NO_AUDIO flags can be used to request that audio\ndecoders do no decoding at all, and simple output silence.\nThe GST_SEEK_FLAG_SNAP_BEFORE flag can be used to snap to the previous\nrelevant location, and the GST_SEEK_FLAG_SNAP_AFTER flag can be used to\nselect the next relevant location. If GST_SEEK_FLAG_KEY_UNIT is specified,\nthe relevant location is a keyframe. If both flags are specified, the nearest\nof these locations will be selected. If none are specified, the implementation is\nfree to select whichever it wants.\nThe before and after here are in running time, so when playing backwards,\nthe next location refers to the one that will played in next, and not the\none that is located after in the actual source stream.\nAlso see part-seeking.txt in the GStreamer design documentation for more\ndetails on the meaning of these flags and the behaviour expected of\nelements that handle them.\nno flag\nflush pipeline\naccurate position is requested, this might\nbe considerably slower for some formats.\nseek to the nearest keyframe. This might be\nfaster but less accurate.\nperform a segment seek.\nwhen doing fast forward or fast reverse playback, allow\nelements to skip frames instead of generating all\nframes. (Since: 1.6)\nDeprecated backward compatibility flag, replaced\nby GST_SEEK_FLAG_TRICKMODE\ngo to a location before the requested position,\nif GST_SEEK_FLAG_KEY_UNIT this means the keyframe at or before\nthe requested position the one at or before the seek target.\ngo to a location after the requested position,\nif GST_SEEK_FLAG_KEY_UNIT this means the keyframe at of after the\nrequested position.\ngo to a position near the requested position,\nif GST_SEEK_FLAG_KEY_UNIT this means the keyframe closest\nto the requested position, if both keyframes are at an equal\ndistance, behaves like GST_SEEK_FLAG_SNAP_BEFORE.\nwhen doing fast forward or fast reverse\nplayback, request that elements only decode keyframes\nand skip all other content, for formats that have\nkeyframes. (Since: 1.6)\nwhen doing fast forward or fast reverse\nplayback, request that audio decoder elements skip\ndecoding and output only gap events or silence. (Since: 1.6)\nWhen doing fast forward or fast reverse\nplayback, request that elements only decode keyframes and\nforward predicted frames and skip all other content (for example\nB-Frames), for formats that have keyframes and forward predicted\nframes. (Since: 1.18)\nSignals that a rate change should be\napplied immediately. Only valid if start/stop position\nare GST_CLOCK_TIME_NONE, the playback direction does not change\nand the seek is not flushing. (Since: 1.18)\nFlags to be used with Gst.Element.prototype.seek or Gst.Event.prototype.new_seek. All flags\ncan be used together.\nA non flushing seek might take some time to perform as the currently\nplaying data in the pipeline will not be cleared.\nAn accurate seek might be slower for formats that don't have any indexes\nor timestamp markers in the stream. Specifying this flag might require a\ncomplete scan of the file in those cases.\nWhen performing a segment seek: after the playback of the segment completes,\nno EOS will be emitted by the element that performed the seek, but a\nGst.MessageType.SEGMENT_DONE message will be posted on the bus by the element.\nWhen this message is posted, it is possible to send a new seek event to\ncontinue playback. With this seek method it is possible to perform seamless\nlooping or simple linear editing.\nWhen only changing the playback rate and not the direction, the\nGst.SeekFlags.INSTANT_RATE_CHANGE flag can be used for a non-flushing seek\nto signal that the rate change should be applied immediately. This requires\nspecial support in the seek handlers (e.g. demuxers) and any elements\nsynchronizing to the clock, and in general can't work in all cases (for example\nUDP streaming where the delivery rate is controlled by a remote server). The\ninstant-rate-change mode supports changing the trickmode-related GST_SEEK_ flags,\nbut can't be used in conjunction with other seek flags that affect the new\nplayback position - as the playback position will not be changing.\nWhen doing fast forward (rate > 1.0) or fast reverse (rate < -1.0) trickmode\nplayback, the Gst.SeekFlags.TRICKMODE flag can be used to instruct decoders\nand demuxers to adjust the playback rate by skipping frames. This can improve\nperformance and decrease CPU usage because not all frames need to be decoded.\nBeyond that, the Gst.SeekFlags.TRICKMODE_KEY_UNITS flag can be used to\nrequest that decoders skip all frames except key units, and\nGst.SeekFlags.TRICKMODE_NO_AUDIO flags can be used to request that audio\ndecoders do no decoding at all, and simple output silence.\nThe Gst.SeekFlags.SNAP_BEFORE flag can be used to snap to the previous\nrelevant location, and the Gst.SeekFlags.SNAP_AFTER flag can be used to\nselect the next relevant location. If Gst.SeekFlags.KEY_UNIT is specified,\nthe relevant location is a keyframe. If both flags are specified, the nearest\nof these locations will be selected. If none are specified, the implementation is\nfree to select whichever it wants.\nThe before and after here are in running time, so when playing backwards,\nthe next location refers to the one that will played in next, and not the\none that is located after in the actual source stream.\nAlso see part-seeking.txt in the GStreamer design documentation for more\ndetails on the meaning of these flags and the behaviour expected of\nelements that handle them.\nno flag\nflush pipeline\naccurate position is requested, this might\nbe considerably slower for some formats.\nseek to the nearest keyframe. This might be\nfaster but less accurate.\nperform a segment seek.\nwhen doing fast forward or fast reverse playback, allow\nelements to skip frames instead of generating all\nframes. (Since: 1.6)\nDeprecated backward compatibility flag, replaced\nby Gst.SeekFlags.TRICKMODE\ngo to a location before the requested position,\nif Gst.SeekFlags.KEY_UNIT this means the keyframe at or before\nthe requested position the one at or before the seek target.\ngo to a location after the requested position,\nif Gst.SeekFlags.KEY_UNIT this means the keyframe at of after the\nrequested position.\ngo to a position near the requested position,\nif Gst.SeekFlags.KEY_UNIT this means the keyframe closest\nto the requested position, if both keyframes are at an equal\ndistance, behaves like Gst.SeekFlags.SNAP_BEFORE.\nwhen doing fast forward or fast reverse\nplayback, request that elements only decode keyframes\nand skip all other content, for formats that have\nkeyframes. (Since: 1.6)\nwhen doing fast forward or fast reverse\nplayback, request that audio decoder elements skip\ndecoding and output only gap events or silence. (Since: 1.6)\nWhen doing fast forward or fast reverse\nplayback, request that elements only decode keyframes and\nforward predicted frames and skip all other content (for example\nB-Frames), for formats that have keyframes and forward predicted\nframes. (Since: 1.18)\nSignals that a rate change should be\napplied immediately. Only valid if start/stop position\nare GST_CLOCK_TIME_NONE, the playback direction does not change\nand the seek is not flushing. (Since: 1.18)\nFlags to be used with Gst.Element.seek or Gst.Event.new_seek. All flags\ncan be used together.\nA non flushing seek might take some time to perform as the currently\nplaying data in the pipeline will not be cleared.\nAn accurate seek might be slower for formats that don't have any indexes\nor timestamp markers in the stream. Specifying this flag might require a\ncomplete scan of the file in those cases.\nWhen performing a segment seek: after the playback of the segment completes,\nno EOS will be emitted by the element that performed the seek, but a\nGst.MessageType.SEGMENT_DONE message will be posted on the bus by the element.\nWhen this message is posted, it is possible to send a new seek event to\ncontinue playback. With this seek method it is possible to perform seamless\nlooping or simple linear editing.\nWhen only changing the playback rate and not the direction, the\nGst.SeekFlags.INSTANT_RATE_CHANGE flag can be used for a non-flushing seek\nto signal that the rate change should be applied immediately. This requires\nspecial support in the seek handlers (e.g. demuxers) and any elements\nsynchronizing to the clock, and in general can't work in all cases (for example\nUDP streaming where the delivery rate is controlled by a remote server). The\ninstant-rate-change mode supports changing the trickmode-related GST_SEEK_ flags,\nbut can't be used in conjunction with other seek flags that affect the new\nplayback position - as the playback position will not be changing.\nWhen doing fast forward (rate > 1.0) or fast reverse (rate < -1.0) trickmode\nplayback, the Gst.SeekFlags.TRICKMODE flag can be used to instruct decoders\nand demuxers to adjust the playback rate by skipping frames. This can improve\nperformance and decrease CPU usage because not all frames need to be decoded.\nBeyond that, the Gst.SeekFlags.TRICKMODE_KEY_UNITS flag can be used to\nrequest that decoders skip all frames except key units, and\nGst.SeekFlags.TRICKMODE_NO_AUDIO flags can be used to request that audio\ndecoders do no decoding at all, and simple output silence.\nThe Gst.SeekFlags.SNAP_BEFORE flag can be used to snap to the previous\nrelevant location, and the Gst.SeekFlags.SNAP_AFTER flag can be used to\nselect the next relevant location. If Gst.SeekFlags.KEY_UNIT is specified,\nthe relevant location is a keyframe. If both flags are specified, the nearest\nof these locations will be selected. If none are specified, the implementation is\nfree to select whichever it wants.\nThe before and after here are in running time, so when playing backwards,\nthe next location refers to the one that will played in next, and not the\none that is located after in the actual source stream.\nAlso see part-seeking.txt in the GStreamer design documentation for more\ndetails on the meaning of these flags and the behaviour expected of\nelements that handle them.\nno flag\nflush pipeline\naccurate position is requested, this might\nbe considerably slower for some formats.\nseek to the nearest keyframe. This might be\nfaster but less accurate.\nperform a segment seek.\nwhen doing fast forward or fast reverse playback, allow\nelements to skip frames instead of generating all\nframes. (Since: 1.6)\nDeprecated backward compatibility flag, replaced\nby Gst.SeekFlags.TRICKMODE\ngo to a location before the requested position,\nif Gst.SeekFlags.KEY_UNIT this means the keyframe at or before\nthe requested position the one at or before the seek target.\ngo to a location after the requested position,\nif Gst.SeekFlags.KEY_UNIT this means the keyframe at of after the\nrequested position.\ngo to a position near the requested position,\nif Gst.SeekFlags.KEY_UNIT this means the keyframe closest\nto the requested position, if both keyframes are at an equal\ndistance, behaves like Gst.SeekFlags.SNAP_BEFORE.\nwhen doing fast forward or fast reverse\nplayback, request that elements only decode keyframes\nand skip all other content, for formats that have\nkeyframes. (Since: 1.6)\nwhen doing fast forward or fast reverse\nplayback, request that audio decoder elements skip\ndecoding and output only gap events or silence. (Since: 1.6)\nWhen doing fast forward or fast reverse\nplayback, request that elements only decode keyframes and\nforward predicted frames and skip all other content (for example\nB-Frames), for formats that have keyframes and forward predicted\nframes. (Since: 1.18)\nSignals that a rate change should be\napplied immediately. Only valid if start/stop position\nare GST_CLOCK_TIME_NONE, the playback direction does not change\nand the seek is not flushing. (Since: 1.18)\n"});