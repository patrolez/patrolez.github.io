fragment_downloaded_cb({"url":"gstreamer/gstutils.html#gst_util_seqnum_next","fragment":"\n\tgst_util_seqnum_next\n\n\n\tGst.prototype.util_seqnum_next\n\n\n\tGst.util_seqnum_next\n\nReturn a constantly incrementing sequence number.\nThis function is used internally to GStreamer to be able to determine which\nevents and messages are \"the same\". For example, elements may set the seqnum\non a segment-done message to be the same as that of the last seek event, to\nindicate that event and the message correspond to the same segment.\nThis function never returns GST_SEQNUM_INVALID (which is 0).\nA constantly incrementing 32-bit unsigned integer, which might\noverflow at some point. Use gst_util_seqnum_compare to make sure\nyou handle wraparound correctly.\nReturn a constantly incrementing sequence number.\nThis function is used internally to GStreamer to be able to determine which\nevents and messages are \"the same\". For example, elements may set the seqnum\non a segment-done message to be the same as that of the last seek event, to\nindicate that event and the message correspond to the same segment.\nThis function never returns Gst.SEQNUM_INVALID (which is 0).\nA constantly incrementing 32-bit unsigned integer, which might\noverflow at some point. Use Gst.prototype.util_seqnum_compare to make sure\nyou handle wraparound correctly.\nReturn a constantly incrementing sequence number.\nThis function is used internally to GStreamer to be able to determine which\nevents and messages are \"the same\". For example, elements may set the seqnum\non a segment-done message to be the same as that of the last seek event, to\nindicate that event and the message correspond to the same segment.\nThis function never returns Gst.SEQNUM_INVALID (which is 0).\nA constantly incrementing 32-bit unsigned integer, which might\noverflow at some point. Use Gst.util_seqnum_compare to make sure\nyou handle wraparound correctly.\n"});