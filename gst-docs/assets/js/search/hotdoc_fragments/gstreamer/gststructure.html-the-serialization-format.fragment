fragment_downloaded_cb({"url":"gstreamer/gststructure.html#the-serialization-format","fragment":"The serialization format\nGstStructure serialization format serialize the GstStructure name,\nkeys/GType/values in a comma separated list with the structure name as first\nfield without value followed by separated key/value pairs in the form\nkey=value, for example:\nThe values type will be inferred if not explicitly specified with the\n(GTypeName)value syntax, for example the following struct will have one\nfield called 'is-string' which has the string 'true' as a value:\nNote: without specifying (string),field-is-string` type would have been\ninferred as boolean.\nNote: we specified (string) as a type even if gchararray is the actual\nGType name as for convenience some well known types have been aliased or\nabbreviated.\nTo avoid specifying the type, you can give some hints to the \"type system\".\nFor example to specify a value as a double, you should add a decimal (ie. 1\nis an int while 1.0 is a double).\nNote: when a structure is serialized with gst_structure_to_string, all\nvalues are explicitly typed.\nSome types have special delimiters:\nStructures are delimited either by a null character \\0 or a semicolon ;\nthe latter allowing to store multiple structures in the same string (see\nGstCaps).\nQuotes are used as \"default\" delimiters and can be used around any types that\ndon't use other delimiters (for example a-struct, i=(int)\"1\"). They are use\nto allow adding spaces or special characters (such as delimiters,\nsemicolumns, etc..) inside strings and you can use backslashes \\ to escape\ncharacters inside them, for example:\nThey also allow for nested structure, such as:\nSince 1.20, nested structures and caps can be specified using brackets ([\nand ]), for example:\n*note*: gst_structure_to_string won't use that syntax for backward\ncompatibility reason, gst_structure_serialize has been added for\nthat purpose.\n\n\nGstValueArray are inside curly brackets ({ and }).\nFor example a-structure, array={1, 2, 3}\n\nRanges are inside brackets ([ and ]). For example a-structure, range=[1, 6, 2] 1 being the min value, 6 the maximum and 2 the step. To\nspecify a GST_TYPE_INT64_RANGE you need to explicitly specify it like:\na-structure, a-int64-range=(gint64) [1, 5]\n\n\nGstValueList are inside \"less and greater than\" (< and\n>). For example `a-structure, list=<1, 2, 3>\n\n"});