fragment_downloaded_cb({"url":"gstreamer/gstiterator.html#gst_iterator_fold","fragment":"\n\tgst_iterator_fold\n\n\n\tGst.Iterator.prototype.fold\n\n\n\tGst.Iterator.fold\n\nFolds func over the elements of iter. That is to say, func will be called\nas func (object, ret, user_data) for each object in it. The normal use\nof this procedure is to accumulate the results of operating on the objects in\nret.\nThis procedure can be used (and is used internally) to implement the\ngst_iterator_foreach and gst_iterator_find_custom operations.\nThe fold will proceed as long as func returns TRUE. When the iterator has no\nmore arguments, GST_ITERATOR_DONE will be returned. If func returns FALSE,\nthe fold will stop, and GST_ITERATOR_OK will be returned. Errors or resyncs\nwill cause fold to return GST_ITERATOR_ERROR or GST_ITERATOR_RESYNC as\nappropriate.\nThe iterator will not be freed.\nParameters:\nThe GstIterator to fold over\nthe fold function\nthe seed value passed to the fold function\nuser data passed to the fold function\nA GstIteratorResult, as described above.\nMT safe.\nFolds func over the elements of iter. That is to say, func will be called\nas func (object, ret, user_data) for each object in it. The normal use\nof this procedure is to accumulate the results of operating on the objects in\nret.\nThis procedure can be used (and is used internally) to implement the\nGst.Iterator.prototype.foreach and Gst.Iterator.prototype.find_custom operations.\nThe fold will proceed as long as func returns true. When the iterator has no\nmore arguments, Gst.IteratorResult.DONE will be returned. If func returns false,\nthe fold will stop, and Gst.IteratorResult.OK will be returned. Errors or resyncs\nwill cause fold to return Gst.IteratorResult.ERROR or Gst.IteratorResult.RESYNC as\nappropriate.\nThe iterator will not be freed.\nParameters:\nThe Gst.Iterator to fold over\nthe fold function\nthe seed value passed to the fold function\nuser data passed to the fold function\nA Gst.IteratorResult, as described above.\nMT safe.\nFolds func over the elements of iter. That is to say, func will be called\nas func (object, ret, user_data) for each object in it. The normal use\nof this procedure is to accumulate the results of operating on the objects in\nret.\nThis procedure can be used (and is used internally) to implement the\nGst.Iterator.foreach and Gst.Iterator.find_custom operations.\nThe fold will proceed as long as func returns True. When the iterator has no\nmore arguments, Gst.IteratorResult.DONE will be returned. If func returns False,\nthe fold will stop, and Gst.IteratorResult.OK will be returned. Errors or resyncs\nwill cause fold to return Gst.IteratorResult.ERROR or Gst.IteratorResult.RESYNC as\nappropriate.\nThe iterator will not be freed.\nParameters:\nThe Gst.Iterator to fold over\nthe fold function\nthe seed value passed to the fold function\nuser data passed to the fold function\nA Gst.IteratorResult, as described above.\nMT safe.\n"});