fragment_downloaded_cb({"url":"gstreamer/gstutils.html#gst_type_mark_as_plugin_api","fragment":"\n\tgst_type_mark_as_plugin_api\n\n\n\tGst.prototype.type_mark_as_plugin_api\n\n\n\tGst.type_mark_as_plugin_api\n\nMarks type as plugin API. This should be called in class_init of\nelements that expose new types (i.e. enums, flags or internal GObjects) via\nproperties, signals or pad templates.\nTypes exposed by plugins are not automatically added to the documentation\nas they might originate from another library and should in that case be\ndocumented via that library instead.\nBy marking a type as plugin API it will be included in the documentation of\nthe plugin that defines it.\nParameters:\na GType\na set of GstPluginAPIFlags to further inform cache generation.\n\n\tSince\t\t\t: 1.18\n\t\t\nMarks type as plugin API. This should be called in class_init of\nelements that expose new types (i.e. enums, flags or internal GObjects) via\nproperties, signals or pad templates.\nTypes exposed by plugins are not automatically added to the documentation\nas they might originate from another library and should in that case be\ndocumented via that library instead.\nBy marking a type as plugin API it will be included in the documentation of\nthe plugin that defines it.\nParameters:\na GType\na set of Gst.PluginAPIFlags to further inform cache generation.\n\n\tSince\t\t\t: 1.18\n\t\t\nMarks type as plugin API. This should be called in class_init of\nelements that expose new types (i.e. enums, flags or internal GObjects) via\nproperties, signals or pad templates.\nTypes exposed by plugins are not automatically added to the documentation\nas they might originate from another library and should in that case be\ndocumented via that library instead.\nBy marking a type as plugin API it will be included in the documentation of\nthe plugin that defines it.\nParameters:\na GType\na set of Gst.PluginAPIFlags to further inform cache generation.\n\n\tSince\t\t\t: 1.18\n\t\t\n"});