fragment_downloaded_cb({"url":"gstreamer/gstevent.html#gst_event_new_segment","fragment":"\n\tgst_event_new_segment\n\n\n\tGst.Event.prototype.new_segment\n\n\n\tGst.Event.new_segment\n\nCreate a new SEGMENT event for segment. The segment event can only travel\ndownstream synchronized with the buffer flow and contains timing information\nand playback properties for the buffers that will follow.\nThe segment event marks the range of buffers to be processed. All\ndata not within the segment range is not to be processed. This can be\nused intelligently by plugins to apply more efficient methods of skipping\nunneeded data. The valid range is expressed with the start and stop\nvalues.\nThe time value of the segment is used in conjunction with the start\nvalue to convert the buffer timestamps into the stream time. This is\nusually done in sinks to report the current stream_time.\ntime represents the stream_time of a buffer carrying a timestamp of\nstart. time cannot be -1.\nstart cannot be -1, stop can be -1. If there\nis a valid stop given, it must be greater or equal the start, including\nwhen the indicated playback rate is < 0.\nThe applied_rate value provides information about any rate adjustment that\nhas already been made to the timestamps and content on the buffers of the\nstream. (@rate * applied_rate) should always equal the rate that has been\nrequested for playback. For example, if an element has an input segment\nwith intended playback rate of 2.0 and applied_rate of 1.0, it can adjust\nincoming timestamps and buffer content by half and output a segment event\nwith rate of 1.0 and applied_rate of 2.0\nAfter a segment event, the buffer stream time is calculated with:\ntime + (TIMESTAMP(buf) - start) * ABS (rate * applied_rate)\nParameters:\na GstSegment\nthe new SEGMENT event.\nCreate a new SEGMENT event for segment. The segment event can only travel\ndownstream synchronized with the buffer flow and contains timing information\nand playback properties for the buffers that will follow.\nThe segment event marks the range of buffers to be processed. All\ndata not within the segment range is not to be processed. This can be\nused intelligently by plugins to apply more efficient methods of skipping\nunneeded data. The valid range is expressed with the start and stop\nvalues.\nThe time value of the segment is used in conjunction with the start\nvalue to convert the buffer timestamps into the stream time. This is\nusually done in sinks to report the current stream_time.\ntime represents the stream_time of a buffer carrying a timestamp of\nstart. time cannot be -1.\nstart cannot be -1, stop can be -1. If there\nis a valid stop given, it must be greater or equal the start, including\nwhen the indicated playback rate is < 0.\nThe applied_rate value provides information about any rate adjustment that\nhas already been made to the timestamps and content on the buffers of the\nstream. (@rate * applied_rate) should always equal the rate that has been\nrequested for playback. For example, if an element has an input segment\nwith intended playback rate of 2.0 and applied_rate of 1.0, it can adjust\nincoming timestamps and buffer content by half and output a segment event\nwith rate of 1.0 and applied_rate of 2.0\nAfter a segment event, the buffer stream time is calculated with:\ntime + (TIMESTAMP(buf) - start) * ABS (rate * applied_rate)\nParameters:\na Gst.Segment\nthe new SEGMENT event.\nCreate a new SEGMENT event for segment. The segment event can only travel\ndownstream synchronized with the buffer flow and contains timing information\nand playback properties for the buffers that will follow.\nThe segment event marks the range of buffers to be processed. All\ndata not within the segment range is not to be processed. This can be\nused intelligently by plugins to apply more efficient methods of skipping\nunneeded data. The valid range is expressed with the start and stop\nvalues.\nThe time value of the segment is used in conjunction with the start\nvalue to convert the buffer timestamps into the stream time. This is\nusually done in sinks to report the current stream_time.\ntime represents the stream_time of a buffer carrying a timestamp of\nstart. time cannot be -1.\nstart cannot be -1, stop can be -1. If there\nis a valid stop given, it must be greater or equal the start, including\nwhen the indicated playback rate is < 0.\nThe applied_rate value provides information about any rate adjustment that\nhas already been made to the timestamps and content on the buffers of the\nstream. (@rate * applied_rate) should always equal the rate that has been\nrequested for playback. For example, if an element has an input segment\nwith intended playback rate of 2.0 and applied_rate of 1.0, it can adjust\nincoming timestamps and buffer content by half and output a segment event\nwith rate of 1.0 and applied_rate of 2.0\nAfter a segment event, the buffer stream time is calculated with:\ntime + (TIMESTAMP(buf) - start) * ABS (rate * applied_rate)\nParameters:\na Gst.Segment\nthe new SEGMENT event.\n"});