fragment_downloaded_cb({"url":"gstreamer/gstplugin.html#gst_plugin_add_dependency_simple","fragment":"\n\tgst_plugin_add_dependency_simple\n\n\n\tGst.Plugin.prototype.add_dependency_simple\n\n\n\tGst.Plugin.add_dependency_simple\n\nMake GStreamer aware of external dependencies which affect the feature\nset of this plugin (ie. the elements or typefinders associated with it).\nGStreamer will re-inspect plugins with external dependencies whenever any\nof the external dependencies change. This is useful for plugins which wrap\nother plugin systems, e.g. a plugin which wraps a plugin-based visualisation\nlibrary and makes visualisations available as GStreamer elements, or a\ncodec loader which exposes elements and/or caps dependent on what external\ncodec libraries are currently installed.\nConvenience wrapper function for gst_plugin_add_dependency which\ntakes simple strings as arguments instead of string arrays, with multiple\narguments separated by predefined delimiters (see above).\nParameters:\nthe GstPlugin\none or more environment variables (separated by ':', ';' or ','),\nor NULL. Environment variable names may be followed by a path component\nwhich will be added to the content of the environment variable, e.g.\n\"HOME/.mystuff/plugins:MYSTUFF_PLUGINS_PATH\"\none ore more directory paths (separated by ':' or ';' or ','),\nor NULL. Example: \"/usr/lib/mystuff/plugins\"\none or more file names or file name suffixes (separated by commas),\nor NULL\noptional flags, or GST_PLUGIN_DEPENDENCY_FLAG_NONE\nMake GStreamer aware of external dependencies which affect the feature\nset of this plugin (ie. the elements or typefinders associated with it).\nGStreamer will re-inspect plugins with external dependencies whenever any\nof the external dependencies change. This is useful for plugins which wrap\nother plugin systems, e.g. a plugin which wraps a plugin-based visualisation\nlibrary and makes visualisations available as GStreamer elements, or a\ncodec loader which exposes elements and/or caps dependent on what external\ncodec libraries are currently installed.\nConvenience wrapper function for Gst.Plugin.prototype.add_dependency which\ntakes simple strings as arguments instead of string arrays, with multiple\narguments separated by predefined delimiters (see above).\nParameters:\nthe Gst.Plugin\none or more environment variables (separated by ':', ';' or ','),\nor null. Environment variable names may be followed by a path component\nwhich will be added to the content of the environment variable, e.g.\n\"HOME/.mystuff/plugins:MYSTUFF_PLUGINS_PATH\"\none ore more directory paths (separated by ':' or ';' or ','),\nor null. Example: \"/usr/lib/mystuff/plugins\"\none or more file names or file name suffixes (separated by commas),\nor null\noptional flags, or Gst.PluginDependencyFlags.NONE\nMake GStreamer aware of external dependencies which affect the feature\nset of this plugin (ie. the elements or typefinders associated with it).\nGStreamer will re-inspect plugins with external dependencies whenever any\nof the external dependencies change. This is useful for plugins which wrap\nother plugin systems, e.g. a plugin which wraps a plugin-based visualisation\nlibrary and makes visualisations available as GStreamer elements, or a\ncodec loader which exposes elements and/or caps dependent on what external\ncodec libraries are currently installed.\nConvenience wrapper function for Gst.Plugin.add_dependency which\ntakes simple strings as arguments instead of string arrays, with multiple\narguments separated by predefined delimiters (see above).\nParameters:\nthe Gst.Plugin\none or more environment variables (separated by ':', ';' or ','),\nor None. Environment variable names may be followed by a path component\nwhich will be added to the content of the environment variable, e.g.\n\"HOME/.mystuff/plugins:MYSTUFF_PLUGINS_PATH\"\none ore more directory paths (separated by ':' or ';' or ','),\nor None. Example: \"/usr/lib/mystuff/plugins\"\none or more file names or file name suffixes (separated by commas),\nor None\noptional flags, or Gst.PluginDependencyFlags.NONE\n"});