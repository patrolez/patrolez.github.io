fragment_downloaded_cb({"url":"gstreamer/gstpad.html#GstPadFlags","fragment":"\n\tGstPadFlags\n\nMembers\n\n\tGst.PadFlags\n\nMembers\n\n\tGst.PadFlags\n\nMembers\nPad state flags\nis dataflow on a pad blocked\nis pad flushing\nis pad in EOS state\nis pad currently blocking on a buffer or event\nensure that there is a parent object before calling\ninto the pad callbacks.\nthe pad should be reconfigured/renegotiated.\nThe flag has to be unset manually after\nreconfiguration happened.\nthe pad has pending events\nthe pad is using fixed caps. This means that\nonce the caps are set on the pad, the default caps query function\nwill only return those caps.\nthe default event and query handler will forward\nall events and queries to the internally linked pads\ninstead of discarding them.\nthe default query handler will forward\nallocation queries to the internally linked pads\ninstead of discarding them.\nthe default query handler will forward\nscheduling queries to the internally linked pads\ninstead of discarding them.\nthe default accept-caps handler will check\nit the caps intersect the query-caps result instead\nof checking for a subset. This is interesting for\nparsers that can accept incompletely specified caps.\nthe default accept-caps handler will use\nthe template pad caps instead of query caps to\ncompare with the accept caps. Use this in combination\nwith GST_PAD_FLAG_ACCEPT_INTERSECT. (Since: 1.6)\noffset to define more flags\nPad state flags\nis dataflow on a pad blocked\nis pad flushing\nis pad in EOS state\nis pad currently blocking on a buffer or event\nensure that there is a parent object before calling\ninto the pad callbacks.\nthe pad should be reconfigured/renegotiated.\nThe flag has to be unset manually after\nreconfiguration happened.\nthe pad has pending events\nthe pad is using fixed caps. This means that\nonce the caps are set on the pad, the default caps query function\nwill only return those caps.\nthe default event and query handler will forward\nall events and queries to the internally linked pads\ninstead of discarding them.\nthe default query handler will forward\nallocation queries to the internally linked pads\ninstead of discarding them.\nthe default query handler will forward\nscheduling queries to the internally linked pads\ninstead of discarding them.\nthe default accept-caps handler will check\nit the caps intersect the query-caps result instead\nof checking for a subset. This is interesting for\nparsers that can accept incompletely specified caps.\nthe default accept-caps handler will use\nthe template pad caps instead of query caps to\ncompare with the accept caps. Use this in combination\nwith Gst.PadFlags.ACCEPT_INTERSECT. (Since: 1.6)\noffset to define more flags\nPad state flags\nis dataflow on a pad blocked\nis pad flushing\nis pad in EOS state\nis pad currently blocking on a buffer or event\nensure that there is a parent object before calling\ninto the pad callbacks.\nthe pad should be reconfigured/renegotiated.\nThe flag has to be unset manually after\nreconfiguration happened.\nthe pad has pending events\nthe pad is using fixed caps. This means that\nonce the caps are set on the pad, the default caps query function\nwill only return those caps.\nthe default event and query handler will forward\nall events and queries to the internally linked pads\ninstead of discarding them.\nthe default query handler will forward\nallocation queries to the internally linked pads\ninstead of discarding them.\nthe default query handler will forward\nscheduling queries to the internally linked pads\ninstead of discarding them.\nthe default accept-caps handler will check\nit the caps intersect the query-caps result instead\nof checking for a subset. This is interesting for\nparsers that can accept incompletely specified caps.\nthe default accept-caps handler will use\nthe template pad caps instead of query caps to\ncompare with the accept caps. Use this in combination\nwith Gst.PadFlags.ACCEPT_INTERSECT. (Since: 1.6)\noffset to define more flags\n"});