fragment_downloaded_cb({"url":"gstreamer/gstallocator.html#gst_allocation_params_new","fragment":"\n\tgst_allocation_params_new\n\n\n\tGst.AllocationParams.prototype.new\n\n\n\tGst.AllocationParams.new\n\nCreate a new GstAllocationParams on the heap.  This function is for\nuse in GStreamer language bindings.  In your own code, you can just\ndeclare a GstAllocationParams on the stack or in a struct, and\ncall gst_allocation_params_init to initialize it.\nYou do not need to call gst_allocation_params_init on the instance\nreturned by this function.\na new GstAllocationParams\n\n\tSince\t\t\t: 1.20\n\t\t\nCreate a new Gst.AllocationParams on the heap.  This function is for\nuse in GStreamer language bindings.  In your own code, you can just\ndeclare a Gst.AllocationParams on the stack or in a struct, and\ncall Gst.AllocationParams.prototype.init to initialize it.\nYou do not need to call Gst.AllocationParams.prototype.init on the instance\nreturned by this function.\na new Gst.AllocationParams\n\n\tSince\t\t\t: 1.20\n\t\t\nCreate a new Gst.AllocationParams on the heap.  This function is for\nuse in GStreamer language bindings.  In your own code, you can just\ndeclare a Gst.AllocationParams on the stack or in a struct, and\ncall Gst.AllocationParams.init to initialize it.\nYou do not need to call Gst.AllocationParams.init on the instance\nreturned by this function.\na new Gst.AllocationParams\n\n\tSince\t\t\t: 1.20\n\t\t\n"});