fragment_downloaded_cb({"url":"gstreamer/gstbus.html#gst_bus_enable_sync_message_emission","fragment":"\n\tgst_bus_enable_sync_message_emission\n\n\n\tGst.Bus.prototype.enable_sync_message_emission\n\n\n\tGst.Bus.enable_sync_message_emission\n\nInstructs GStreamer to emit the \"sync-message\" signal after running the bus's\nsync handler. This function is here so that code can ensure that they can\nsynchronously receive messages without having to affect what the bin's sync\nhandler is.\nThis function may be called multiple times. To clean up, the caller is\nresponsible for calling gst_bus_disable_sync_message_emission as many times\nas this function is called.\nWhile this function looks similar to gst_bus_add_signal_watch, it is not\nexactly the same -- this function enables *synchronous* emission of\nsignals when messages arrive; gst_bus_add_signal_watch adds an idle callback\nto pop messages off the bus asynchronously. The sync-message signal\ncomes from the thread of whatever object posted the message; the \"message\"\nsignal is marshalled to the main thread via the GMainLoop.\nParameters:\na GstBus on which you want to receive the \"sync-message\" signal\nInstructs GStreamer to emit the \"sync-message\" signal after running the bus's\nsync handler. This function is here so that code can ensure that they can\nsynchronously receive messages without having to affect what the bin's sync\nhandler is.\nThis function may be called multiple times. To clean up, the caller is\nresponsible for calling Gst.Bus.prototype.disable_sync_message_emission as many times\nas this function is called.\nWhile this function looks similar to Gst.Bus.prototype.add_signal_watch, it is not\nexactly the same -- this function enables *synchronous* emission of\nsignals when messages arrive; Gst.Bus.prototype.add_signal_watch adds an idle callback\nto pop messages off the bus asynchronously. The sync-message signal\ncomes from the thread of whatever object posted the message; the \"message\"\nsignal is marshalled to the main thread via the GLib.MainLoop.\nParameters:\na Gst.Bus on which you want to receive the \"sync-message\" signal\nInstructs GStreamer to emit the \"sync-message\" signal after running the bus's\nsync handler. This function is here so that code can ensure that they can\nsynchronously receive messages without having to affect what the bin's sync\nhandler is.\nThis function may be called multiple times. To clean up, the caller is\nresponsible for calling Gst.Bus.disable_sync_message_emission as many times\nas this function is called.\nWhile this function looks similar to Gst.Bus.add_signal_watch, it is not\nexactly the same -- this function enables *synchronous* emission of\nsignals when messages arrive; Gst.Bus.add_signal_watch adds an idle callback\nto pop messages off the bus asynchronously. The sync-message signal\ncomes from the thread of whatever object posted the message; the \"message\"\nsignal is marshalled to the main thread via the GLib.MainLoop.\nParameters:\na Gst.Bus on which you want to receive the \"sync-message\" signal\n"});