fragment_downloaded_cb({"url":"gstreamer/gstmemory.html#gstmemory-page","fragment":"GstMemory\nGstMemory is a lightweight refcounted object that wraps a region of memory.\nThey are typically used to manage the data of a GstBuffer.\nA GstMemory object has an allocated region of memory of maxsize. The maximum\nsize does not change during the lifetime of the memory object. The memory\nalso has an offset and size property that specifies the valid range of memory\nin the allocated region.\nMemory is usually created by allocators with a gst_allocator_alloc\nmethod call. When NULL is used as the allocator, the default allocator will\nbe used.\nNew allocators can be registered with gst_allocator_register.\nAllocators are identified by name and can be retrieved with\ngst_allocator_find. gst_allocator_set_default can be used to change the\ndefault allocator.\nNew memory can be created with gst_memory_new_wrapped that wraps the memory\nallocated elsewhere.\nRefcounting of the memory block is performed with gst_memory_ref and\ngst_memory_unref.\nThe size of the memory can be retrieved and changed with\ngst_memory_get_sizes and gst_memory_resize respectively.\nGetting access to the data of the memory is performed with gst_memory_map.\nThe call will return a pointer to offset bytes into the region of memory.\nAfter the memory access is completed, gst_memory_unmap should be called.\nMemory can be copied with gst_memory_copy, which will return a writable\ncopy. gst_memory_share will create a new memory block that shares the\nmemory with an existing memory block at a custom offset and with a custom\nsize.\nMemory can be efficiently merged when gst_memory_is_span returns TRUE.\n"});