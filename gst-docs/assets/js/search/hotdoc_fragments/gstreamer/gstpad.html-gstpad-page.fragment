fragment_downloaded_cb({"url":"gstreamer/gstpad.html#gstpad-page","fragment":"GstPad\nA GstElement is linked to other elements via \"pads\", which are extremely\nlight-weight generic link points.\nPads have a GstPadDirection, source pads produce data, sink pads consume\ndata.\nPads are typically created from a GstPadTemplate with\ngst_pad_new_from_template and are then added to a GstElement. This usually\nhappens when the element is created but it can also happen dynamically based\non the data that the element is processing or based on the pads that the\napplication requests.\nPads without pad templates can be created with gst_pad_new,\nwhich takes a direction and a name as an argument.  If the name is NULL,\nthen a guaranteed unique name will be assigned to it.\nA GstElement creating a pad will typically use the various\ngst_pad_set_*_function() calls to register callbacks for events, queries or\ndataflow on the pads.\ngst_pad_get_parent will retrieve the GstElement that owns the pad.\nAfter two pads are retrieved from an element by gst_element_get_static_pad,\nthe pads can be linked with gst_pad_link. (For quick links,\nyou can also use gst_element_link, which will make the obvious\nlink for you if it's straightforward.). Pads can be unlinked again with\ngst_pad_unlink. gst_pad_get_peer can be used to check what the pad is\nlinked to.\nBefore dataflow is possible on the pads, they need to be activated with\ngst_pad_set_active.\ngst_pad_query and gst_pad_peer_query can be used to query various\nproperties of the pad and the stream.\nTo send a GstEvent on a pad, use gst_pad_send_event and\ngst_pad_push_event. Some events will be sticky on the pad, meaning that\nafter they pass on the pad they can be queried later with\ngst_pad_get_sticky_event and gst_pad_sticky_events_foreach.\ngst_pad_get_current_caps and gst_pad_has_current_caps are convenience\nfunctions to query the current sticky CAPS event on a pad.\nGstElements will use gst_pad_push and gst_pad_pull_range to push out\nor pull in a buffer.\nThe dataflow, events and queries that happen on a pad can be monitored with\nprobes that can be installed with gst_pad_add_probe. gst_pad_is_blocked\ncan be used to check if a block probe is installed on the pad.\ngst_pad_is_blocking checks if the blocking probe is currently blocking the\npad. gst_pad_remove_probe is used to remove a previously installed probe\nand unblock blocking probes if any.\nPad have an offset that can be retrieved with gst_pad_get_offset. This\noffset will be applied to the running_time of all data passing over the pad.\ngst_pad_set_offset can be used to change the offset.\nConvenience functions exist to start, pause and stop the task on a pad with\ngst_pad_start_task, gst_pad_pause_task and gst_pad_stop_task\nrespectively.\n"});