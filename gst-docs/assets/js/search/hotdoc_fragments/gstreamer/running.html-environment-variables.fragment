fragment_downloaded_cb({"url":"gstreamer/running.html#environment-variables","fragment":"Environment variables\nGStreamer inspects a few of environment variables in addition to\nstandard variables like LANG, PATH or HOME.\nGST_PLUGIN_SYSTEM_PATH, GST_PLUGIN_SYSTEM_PATH_1_0.\nThis environment variable can be set to a colon-separated list of paths\n(or semicolon-separated list on Windows). If this variable is not set,\nGStreamer will fill in this list for you with\nplug-ins in the user's home directory, or rather the user's \"data\nhome\" directory according to the xdg base dir specification.\nUsually this will be a directory called plugins inside the\n.local/share/gstreamer-GST_API_VERSION directory in the user's\nhome directory by default, though this search path may change if the\nXDG_DATA_HOME environment variable is set.\nplug-ins installed system-wide. On this system, they are stored in\n``.\nGStreamer will scan these paths for GStreamer plug-ins. These plug-ins\nwill be loaded after the plug-ins in the GST_PLUGIN_PATH variable\nbelow. The paths are scanned in the given order. This allows a user to\noverride system-installed plug-ins with his own versions.\nThe GST_PLUGIN_SYSTEM_PATH_1_0 variant is useful if both the old\nGStreamer 0.10 version and the new GStreamer 1.0 version need to be\npointed to new plugin paths. The latter will use the _1_0 variant over\nthe non-versioned one if it is set.\nSetting this variable to an empty string will cause GStreamer not to\nscan any system paths at all for plug-ins. This can be useful if you're\nrunning a development environment (for development purposes) or while\nrunning testsuites.\nGST_PLUGIN_PATH, GST_PLUGIN_PATH_1_0.\nThis environment variable can be set to a colon-separated list of paths\n(or a semicolon-separated list on Windows). GStreamer will scan these\npaths for GStreamer plug-ins. These plug-ins will be loaded in addition\nto, and before, the plug-ins in the system paths.\nThe GST_PLUGIN_PATH_1_0 variant is useful if both the old GStreamer\n0.10 version and the new GStreamer 1.0 version need to be pointed to new\nplugin paths. The latter will use the _1_0 variant over the\nnon-versioned one if it is set.\nGST_DEBUG.\nIf GStreamer has been configured with --enable-gst-debug=yes, this\nvariable can be set to a list of debug options, which cause GStreamer to\nprint out different types of debugging information to stderr.\nThe variable takes a comma-separated list of category_name:level\npairs to set specific levels for the individual categories. The level\nvalue ranges from 0 (nothing) to 9 (MEMDUMP).\n1 - ERROR\n:   Logs all fatal errors. These are errors that do not allow the core\nor elements to perform the requested action. The application can\nstill recover if programmed to handle the conditions that triggered\nthe error.\n2 - WARNING\n:   Logs all warnings. Typically these are non-fatal, but user-visible\nproblems are expected to happen.\n3 - FIXME\n:   Logs all fixme messages. Fixme messages are messages that indicate\nthat something in the executed code path is not fully implemented or\nhandled yet. The purpose of this message is to make it easier to\nspot incomplete/unfinished pieces of code when reading the debug\nlog.\n4 - INFO\n:   Logs all informational messages. These are typically used for events\nin the system that only happen once, or are important and rare\nenough to be logged at this level.\n5 - DEBUG\n:   Logs all debug messages. These are general debug messages for events\nthat happen only a limited number of times during an object's\nlifetime; these include setup, teardown, change of parameters, ...\n6 - LOG\n:   Logs all log messages. These are messages for events that happen\nrepeatedly during an object's lifetime; these include streaming and\nsteady-state conditions.\n7 - TRACE\n:   Logs all trace messages. These messages for events that happen\nrepeatedly during an object's lifetime such as the ref/unref\ncycles.\n9 - MEMDUMP\n:   Log all memory dump messages. Memory dump messages are used to log\n(small) chunks of data as memory dumps in the log. They will be\ndisplayed as hexdump with ASCII characters.\nThe category_name can contain \"*\" as a wildcard.\nFor example, setting GST_DEBUG to GST_AUTOPLUG:6,GST_ELEMENT_*:4,\nwill cause the GST_AUTOPLUG category to be logged at full LOG level,\nwhile all categories starting with GST_ELEMENT_ will be logged at\nINFO level.\nTo get all possible debug output, set GST_DEBUG to *:9. For debugging\npurposes a *:6 debug log is usually the most useful, as it contains\nall important information, but hides a lot of noise such as refs/unrefs.\nFor bug reporting purposes, a *:6 log is also what will be requested\nusually. It's often also worth running with *:3 to see if there are\nany non-fatal errors or warnings that might be related to the problem at\nhand.\nSince GStreamer 1.2 it is also possible to specify debug levels by name,\ne.g. GST_DEBUG=*:WARNING,*audio*:LOG\nThe categories and log levels are evaluated from left to right, with later\nentries overriding any previously-set levels for categories, e.g.\nGST_DEBUG=decodebin:LOG,*:INFO will set the decodebin category back to\nINFO level whereas GST_DEBUG=*:INFO,decodebin:LOG will log everything at\nINFO level apart from decodebin which will be logged at LOG level.\nGST_DEBUG_NO_COLOR.\nSet this environment variable to any value (\"1\" typically) to switch\noff colouring in GST_DEBUG output. This has the same effect as\nspecifying the --gst-debug-no-color or --gst-debug-color-mode=off\ncommand line option to well-behaved GStreamer applications (ie. those\nthat pass command-line options correctly to GStreamer). This is\nparticularly useful to reduce the size of debug output and also allows\nfor the output to be compressed much better than with colours turned on.\nHas the same effect as setting GST_DEBUG_COLOR_MODE environment\nvariable to \"off\".\nGST_DEBUG_COLOR_MODE.\nSet this environment variable to change log colouring in GST_DEBUG output.\nPossible values:\non: Enables debug log output coloring. Uses default coloring method for\ncurrent platform. This is the default.\noff: Disables debug log output coloring. This has the same effect as\nspecifying the --gst-debug-color-mode=off command line option to well-behaved\nGStreamer applications (ie. those that pass command-line options correctly to\nGStreamer). This is particularly useful to reduce the size of debug output and\nalso allows for the output to be compressed much better than with colours turned\non. Has the same effect as setting GST_DEBUG_NO_COLOR environment variable to\nany value.\nauto: Same as on.\ndisable: Same as off.\nunix: Enables debug log output coloring and forces the use of UNIX termial\ncodes for coloring, even if this method is not normally used on current\nplatform. This has the same effect as specifying the\n--gst-debug-color-mode=unix command line option to well-behaved GStreamer\napplications (ie. those that pass command-line options correctly to GStreamer).\nThis is particularly useful to dump debug output into a file on non-UNIX\nplatforms to be sent to developers who have viewers that support UNIX terminal\ncodes.\nGST_DEBUG_OPTIONS.\nThis environment variable can be used to tweak the behaviour of the\ndebugging system. Currently the only options supported are\n\"pretty-tags\" and \"full-tags\". In \"pretty-tags\" mode (the\ndefault), taglists in the debug log will be serialized so that only the\nfirst few and last few bytes of a buffer-type tag will be serialized\ninto the log, to avoid dumping hundreds of lines of useless output into\nthe log in case of large image tags and the like.\nGST_DEBUG_DUMP_DOT_DIR.\nSet this environment variable to a path to turn on all\nGST_DEBUG_BIN_TO_DOT_FILE or GST_DEBUG_BIN_TO_DOT_FILE_WITH_TS calls and\nhave the dot files in that location.\nThis will only work if the application in question makes these calls in\nstrategic places (like when the pipeline state changes or an error\noccurs). gst-launch-1,0 is one such application.\nWhen gst-launch-1.0 changes state through NULL to PLAYING\nand back to NULL, a dot file is generated on each state change. To have\ngst-launch-1.0 write a snapshot of the pipeline state,\nsend a SIGHUP to the gst-launch-1.0 process.\nThese .dot files can then be turned into images using the 'dot'\nutility from the graphviz set of tools, like this:\ndot foo.dot -Tsvg -o foo.svg or dot foo.dot -Tpng -o foo.png or\ndot foo.dot -Tjpg -o foo.jpg.\nThere is also a utility called xdot which allows you to view the dot\nfile directly without converting it first.\nGST_REGISTRY, GST_REGISTRY_1_0.\nSet this environment variable to make GStreamer use a different file for\nthe plugin cache / registry than the default one. This is useful when\noperating in a separate environment which should not affect the default\ncache in the user's home directory.\nGST_REGISTRY_FORK.\nSet this environment variable to \"no\" to prevent GStreamer from\nforking on startup in order to update the plugin registry. This is\nuseful for debugging purposes, but should not be used under normal\ncircumstances, since it means that plugins may be loaded into memory\neven if they are not needed by the application.\nGST_REGISTRY_UPDATE.\nSet this environment variable to \"no\" to prevent GStreamer from\nupdating the plugin registry. This is useful for embedded device which\nis not updating the plugins frequently, it will save time when doing\ngst_init().\nGST_REGISTRY_MODE. (Since: 1.20)\nSet this environment variable to make Gstreamer change the file\npermissions of the plugin cache / registry. If not set, default is to\nlimit read / write permissions to current user only. Set mode shall\nbe from one to four octal digits as used in chmod.\nGST_TRACE.\nEnable memory allocation tracing. Most GStreamer objects have support\nfor tracing the number of unfreed objects and their memory pointers.\nThe variable takes a comma-separated list of tracing options to enable.\nlive\n:   Counts all live objects and dumps an overview of the number of\nunfreed objects at program exit.\nmem-live\n:   Keep track of the unfreed memory pointers and dump an overview of\nall unfreed memory at program exit. Together with a level 9 debug\nlog this can be used to follow the lifecycle of leaked objects in\norder to track down where they are leaked. This can be useful for\ndebugging memory leaks in situations where tools such as valgrind\nare not available, or not an option.\nUse all to enable all tracing flags.\nGST_DEBUG_FILE.\nSet this variable to a file path to redirect all GStreamer debug\nmessages to this file. If left unset, debug messages with be output unto\nthe standard error. The %p pattern is replaced with the PID and the %r\nwith a random number.\nORC_CODE.\nUseful Orc environment variable. Set ORC_CODE=debug to enable debuggers\nsuch as gdb to create useful backtraces from Orc-generated code. Set\nORC_CODE=backup or ORC_CODE=emulate if you suspect Orc's SIMD code\ngenerator is producing incorrect code (Quite a few important GStreamer\nplugins like videotestsrc, audioconvert or audioresample use Orc). One\ncan also combine flags like ORC_CODE=backup,debug.\nG_DEBUG.\nUseful GLib environment variable. Set G_DEBUG=fatal_warnings to make\nGStreamer programs abort when a critical warning such as an assertion\nfailure occurs. This is useful if you want to find out which part of the\ncode caused that warning to be triggered and under what circumstances.\nSimply set G_DEBUG as mentioned above and run the program in gdb (or\nlet it core dump). Then get a stack trace in the usual way.\nG_SLICE.\nUseful GLib environment variable. Set G_SLICE=always-malloc when\nrunning GStreamer programs in valgrind, or debugging memory leaks with\nother tools. See the GLib API reference for more details.\nGST_TAG_ENCODING.\nTry this character encoding first for tag-related strings where the\nencoding is not defined and which are not UTF-8 already. By default the\ncurrent locale will be tried (if not UTF-8).\nGST_TAG_ID3_ENCODING.\nTry this character encoding first for ID3 tag-related strings where the\nencoding is not defined and which are not UTF-8 already. By default the\ncurrent locale will be tried (if not UTF-8).\nGST_TAG_ID3V1_ENCODING.\nTry this character encoding first for ID3v1 tag-related strings where\nthe encoding does not look like UTF-8.\nGST_GL_WINDOW.\nInfluences the window system to use by the GStreamer OpenGL library.\nCommon values are 'x11', 'wayland', 'surfaceless', 'win32' or 'cocoa'.\nGST_GL_PLATFORM.\nInfluences the OpenGL platform to use by the GStreamer OpenGL library.\nCommon values are 'egl', 'glx', 'wgl' or 'cgl'.\nGST_GL_API.\nInfluences the OpenGL API requested by the OpenGL platform. Common\nvalues are 'opengl' or 'gles2'.\nGST_PLUGIN_FEATURE_RANK. (Since: 1.18)\nThis environment variable can be used to adjust rank of each plugin feature.\nThe variable takes a comma-separated list of plugin_feature:rank\npairs to set specific ranks for the individual plugin features.\nThe rank can be an arbitrary numerical value or one of pre-defined rank values\nfrom NONE(0) to PRIMARY(256) in case-insensitive manner.\nIn addition to the pre-defined rank values, MAX is an acceptable value to set\nhigher rank than the rank of other existing plugin features.\nExample: GST_PLUGIN_FEATURE_RANK=foo:PRIMARY,bar:primary,foobar:128\nAs a result of the above example,\nthe foo andbar plugin feature rank values are PRIMARY(256)\nand SECONDARY(128) rank value will be assigned to foobar.\nGST_XINITTHREADS.\nSet this variable when using components that rely on X11, such as ximagesrc,\nfrom gst-launch-1.0 or other command line applications. However, applications\nshould not depend on this variable and should make their own XInitThreads()\ncall as early as possible.\n\n\nplug-ins in the user's home directory, or rather the user's \"data\nhome\" directory according to the xdg base dir specification.\nUsually this will be a directory called plugins inside the\n.local/share/gstreamer-GST_API_VERSION directory in the user's\nhome directory by default, though this search path may change if the\nXDG_DATA_HOME environment variable is set.\n\n\nplug-ins installed system-wide. On this system, they are stored in\n``.\n\n\n"});