fragment_downloaded_cb({"url":"gstreamer/gstinfo.html#GstDebugLevel","fragment":"\n\tGstDebugLevel\n\nMembers\n\n\tGst.DebugLevel\n\nMembers\n\n\tGst.DebugLevel\n\nMembers\nThe level defines the importance of a debugging message. The more important a\nmessage is, the greater the probability that the debugging system outputs it.\nNo debugging level specified or desired. Used to deactivate\ndebugging output.\nError messages are to be used only when an error occurred\nthat stops the application from keeping working correctly.\nAn examples is gst_element_error, which outputs a message with this priority.\nIt does not mean that the application is terminating as with g_error.\nWarning messages are to inform about abnormal behaviour\nthat could lead to problems or weird behaviour later on. An example of this\nwould be clocking issues (\"your computer is pretty slow\") or broken input\ndata (\"Can't synchronize to stream.\")\nFixme messages are messages that indicate that something\nin the executed code path is not fully implemented or handled yet. Note\nthat this does not replace proper error handling in any way, the purpose\nof this message is to make it easier to spot incomplete/unfinished pieces\nof code when reading the debug log.\nInformational messages should be used to keep the developer\nupdated about what is happening.\nExamples where this should be used are when a typefind function has\nsuccessfully determined the type of the stream or when an mp3 plugin detects\nthe format to be used. (\"This file has mono sound.\")\nDebugging messages should be used when something common\nhappens that is not the expected default behavior, or something that's\nuseful to know but doesn't happen all the time (ie. per loop iteration or\nbuffer processed or event handled).\nAn example would be notifications about state changes or receiving/sending\nof events.\nLog messages are messages that are very common but might be\nuseful to know. As a rule of thumb a pipeline that is running as expected\nshould never output anything else but LOG messages whilst processing data.\nUse this log level to log recurring information in chain functions and\nloop functions, for example.\nTracing-related messages.\nExamples for this are referencing/dereferencing of objects.\nmemory dump messages are used to log (small) chunks of\ndata as memory dumps in the log. They will be displayed as hexdump with\nASCII characters.\nThe number of defined debugging levels.\nThe level defines the importance of a debugging message. The more important a\nmessage is, the greater the probability that the debugging system outputs it.\nNo debugging level specified or desired. Used to deactivate\ndebugging output.\nError messages are to be used only when an error occurred\nthat stops the application from keeping working correctly.\nAn examples is gst_element_error, which outputs a message with this priority.\nIt does not mean that the application is terminating as with g_error.\nWarning messages are to inform about abnormal behaviour\nthat could lead to problems or weird behaviour later on. An example of this\nwould be clocking issues (\"your computer is pretty slow\") or broken input\ndata (\"Can't synchronize to stream.\")\nFixme messages are messages that indicate that something\nin the executed code path is not fully implemented or handled yet. Note\nthat this does not replace proper error handling in any way, the purpose\nof this message is to make it easier to spot incomplete/unfinished pieces\nof code when reading the debug log.\nInformational messages should be used to keep the developer\nupdated about what is happening.\nExamples where this should be used are when a typefind function has\nsuccessfully determined the type of the stream or when an mp3 plugin detects\nthe format to be used. (\"This file has mono sound.\")\nDebugging messages should be used when something common\nhappens that is not the expected default behavior, or something that's\nuseful to know but doesn't happen all the time (ie. per loop iteration or\nbuffer processed or event handled).\nAn example would be notifications about state changes or receiving/sending\nof events.\nLog messages are messages that are very common but might be\nuseful to know. As a rule of thumb a pipeline that is running as expected\nshould never output anything else but LOG messages whilst processing data.\nUse this log level to log recurring information in chain functions and\nloop functions, for example.\nTracing-related messages.\nExamples for this are referencing/dereferencing of objects.\nmemory dump messages are used to log (small) chunks of\ndata as memory dumps in the log. They will be displayed as hexdump with\nASCII characters.\nThe number of defined debugging levels.\nThe level defines the importance of a debugging message. The more important a\nmessage is, the greater the probability that the debugging system outputs it.\nNo debugging level specified or desired. Used to deactivate\ndebugging output.\nError messages are to be used only when an error occurred\nthat stops the application from keeping working correctly.\nAn examples is gst_element_error, which outputs a message with this priority.\nIt does not mean that the application is terminating as with g_error.\nWarning messages are to inform about abnormal behaviour\nthat could lead to problems or weird behaviour later on. An example of this\nwould be clocking issues (\"your computer is pretty slow\") or broken input\ndata (\"Can't synchronize to stream.\")\nFixme messages are messages that indicate that something\nin the executed code path is not fully implemented or handled yet. Note\nthat this does not replace proper error handling in any way, the purpose\nof this message is to make it easier to spot incomplete/unfinished pieces\nof code when reading the debug log.\nInformational messages should be used to keep the developer\nupdated about what is happening.\nExamples where this should be used are when a typefind function has\nsuccessfully determined the type of the stream or when an mp3 plugin detects\nthe format to be used. (\"This file has mono sound.\")\nDebugging messages should be used when something common\nhappens that is not the expected default behavior, or something that's\nuseful to know but doesn't happen all the time (ie. per loop iteration or\nbuffer processed or event handled).\nAn example would be notifications about state changes or receiving/sending\nof events.\nLog messages are messages that are very common but might be\nuseful to know. As a rule of thumb a pipeline that is running as expected\nshould never output anything else but LOG messages whilst processing data.\nUse this log level to log recurring information in chain functions and\nloop functions, for example.\nTracing-related messages.\nExamples for this are referencing/dereferencing of objects.\nmemory dump messages are used to log (small) chunks of\ndata as memory dumps in the log. They will be displayed as hexdump with\nASCII characters.\nThe number of defined debugging levels.\n"});