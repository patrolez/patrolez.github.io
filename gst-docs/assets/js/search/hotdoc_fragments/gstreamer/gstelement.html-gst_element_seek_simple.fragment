fragment_downloaded_cb({"url":"gstreamer/gstelement.html#gst_element_seek_simple","fragment":"\n\tgst_element_seek_simple\n\n\n\tGst.Element.prototype.seek_simple\n\n\n\tGst.Element.seek_simple\n\nSimple API to perform a seek on the given element, meaning it just seeks\nto the given position relative to the start of the stream. For more complex\noperations like segment seeks (e.g. for looping) or changing the playback\nrate or seeking relative to the last configured playback segment you should\nuse gst_element_seek.\nIn a completely prerolled PAUSED or PLAYING pipeline, seeking is always\nguaranteed to return TRUE on a seekable media type or FALSE when the media\ntype is certainly not seekable (such as a live stream).\nSome elements allow for seeking in the READY state, in this\ncase they will store the seek event and execute it when they are put to\nPAUSED. If the element supports seek in READY, it will always return TRUE when\nit receives the event in the READY state.\nParameters:\na GstElement to seek on\na GstFormat to execute the seek in, such as GST_FORMAT_TIME\nseek options; playback applications will usually want to use\nGST_SEEK_FLAG_FLUSH | GST_SEEK_FLAG_KEY_UNIT here\nposition to seek to (relative to the start); if you are doing\na seek in GST_FORMAT_TIME this value is in nanoseconds -\nmultiply with GST_SECOND to convert seconds to nanoseconds or\nwith GST_MSECOND to convert milliseconds to nanoseconds.\nTRUE if the seek operation succeeded. Flushing seeks will trigger a\npreroll, which will emit GST_MESSAGE_ASYNC_DONE.\nSimple API to perform a seek on the given element, meaning it just seeks\nto the given position relative to the start of the stream. For more complex\noperations like segment seeks (e.g. for looping) or changing the playback\nrate or seeking relative to the last configured playback segment you should\nuse Gst.Element.prototype.seek.\nIn a completely prerolled PAUSED or PLAYING pipeline, seeking is always\nguaranteed to return true on a seekable media type or false when the media\ntype is certainly not seekable (such as a live stream).\nSome elements allow for seeking in the READY state, in this\ncase they will store the seek event and execute it when they are put to\nPAUSED. If the element supports seek in READY, it will always return true when\nit receives the event in the READY state.\nParameters:\na Gst.Element to seek on\na Gst.Format to execute the seek in, such as Gst.Format.TIME\nseek options; playback applications will usually want to use\nGST_SEEK_FLAG_FLUSH | GST_SEEK_FLAG_KEY_UNIT here\nposition to seek to (relative to the start); if you are doing\na seek in Gst.Format.TIME this value is in nanoseconds -\nmultiply with Gst.SECOND to convert seconds to nanoseconds or\nwith Gst.MSECOND to convert milliseconds to nanoseconds.\ntrue if the seek operation succeeded. Flushing seeks will trigger a\npreroll, which will emit Gst.MessageType.ASYNC_DONE.\nSimple API to perform a seek on the given element, meaning it just seeks\nto the given position relative to the start of the stream. For more complex\noperations like segment seeks (e.g. for looping) or changing the playback\nrate or seeking relative to the last configured playback segment you should\nuse Gst.Element.seek.\nIn a completely prerolled PAUSED or PLAYING pipeline, seeking is always\nguaranteed to return True on a seekable media type or False when the media\ntype is certainly not seekable (such as a live stream).\nSome elements allow for seeking in the READY state, in this\ncase they will store the seek event and execute it when they are put to\nPAUSED. If the element supports seek in READY, it will always return True when\nit receives the event in the READY state.\nParameters:\na Gst.Element to seek on\na Gst.Format to execute the seek in, such as Gst.Format.TIME\nseek options; playback applications will usually want to use\nGST_SEEK_FLAG_FLUSH | GST_SEEK_FLAG_KEY_UNIT here\nposition to seek to (relative to the start); if you are doing\na seek in Gst.Format.TIME this value is in nanoseconds -\nmultiply with Gst.SECOND to convert seconds to nanoseconds or\nwith Gst.MSECOND to convert milliseconds to nanoseconds.\nTrue if the seek operation succeeded. Flushing seeks will trigger a\npreroll, which will emit Gst.MessageType.ASYNC_DONE.\n"});