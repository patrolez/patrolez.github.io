fragment_downloaded_cb({"url":"gstreamer/gstbin.html#gstbin-page","fragment":"GstBin\nGstBin is an element that can contain other GstElement, allowing them to be\nmanaged as a group.\nPads from the child elements can be ghosted to the bin, see GstGhostPad.\nThis makes the bin look like any other elements and enables creation of\nhigher-level abstraction elements.\nA new GstBin is created with gst_bin_new. Use a GstPipeline instead if you\nwant to create a toplevel bin because a normal bin doesn't have a bus or\nhandle clock distribution of its own.\nAfter the bin has been created you will typically add elements to it with\ngst_bin_add. You can remove elements with gst_bin_remove.\nAn element can be retrieved from a bin with gst_bin_get_by_name, using the\nelements name. gst_bin_get_by_name_recurse_up is mainly used for internal\npurposes and will query the parent bins when the element is not found in the\ncurrent bin.\nAn iterator of elements in a bin can be retrieved with\ngst_bin_iterate_elements. Various other iterators exist to retrieve the\nelements in a bin.\ngst_object_unref is used to drop your reference to the bin.\nThe element-added signal is fired whenever a new element is added to\nthe bin. Likewise the element-removed signal is fired whenever an\nelement is removed from the bin.\nA GstBin internally intercepts every GstMessage posted by its children and\nimplements the following default behaviour for each of them:\nGST_MESSAGE_EOS: This message is only posted by sinks in the PLAYING\nstate. If all sinks posted the EOS message, this bin will post and EOS\nmessage upwards.\nGST_MESSAGE_SEGMENT_START: Just collected and never forwarded upwards.\nThe messages are used to decide when all elements have completed playback\nof their segment.\nGST_MESSAGE_SEGMENT_DONE: Is posted by GstBin when all elements that posted\na SEGMENT_START have posted a SEGMENT_DONE.\nGST_MESSAGE_DURATION_CHANGED: Is posted by an element that detected a change\nin the stream duration. The duration change is posted to the\napplication so that it can refetch the new duration with a duration\nquery.\nNote that these messages can be posted before the bin is prerolled, in which\ncase the duration query might fail.\nNote also that there might be a discrepancy (due to internal buffering/queueing)\nbetween the stream being currently displayed and the returned duration query.\nApplications might want to also query for duration (and changes) by\nlistening to the GST_MESSAGE_STREAM_START message, signaling the active start\nof a (new) stream.\nGST_MESSAGE_CLOCK_LOST: This message is posted by an element when it\ncan no longer provide a clock.\nThe default bin behaviour is to check if the lost clock was the one provided\nby the bin. If so and the bin is currently in the PLAYING state, the message\nis forwarded to the bin parent.\nThis message is also generated when a clock provider is removed from\nthe bin. If this message is received by the application, it should\nPAUSE the pipeline and set it back to PLAYING to force a new clock\ndistribution.\nGST_MESSAGE_CLOCK_PROVIDE: This message is generated when an element\ncan provide a clock. This mostly happens when a new clock\nprovider is added to the bin.\nThe default behaviour of the bin is to mark the currently selected clock as\ndirty, which will perform a clock recalculation the next time the bin is\nasked to provide a clock.\nThis message is never sent to the application but is forwarded to\nthe parent of the bin.\nOTHERS: posted upwards.\nA GstBin implements the following default behaviour for answering to a\nGstQuery:\nGST_QUERY_DURATION: The bin will forward the query to all sink\nelements contained within and will return the maximum value.\nIf no sinks are available in the bin, the query fails.\nGST_QUERY_POSITION: The query is sent to all sink elements in the bin and the\nMAXIMUM of all values is returned. If no sinks are available in the bin,\nthe query fails.\nOTHERS: the query is forwarded to all sink elements, the result\nof the first sink that answers the query successfully is returned. If no\nsink is in the bin, the query fails.\nA GstBin will by default forward any event sent to it to all sink\n( GST_EVENT_TYPE_UPSTREAM ) or source ( GST_EVENT_TYPE_DOWNSTREAM ) elements\ndepending on the event type.\nIf all the elements return TRUE, the bin will also return TRUE, else FALSE\nis returned. If no elements of the required type are in the bin, the event\nhandler will return TRUE.\n\n\nGST_MESSAGE_EOS: This message is only posted by sinks in the PLAYING\nstate. If all sinks posted the EOS message, this bin will post and EOS\nmessage upwards.\n\n\nGST_MESSAGE_SEGMENT_START: Just collected and never forwarded upwards.\nThe messages are used to decide when all elements have completed playback\nof their segment.\n\n\nGST_MESSAGE_SEGMENT_DONE: Is posted by GstBin when all elements that posted\na SEGMENT_START have posted a SEGMENT_DONE.\n\n\nGST_MESSAGE_DURATION_CHANGED: Is posted by an element that detected a change\nin the stream duration. The duration change is posted to the\napplication so that it can refetch the new duration with a duration\nquery.\nNote that these messages can be posted before the bin is prerolled, in which\ncase the duration query might fail.\nNote also that there might be a discrepancy (due to internal buffering/queueing)\nbetween the stream being currently displayed and the returned duration query.\nApplications might want to also query for duration (and changes) by\nlistening to the GST_MESSAGE_STREAM_START message, signaling the active start\nof a (new) stream.\n\n\nGST_MESSAGE_CLOCK_LOST: This message is posted by an element when it\ncan no longer provide a clock.\nThe default bin behaviour is to check if the lost clock was the one provided\nby the bin. If so and the bin is currently in the PLAYING state, the message\nis forwarded to the bin parent.\nThis message is also generated when a clock provider is removed from\nthe bin. If this message is received by the application, it should\nPAUSE the pipeline and set it back to PLAYING to force a new clock\ndistribution.\n\n\nGST_MESSAGE_CLOCK_PROVIDE: This message is generated when an element\ncan provide a clock. This mostly happens when a new clock\nprovider is added to the bin.\nThe default behaviour of the bin is to mark the currently selected clock as\ndirty, which will perform a clock recalculation the next time the bin is\nasked to provide a clock.\nThis message is never sent to the application but is forwarded to\nthe parent of the bin.\n\n\nOTHERS: posted upwards.\n\n\n\n\nGST_QUERY_DURATION: The bin will forward the query to all sink\nelements contained within and will return the maximum value.\nIf no sinks are available in the bin, the query fails.\n\n\nGST_QUERY_POSITION: The query is sent to all sink elements in the bin and the\nMAXIMUM of all values is returned. If no sinks are available in the bin,\nthe query fails.\n\n\nOTHERS: the query is forwarded to all sink elements, the result\nof the first sink that answers the query successfully is returned. If no\nsink is in the bin, the query fails.\n\n\n"});