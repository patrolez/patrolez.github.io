fragment_downloaded_cb({"url":"gstreamer/gstchildproxy.html#gst_child_proxy_get_child_by_name_recurse","fragment":"\n\tgst_child_proxy_get_child_by_name_recurse\n\n\n\tGst.ChildProxy.prototype.get_child_by_name_recurse\n\n\n\tGst.ChildProxy.get_child_by_name_recurse\n\nLooks up a child element by the given full-path name.\nSimilar to gst_child_proxy_get_child_by_name, this method\nsearches and returns a child given a name. The difference is that\nthis method allows a hierarchical path in the form of\nchild1::child2::child3. In the later example this method would\nreturn a reference to child3, if found. The name should be made of\nelement names only and should not contain any property names.\nParameters:\nthe parent object to get the child from\nthe full-path child's name\nthe child object or NULL if\nnot found.\n\n\tSince\t\t\t: 1.22\n\t\t\nLooks up a child element by the given full-path name.\nSimilar to Gst.ChildProxy.prototype.get_child_by_name, this method\nsearches and returns a child given a name. The difference is that\nthis method allows a hierarchical path in the form of\nchild1::child2::child3. In the later example this method would\nreturn a reference to child3, if found. The name should be made of\nelement names only and should not contain any property names.\nParameters:\nthe parent object to get the child from\nthe full-path child's name\nthe child object or null if\nnot found.\n\n\tSince\t\t\t: 1.22\n\t\t\nLooks up a child element by the given full-path name.\nSimilar to Gst.ChildProxy.get_child_by_name, this method\nsearches and returns a child given a name. The difference is that\nthis method allows a hierarchical path in the form of\nchild1::child2::child3. In the later example this method would\nreturn a reference to child3, if found. The name should be made of\nelement names only and should not contain any property names.\nParameters:\nthe parent object to get the child from\nthe full-path child's name\nthe child object or None if\nnot found.\n\n\tSince\t\t\t: 1.22\n\t\t\n"});