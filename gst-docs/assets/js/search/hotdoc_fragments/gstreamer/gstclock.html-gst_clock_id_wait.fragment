fragment_downloaded_cb({"url":"gstreamer/gstclock.html#gst_clock_id_wait","fragment":"\n\tgst_clock_id_wait\n\n\n\tGst.Clock.prototype.id_wait\n\n\n\tGst.Clock.id_wait\n\nPerforms a blocking wait on id.\nid should have been created with gst_clock_new_single_shot_id\nor gst_clock_new_periodic_id and should not have been unscheduled\nwith a call to gst_clock_id_unschedule.\nIf the jitter argument is not NULL and this function returns GST_CLOCK_OK\nor GST_CLOCK_EARLY, it will contain the difference\nagainst the clock and the time of id when this method was\ncalled.\nPositive values indicate how late id was relative to the clock\n(in which case this function will return GST_CLOCK_EARLY).\nNegative values indicate how much time was spent waiting on the clock\nbefore this function returned.\nParameters:\nThe GstClockID to wait on\na pointer that will contain the jitter,\ncan be NULL.\nthe result of the blocking wait. GST_CLOCK_EARLY will be returned\nif the current clock time is past the time of id, GST_CLOCK_OK if\nid was scheduled in time. GST_CLOCK_UNSCHEDULED if id was\nunscheduled with gst_clock_id_unschedule.\nPerforms a blocking wait on id.\nid should have been created with Gst.Clock.prototype.new_single_shot_id\nor Gst.Clock.prototype.new_periodic_id and should not have been unscheduled\nwith a call to Gst.Clock.prototype.id_unschedule.\nIf the jitter argument is not null and this function returns Gst.ClockReturn.OK\nor Gst.ClockReturn.EARLY, it will contain the difference\nagainst the clock and the time of id when this method was\ncalled.\nPositive values indicate how late id was relative to the clock\n(in which case this function will return Gst.ClockReturn.EARLY).\nNegative values indicate how much time was spent waiting on the clock\nbefore this function returned.\nParameters:\nThe Object to wait on\nReturns a tuple made of:\nthe result of the blocking wait. Gst.ClockReturn.EARLY will be returned\nif the current clock time is past the time of id, Gst.ClockReturn.OK if\nid was scheduled in time. Gst.ClockReturn.UNSCHEDULED if id was\nunscheduled with Gst.Clock.prototype.id_unschedule.\nthe result of the blocking wait. Gst.ClockReturn.EARLY will be returned\nif the current clock time is past the time of id, Gst.ClockReturn.OK if\nid was scheduled in time. Gst.ClockReturn.UNSCHEDULED if id was\nunscheduled with Gst.Clock.prototype.id_unschedule.\nPerforms a blocking wait on id.\nid should have been created with Gst.Clock.new_single_shot_id\nor Gst.Clock.new_periodic_id and should not have been unscheduled\nwith a call to Gst.Clock.id_unschedule.\nIf the jitter argument is not None and this function returns Gst.ClockReturn.OK\nor Gst.ClockReturn.EARLY, it will contain the difference\nagainst the clock and the time of id when this method was\ncalled.\nPositive values indicate how late id was relative to the clock\n(in which case this function will return Gst.ClockReturn.EARLY).\nNegative values indicate how much time was spent waiting on the clock\nbefore this function returned.\nParameters:\nThe object to wait on\nReturns a tuple made of:\nthe result of the blocking wait. Gst.ClockReturn.EARLY will be returned\nif the current clock time is past the time of id, Gst.ClockReturn.OK if\nid was scheduled in time. Gst.ClockReturn.UNSCHEDULED if id was\nunscheduled with Gst.Clock.id_unschedule.\nthe result of the blocking wait. Gst.ClockReturn.EARLY will be returned\nif the current clock time is past the time of id, Gst.ClockReturn.OK if\nid was scheduled in time. Gst.ClockReturn.UNSCHEDULED if id was\nunscheduled with Gst.Clock.id_unschedule.\n"});