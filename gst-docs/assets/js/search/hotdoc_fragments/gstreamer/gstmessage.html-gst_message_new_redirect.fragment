fragment_downloaded_cb({"url":"gstreamer/gstmessage.html#gst_message_new_redirect","fragment":"\n\tgst_message_new_redirect\n\n\n\tGst.Message.prototype.new_redirect\n\n\n\tGst.Message.new_redirect\n\nCreates a new redirect message and adds a new entry to it. Redirect messages\nare posted when an element detects that the actual data has to be retrieved\nfrom a different location. This is useful if such a redirection cannot be\nhandled inside a source element, for example when HTTP 302/303 redirects\nreturn a non-HTTP URL.\nThe redirect message can hold multiple entries. The first one is added\nwhen the redirect message is created, with the given location, tag_list,\nentry_struct arguments. Use gst_message_add_redirect_entry to add more\nentries.\nEach entry has a location, a tag list, and a structure. All of these are\noptional. The tag list and structure are useful for additional metadata,\nsuch as bitrate statistics for the given location.\nBy default, message recipients should treat entries in the order they are\nstored. The recipient should therefore try entry #0 first, and if this\nentry is not acceptable or working, try entry #1 etc. Senders must make\nsure that they add entries in this order. However, recipients are free to\nignore the order and pick an entry that is \"best\" for them. One example\nwould be a recipient that scans the entries for the one with the highest\nbitrate tag.\nThe specified location string is copied. However, ownership over the tag\nlist and structure are transferred to the message.\nParameters:\nThe GstObject whose property changed (may or may not be a GstElement)\nlocation string for the new entry\ntag list for the new entry\nstructure for the new entry\na newly allocated GstMessage\n\n\tSince\t\t\t: 1.10\n\t\t\nCreates a new redirect message and adds a new entry to it. Redirect messages\nare posted when an element detects that the actual data has to be retrieved\nfrom a different location. This is useful if such a redirection cannot be\nhandled inside a source element, for example when HTTP 302/303 redirects\nreturn a non-HTTP URL.\nThe redirect message can hold multiple entries. The first one is added\nwhen the redirect message is created, with the given location, tag_list,\nentry_struct arguments. Use Gst.Message.prototype.add_redirect_entry to add more\nentries.\nEach entry has a location, a tag list, and a structure. All of these are\noptional. The tag list and structure are useful for additional metadata,\nsuch as bitrate statistics for the given location.\nBy default, message recipients should treat entries in the order they are\nstored. The recipient should therefore try entry #0 first, and if this\nentry is not acceptable or working, try entry #1 etc. Senders must make\nsure that they add entries in this order. However, recipients are free to\nignore the order and pick an entry that is \"best\" for them. One example\nwould be a recipient that scans the entries for the one with the highest\nbitrate tag.\nThe specified location string is copied. However, ownership over the tag\nlist and structure are transferred to the message.\nParameters:\nThe Gst.Object whose property changed (may or may not be a Gst.Element)\nlocation string for the new entry\ntag list for the new entry\nstructure for the new entry\na newly allocated Gst.Message\n\n\tSince\t\t\t: 1.10\n\t\t\nCreates a new redirect message and adds a new entry to it. Redirect messages\nare posted when an element detects that the actual data has to be retrieved\nfrom a different location. This is useful if such a redirection cannot be\nhandled inside a source element, for example when HTTP 302/303 redirects\nreturn a non-HTTP URL.\nThe redirect message can hold multiple entries. The first one is added\nwhen the redirect message is created, with the given location, tag_list,\nentry_struct arguments. Use Gst.Message.add_redirect_entry to add more\nentries.\nEach entry has a location, a tag list, and a structure. All of these are\noptional. The tag list and structure are useful for additional metadata,\nsuch as bitrate statistics for the given location.\nBy default, message recipients should treat entries in the order they are\nstored. The recipient should therefore try entry #0 first, and if this\nentry is not acceptable or working, try entry #1 etc. Senders must make\nsure that they add entries in this order. However, recipients are free to\nignore the order and pick an entry that is \"best\" for them. One example\nwould be a recipient that scans the entries for the one with the highest\nbitrate tag.\nThe specified location string is copied. However, ownership over the tag\nlist and structure are transferred to the message.\nParameters:\nThe Gst.Object whose property changed (may or may not be a Gst.Element)\nlocation string for the new entry\ntag list for the new entry\nstructure for the new entry\na newly allocated Gst.Message\n\n\tSince\t\t\t: 1.10\n\t\t\n"});