fragment_downloaded_cb({"url":"gstreamer/gstclock.html#gst_clock_id_wait_async","fragment":"\n\tgst_clock_id_wait_async\n\n\n\tGst.Clock.prototype.id_wait_async\n\n\n\tGst.Clock.id_wait_async\n\nRegisters a callback on the given GstClockID id with the given\nfunction and user_data. When passing a GstClockID with an invalid\ntime to this function, the callback will be called immediately\nwith  a time set to GST_CLOCK_TIME_NONE. The callback will\nbe called when the time of id has been reached.\nThe callback func can be invoked from any thread, either provided by the\ncore or from a streaming thread. The application should be prepared for this.\nParameters:\na GstClockID to wait on\nThe callback function\nUser data passed in the callback\nGDestroyNotify for user_data\nthe result of the non blocking wait.\nRegisters a callback on the given Object id with the given\nfunction and user_data. When passing a Object with an invalid\ntime to this function, the callback will be called immediately\nwith  a time set to Gst.CLOCK_TIME_NONE. The callback will\nbe called when the time of id has been reached.\nThe callback func can be invoked from any thread, either provided by the\ncore or from a streaming thread. The application should be prepared for this.\nParameters:\na Object to wait on\nThe callback function\nUser data passed in the callback\nthe result of the non blocking wait.\nRegisters a callback on the given object id with the given\nfunction and user_data. When passing a object with an invalid\ntime to this function, the callback will be called immediately\nwith  a time set to Gst.CLOCK_TIME_NONE. The callback will\nbe called when the time of id has been reached.\nThe callback func can be invoked from any thread, either provided by the\ncore or from a streaming thread. The application should be prepared for this.\nParameters:\na object to wait on\nThe callback function\nUser data passed in the callback\nthe result of the non blocking wait.\n"});