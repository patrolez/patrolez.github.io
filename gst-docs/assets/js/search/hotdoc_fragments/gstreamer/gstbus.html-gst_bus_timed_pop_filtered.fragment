fragment_downloaded_cb({"url":"gstreamer/gstbus.html#gst_bus_timed_pop_filtered","fragment":"\n\tgst_bus_timed_pop_filtered\n\n\n\tGst.Bus.prototype.timed_pop_filtered\n\n\n\tGst.Bus.timed_pop_filtered\n\nGets a message from the bus whose type matches the message type mask types,\nwaiting up to the specified timeout (and discarding any messages that do not\nmatch the mask provided).\nIf timeout is 0, this function behaves like gst_bus_pop_filtered. If\ntimeout is GST_CLOCK_TIME_NONE, this function will block forever until a\nmatching message was posted on the bus.\nParameters:\na GstBus to pop from\na timeout in nanoseconds, or GST_CLOCK_TIME_NONE to wait forever\nmessage types to take into account, GST_MESSAGE_ANY for any type\na GstMessage matching the\nfilter in types, or NULL if no matching message was found on\nthe bus until the timeout expired.\nGets a message from the bus whose type matches the message type mask types,\nwaiting up to the specified timeout (and discarding any messages that do not\nmatch the mask provided).\nIf timeout is 0, this function behaves like Gst.Bus.prototype.pop_filtered. If\ntimeout is Gst.CLOCK_TIME_NONE, this function will block forever until a\nmatching message was posted on the bus.\nParameters:\na Gst.Bus to pop from\na timeout in nanoseconds, or Gst.CLOCK_TIME_NONE to wait forever\nmessage types to take into account, Gst.MessageType.ANY for any type\na Gst.Message matching the\nfilter in types, or null if no matching message was found on\nthe bus until the timeout expired.\nGets a message from the bus whose type matches the message type mask types,\nwaiting up to the specified timeout (and discarding any messages that do not\nmatch the mask provided).\nIf timeout is 0, this function behaves like Gst.Bus.pop_filtered. If\ntimeout is Gst.CLOCK_TIME_NONE, this function will block forever until a\nmatching message was posted on the bus.\nParameters:\na Gst.Bus to pop from\na timeout in nanoseconds, or Gst.CLOCK_TIME_NONE to wait forever\nmessage types to take into account, Gst.MessageType.ANY for any type\na Gst.Message matching the\nfilter in types, or None if no matching message was found on\nthe bus until the timeout expired.\n"});