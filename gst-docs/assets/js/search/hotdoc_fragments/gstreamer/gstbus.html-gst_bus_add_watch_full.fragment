fragment_downloaded_cb({"url":"gstreamer/gstbus.html#gst_bus_add_watch_full","fragment":"\n\tgst_bus_add_watch_full\n\n\n\tGst.Bus.prototype.add_watch_full\n\n\n\tGst.Bus.add_watch_full\n\nAdds a bus watch to the default main context with the given priority (e.g.\nG_PRIORITY_DEFAULT). It is also possible to use a non-default  main\ncontext set up using g_main_context_push_thread_default (before\none had to create a bus watch source and attach it to the desired main\ncontext 'manually').\nThis function is used to receive asynchronous messages in the main loop.\nThere can only be a single bus watch per bus, you must remove it before you\ncan set a new one.\nThe bus watch will only work if a GMainLoop is being run.\nWhen func is called, the message belongs to the caller; if you want to\nkeep a copy of it, call gst_message_ref before leaving func.\nThe watch can be removed using gst_bus_remove_watch or by returning FALSE\nfrom func. If the watch was added to the default main context it is also\npossible to remove the watch using g_source_remove.\nThe bus watch will take its own reference to the bus, so it is safe to unref\nbus using gst_object_unref after setting the bus watch.\nParameters:\na GstBus to create the watch for.\nThe priority of the watch.\nA function to call when a message is received.\nuser data passed to func.\nthe function to call when the source is removed.\nThe event source id or 0 if bus already got an event source.\nAdds a bus watch to the default main context with the given priority (e.g.\nGLib.PRIORITY_DEFAULT). It is also possible to use a non-default  main\ncontext set up using GLib.MainContext.prototype.push_thread_default (before\none had to create a bus watch source and attach it to the desired main\ncontext 'manually').\nThis function is used to receive asynchronous messages in the main loop.\nThere can only be a single bus watch per bus, you must remove it before you\ncan set a new one.\nThe bus watch will only work if a GLib.MainLoop is being run.\nWhen func is called, the message belongs to the caller; if you want to\nkeep a copy of it, call gst_message_ref (not introspectable) before leaving func.\nThe watch can be removed using Gst.Bus.prototype.remove_watch or by returning false\nfrom func. If the watch was added to the default main context it is also\npossible to remove the watch using GLib.prototype.source_remove.\nThe bus watch will take its own reference to the bus, so it is safe to unref\nbus using Gst.Object.prototype.unref after setting the bus watch.\nParameters:\na Gst.Bus to create the watch for.\nThe priority of the watch.\nA function to call when a message is received.\nuser data passed to func.\nThe event source id or 0 if bus already got an event source.\nAdds a bus watch to the default main context with the given priority (e.g.\nGLib.PRIORITY_DEFAULT). It is also possible to use a non-default  main\ncontext set up using GLib.MainContext.push_thread_default (before\none had to create a bus watch source and attach it to the desired main\ncontext 'manually').\nThis function is used to receive asynchronous messages in the main loop.\nThere can only be a single bus watch per bus, you must remove it before you\ncan set a new one.\nThe bus watch will only work if a GLib.MainLoop is being run.\nWhen func is called, the message belongs to the caller; if you want to\nkeep a copy of it, call gst_message_ref (not introspectable) before leaving func.\nThe watch can be removed using Gst.Bus.remove_watch or by returning False\nfrom func. If the watch was added to the default main context it is also\npossible to remove the watch using GLib.source_remove.\nThe bus watch will take its own reference to the bus, so it is safe to unref\nbus using Gst.Object.unref after setting the bus watch.\nParameters:\na Gst.Bus to create the watch for.\nThe priority of the watch.\nA function to call when a message is received.\nuser data passed to func.\nThe event source id or 0 if bus already got an event source.\n"});