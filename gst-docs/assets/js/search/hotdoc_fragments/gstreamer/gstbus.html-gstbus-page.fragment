fragment_downloaded_cb({"url":"gstreamer/gstbus.html#gstbus-page","fragment":"GstBus\nThe GstBus is an object responsible for delivering GstMessage packets in\na first-in first-out way from the streaming threads (see GstTask) to the\napplication.\nSince the application typically only wants to deal with delivery of these\nmessages from one thread, the GstBus will marshall the messages between\ndifferent threads. This is important since the actual streaming of media\nis done in another thread than the application.\nThe GstBus provides support for GSource based notifications. This makes it\npossible to handle the delivery in the glib GMainLoop.\nThe GSource callback function gst_bus_async_signal_func can be used to\nconvert all bus messages into signal emissions.\nA message is posted on the bus with the gst_bus_post method. With the\ngst_bus_peek and gst_bus_pop methods one can look at or retrieve a\npreviously posted message.\nThe bus can be polled with the gst_bus_poll method. This methods blocks\nup to the specified timeout value until one of the specified messages types\nis posted on the bus. The application can then gst_bus_pop the messages\nfrom the bus to handle them.\nAlternatively the application can register an asynchronous bus function\nusing gst_bus_add_watch_full or gst_bus_add_watch. This function will\ninstall a GSource in the default glib main loop and will deliver messages\na short while after they have been posted. Note that the main loop should\nbe running for the asynchronous callbacks.\nIt is also possible to get messages from the bus without any thread\nmarshalling with the gst_bus_set_sync_handler method. This makes it\npossible to react to a message in the same thread that posted the\nmessage on the bus. This should only be used if the application is able\nto deal with messages from different threads.\nEvery GstPipeline has one bus.\nNote that a GstPipeline will set its bus into flushing state when changing\nfrom READY to NULL state.\n"});