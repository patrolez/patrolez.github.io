fragment_downloaded_cb({"url":"gstreamer/gstelement.html#gst_element_call_async","fragment":"\n\tgst_element_call_async\n\n\n\tGst.Element.prototype.call_async\n\n\n\tGst.Element.call_async\n\nCalls func from another thread and passes user_data to it. This is to be\nused for cases when a state change has to be performed from a streaming\nthread, directly via gst_element_set_state or indirectly e.g. via SEEK\nevents.\nCalling those functions directly from the streaming thread will cause\ndeadlocks in many situations, as they might involve waiting for the\nstreaming thread to shut down from this very streaming thread.\nMT safe.\nParameters:\na GstElement\nFunction to call asynchronously from another thread\nData to pass to func\nGDestroyNotify for user_data\n\n\tSince\t\t\t: 1.10\n\t\t\nCalls func from another thread and passes user_data to it. This is to be\nused for cases when a state change has to be performed from a streaming\nthread, directly via Gst.Element.prototype.set_state or indirectly e.g. via SEEK\nevents.\nCalling those functions directly from the streaming thread will cause\ndeadlocks in many situations, as they might involve waiting for the\nstreaming thread to shut down from this very streaming thread.\nMT safe.\nParameters:\na Gst.Element\nFunction to call asynchronously from another thread\nData to pass to func\n\n\tSince\t\t\t: 1.10\n\t\t\nCalls func from another thread and passes user_data to it. This is to be\nused for cases when a state change has to be performed from a streaming\nthread, directly via Gst.Element.set_state or indirectly e.g. via SEEK\nevents.\nCalling those functions directly from the streaming thread will cause\ndeadlocks in many situations, as they might involve waiting for the\nstreaming thread to shut down from this very streaming thread.\nMT safe.\nParameters:\na Gst.Element\nFunction to call asynchronously from another thread\nData to pass to func\n\n\tSince\t\t\t: 1.10\n\t\t\n"});