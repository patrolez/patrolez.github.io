fragment_downloaded_cb({"url":"gstreamer/gstbufferpool.html#gstbufferpool-page","fragment":"GstBufferPool\nA GstBufferPool is an object that can be used to pre-allocate and recycle\nbuffers of the same size and with the same properties.\nA GstBufferPool is created with gst_buffer_pool_new.\nOnce a pool is created, it needs to be configured. A call to\ngst_buffer_pool_get_config returns the current configuration structure from\nthe pool. With gst_buffer_pool_config_set_params and\ngst_buffer_pool_config_set_allocator the bufferpool parameters and\nallocator can be configured. Other properties can be configured in the pool\ndepending on the pool implementation.\nA bufferpool can have extra options that can be enabled with\ngst_buffer_pool_config_add_option. The available options can be retrieved\nwith gst_buffer_pool_get_options. Some options allow for additional\nconfiguration properties to be set.\nAfter the configuration structure has been configured,\ngst_buffer_pool_set_config updates the configuration in the pool. This can\nfail when the configuration structure is not accepted.\nAfter the pool has been configured, it can be activated with\ngst_buffer_pool_set_active. This will preallocate the configured resources\nin the pool.\nWhen the pool is active, gst_buffer_pool_acquire_buffer can be used to\nretrieve a buffer from the pool.\nBuffers allocated from a bufferpool will automatically be returned to the\npool with gst_buffer_pool_release_buffer when their refcount drops to 0.\nThe bufferpool can be deactivated again with gst_buffer_pool_set_active.\nAll further gst_buffer_pool_acquire_buffer calls will return an error. When\nall buffers are returned to the pool they will be freed.\n"});