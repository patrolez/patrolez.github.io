fragment_downloaded_cb({"url":"gstreamer/gsttaglist.html#gst_tag_list_copy","fragment":"\n\tgst_tag_list_copy\n\n\n\tGst.TagList.prototype.copy\n\n\n\tGst.TagList.copy\n\nCreates a new GstTagList as a copy of the old taglist. The new taglist\nwill have a refcount of 1, owned by the caller, and will be writable as\na result.\nNote that this function is the semantic equivalent of a gst_tag_list_ref\nfollowed by a gst_tag_list_make_writable. If you only want to hold on to a\nreference to the data, you should use gst_tag_list_ref.\nWhen you are finished with the taglist, call gst_tag_list_unref on it.\nParameters:\na GstTagList.\nthe new GstTagList\nCreates a new Gst.TagList as a copy of the old taglist. The new taglist\nwill have a refcount of 1, owned by the caller, and will be writable as\na result.\nNote that this function is the semantic equivalent of a gst_tag_list_ref (not introspectable)\nfollowed by a gst_tag_list_make_writable (not introspectable). If you only want to hold on to a\nreference to the data, you should use gst_tag_list_ref (not introspectable).\nWhen you are finished with the taglist, call gst_tag_list_unref (not introspectable) on it.\nParameters:\na Gst.TagList.\nthe new Gst.TagList\nCreates a new Gst.TagList as a copy of the old taglist. The new taglist\nwill have a refcount of 1, owned by the caller, and will be writable as\na result.\nNote that this function is the semantic equivalent of a gst_tag_list_ref (not introspectable)\nfollowed by a gst_tag_list_make_writable (not introspectable). If you only want to hold on to a\nreference to the data, you should use gst_tag_list_ref (not introspectable).\nWhen you are finished with the taglist, call gst_tag_list_unref (not introspectable) on it.\nParameters:\na Gst.TagList.\nthe new Gst.TagList\n"});