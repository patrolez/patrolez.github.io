fragment_downloaded_cb({"url":"gstreamer/gstevent.html#gst_event_new_qos","fragment":"\n\tgst_event_new_qos\n\n\n\tGst.Event.prototype.new_qos\n\n\n\tGst.Event.new_qos\n\nAllocate a new qos event with the given values.\nThe QOS event is generated in an element that wants an upstream\nelement to either reduce or increase its rate because of\nhigh/low CPU load or other resource usage such as network performance or\nthrottling. Typically sinks generate these events for each buffer\nthey receive.\ntype indicates the reason for the QoS event. GST_QOS_TYPE_OVERFLOW is\nused when a buffer arrived in time or when the sink cannot keep up with\nthe upstream datarate. GST_QOS_TYPE_UNDERFLOW is when the sink is not\nreceiving buffers fast enough and thus has to drop late buffers.\nGST_QOS_TYPE_THROTTLE is used when the datarate is artificially limited\nby the application, for example to reduce power consumption.\nproportion indicates the real-time performance of the streaming in the\nelement that generated the QoS event (usually the sink). The value is\ngenerally computed based on more long term statistics about the streams\ntimestamps compared to the clock.\nA value < 1.0 indicates that the upstream element is producing data faster\nthan real-time. A value > 1.0 indicates that the upstream element is not\nproducing data fast enough. 1.0 is the ideal proportion value. The\nproportion value can safely be used to lower or increase the quality of\nthe element.\ndiff is the difference against the clock in running time of the last\nbuffer that caused the element to generate the QOS event. A negative value\nmeans that the buffer with timestamp arrived in time. A positive value\nindicates how late the buffer with timestamp was. When throttling is\nenabled, diff will be set to the requested throttling interval.\ntimestamp is the timestamp of the last buffer that cause the element\nto generate the QOS event. It is expressed in running time and thus an ever\nincreasing value.\nThe upstream element can use the diff and timestamp values to decide\nwhether to process more buffers. For positive diff, all buffers with\ntimestamp <= timestamp + diff will certainly arrive late in the sink\nas well. A (negative) diff value so that timestamp + diff would yield a\nresult smaller than 0 is not allowed.\nThe application can use general event probes to intercept the QoS\nevent and implement custom application specific QoS handling.\nParameters:\nthe QoS type\nthe proportion of the qos message\nThe time difference of the last Clock sync\nThe timestamp of the buffer\na new QOS event.\nAllocate a new qos event with the given values.\nThe QOS event is generated in an element that wants an upstream\nelement to either reduce or increase its rate because of\nhigh/low CPU load or other resource usage such as network performance or\nthrottling. Typically sinks generate these events for each buffer\nthey receive.\ntype indicates the reason for the QoS event. Gst.QOSType.OVERFLOW is\nused when a buffer arrived in time or when the sink cannot keep up with\nthe upstream datarate. Gst.QOSType.UNDERFLOW is when the sink is not\nreceiving buffers fast enough and thus has to drop late buffers.\nGst.QOSType.THROTTLE is used when the datarate is artificially limited\nby the application, for example to reduce power consumption.\nproportion indicates the real-time performance of the streaming in the\nelement that generated the QoS event (usually the sink). The value is\ngenerally computed based on more long term statistics about the streams\ntimestamps compared to the clock.\nA value < 1.0 indicates that the upstream element is producing data faster\nthan real-time. A value > 1.0 indicates that the upstream element is not\nproducing data fast enough. 1.0 is the ideal proportion value. The\nproportion value can safely be used to lower or increase the quality of\nthe element.\ndiff is the difference against the clock in running time of the last\nbuffer that caused the element to generate the QOS event. A negative value\nmeans that the buffer with timestamp arrived in time. A positive value\nindicates how late the buffer with timestamp was. When throttling is\nenabled, diff will be set to the requested throttling interval.\ntimestamp is the timestamp of the last buffer that cause the element\nto generate the QOS event. It is expressed in running time and thus an ever\nincreasing value.\nThe upstream element can use the diff and timestamp values to decide\nwhether to process more buffers. For positive diff, all buffers with\ntimestamp <= timestamp + diff will certainly arrive late in the sink\nas well. A (negative) diff value so that timestamp + diff would yield a\nresult smaller than 0 is not allowed.\nThe application can use general event probes to intercept the QoS\nevent and implement custom application specific QoS handling.\nParameters:\nthe QoS type\nthe proportion of the qos message\nThe time difference of the last Clock sync\nThe timestamp of the buffer\na new QOS event.\nAllocate a new qos event with the given values.\nThe QOS event is generated in an element that wants an upstream\nelement to either reduce or increase its rate because of\nhigh/low CPU load or other resource usage such as network performance or\nthrottling. Typically sinks generate these events for each buffer\nthey receive.\ntype indicates the reason for the QoS event. Gst.QOSType.OVERFLOW is\nused when a buffer arrived in time or when the sink cannot keep up with\nthe upstream datarate. Gst.QOSType.UNDERFLOW is when the sink is not\nreceiving buffers fast enough and thus has to drop late buffers.\nGst.QOSType.THROTTLE is used when the datarate is artificially limited\nby the application, for example to reduce power consumption.\nproportion indicates the real-time performance of the streaming in the\nelement that generated the QoS event (usually the sink). The value is\ngenerally computed based on more long term statistics about the streams\ntimestamps compared to the clock.\nA value < 1.0 indicates that the upstream element is producing data faster\nthan real-time. A value > 1.0 indicates that the upstream element is not\nproducing data fast enough. 1.0 is the ideal proportion value. The\nproportion value can safely be used to lower or increase the quality of\nthe element.\ndiff is the difference against the clock in running time of the last\nbuffer that caused the element to generate the QOS event. A negative value\nmeans that the buffer with timestamp arrived in time. A positive value\nindicates how late the buffer with timestamp was. When throttling is\nenabled, diff will be set to the requested throttling interval.\ntimestamp is the timestamp of the last buffer that cause the element\nto generate the QOS event. It is expressed in running time and thus an ever\nincreasing value.\nThe upstream element can use the diff and timestamp values to decide\nwhether to process more buffers. For positive diff, all buffers with\ntimestamp <= timestamp + diff will certainly arrive late in the sink\nas well. A (negative) diff value so that timestamp + diff would yield a\nresult smaller than 0 is not allowed.\nThe application can use general event probes to intercept the QoS\nevent and implement custom application specific QoS handling.\nParameters:\nthe QoS type\nthe proportion of the qos message\nThe time difference of the last Clock sync\nThe timestamp of the buffer\na new QOS event.\n"});