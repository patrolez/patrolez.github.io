fragment_downloaded_cb({"url":"bad-audio/gstnonstreamaudiodecoder.html#GstNonstreamAudioDecoderClass::set_num_loops","fragment":"\n\tset_num_loops\n\n\n\tvfunc_set_num_loops\n\n\n\tdo_set_num_loops\n\nOptional.\nSets the number of loops for playback. If this is called during playback,\nthe subclass must set any internal loop counters to zero. A loop value of -1\nmeans infinite looping; 0 means no looping; and when the num_loops is greater than 0,\nplayback should loop exactly num_loops times. If this function is implemented,\nget_num_loops should be implemented as well. The function can ignore the given values\nand choose another; however, get_num_loops should return this other value afterwards.\nIt is up to the subclass to define where the loop starts and ends. It can mean that only\na subset at the end or in the middle of a song is repeated, for example.\nIf the current subsong mode is GST_NONSTREAM_AUDIO_SUBSONG_MODE_SINGLE, then the subsong\nis repeated this many times. If it is GST_NONSTREAM_AUDIO_SUBSONG_MODE_ALL, then all\nsubsongs are repeated this many times. With GST_NONSTREAM_AUDIO_SUBSONG_MODE_DECODER_DEFAULT,\nthe behavior is decoder specific.\nParameters:\nOptional.\nSets the number of loops for playback. If this is called during playback,\nthe subclass must set any internal loop counters to zero. A loop value of -1\nmeans infinite looping; 0 means no looping; and when the num_loops is greater than 0,\nplayback should loop exactly num_loops times. If this function is implemented,\nget_num_loops should be implemented as well. The function can ignore the given values\nand choose another; however, get_num_loops should return this other value afterwards.\nIt is up to the subclass to define where the loop starts and ends. It can mean that only\na subset at the end or in the middle of a song is repeated, for example.\nIf the current subsong mode is GST_NONSTREAM_AUDIO_SUBSONG_MODE_SINGLE, then the subsong\nis repeated this many times. If it is GST_NONSTREAM_AUDIO_SUBSONG_MODE_ALL, then all\nsubsongs are repeated this many times. With GST_NONSTREAM_AUDIO_SUBSONG_MODE_DECODER_DEFAULT,\nthe behavior is decoder specific.\nParameters:\nOptional.\nSets the number of loops for playback. If this is called during playback,\nthe subclass must set any internal loop counters to zero. A loop value of -1\nmeans infinite looping; 0 means no looping; and when the num_loops is greater than 0,\nplayback should loop exactly num_loops times. If this function is implemented,\nget_num_loops should be implemented as well. The function can ignore the given values\nand choose another; however, get_num_loops should return this other value afterwards.\nIt is up to the subclass to define where the loop starts and ends. It can mean that only\na subset at the end or in the middle of a song is repeated, for example.\nIf the current subsong mode is GST_NONSTREAM_AUDIO_SUBSONG_MODE_SINGLE, then the subsong\nis repeated this many times. If it is GST_NONSTREAM_AUDIO_SUBSONG_MODE_ALL, then all\nsubsongs are repeated this many times. With GST_NONSTREAM_AUDIO_SUBSONG_MODE_DECODER_DEFAULT,\nthe behavior is decoder specific.\nParameters:\n"});