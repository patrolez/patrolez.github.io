fragment_downloaded_cb({"url":"bad-audio/gstnonstreamaudiodecoder.html#gst_nonstream_audio_decoder_get_downstream_info","fragment":"\n\tgst_nonstream_audio_decoder_get_downstream_info\n\n\n\tGstBadAudio.NonstreamAudioDecoder.prototype.get_downstream_info\n\n\n\tGstBadAudio.NonstreamAudioDecoder.get_downstream_info\n\nGets sample format, sample rate, channel count from the allowed srcpad caps.\nThis is useful for when the subclass wishes to adjust one or more output\nparameters to whatever downstream is supporting. For example, the output\nsample rate is often a freely adjustable value in module players.\nThis function tries to find a value inside the srcpad peer's caps for\nformat, sample_rate, num_chnanels . Any of these can be NULL; they\n(and the corresponding downstream caps) are then skipped while retrieving\ninformation. Non-fixated caps are fixated first; the value closest to\ntheir present value is then chosen. For example, if the variables pointed\nto by the arguments are GST_AUDIO_FORMAT_16, 48000 Hz, and 2 channels,\nand the downstream caps are:\n\"audio/x-raw, format={S16LE,S32LE}, rate=[1,32000], channels=[1,MAX]\"\nThen format and channels stay the same, while sample_rate is set to 32000 Hz.\nThis way, the initial values the the variables pointed to by the arguments\nare set to can be used as default output values. Note that if no downstream\ncaps can be retrieved, then this function does nothing, therefore it is\nnecessary to ensure that format, sample_rate, and channels have valid\ninitial values.\nDecoder lock is not held by this function, so it can be called from within\nany of the class vfuncs.\nParameters:\na GstNonstreamAudioDecoder\nGstAudioFormat value to fill with a sample format\nInteger to fill with a sample rate\nInteger to fill with a channel count\nGets sample format, sample rate, channel count from the allowed srcpad caps.\nThis is useful for when the subclass wishes to adjust one or more output\nparameters to whatever downstream is supporting. For example, the output\nsample rate is often a freely adjustable value in module players.\nThis function tries to find a value inside the srcpad peer's caps for\nformat, sample_rate, num_chnanels . Any of these can be NULL; they\n(and the corresponding downstream caps) are then skipped while retrieving\ninformation. Non-fixated caps are fixated first; the value closest to\ntheir present value is then chosen. For example, if the variables pointed\nto by the arguments are GST_AUDIO_FORMAT_16, 48000 Hz, and 2 channels,\nand the downstream caps are:\n\"audio/x-raw, format={S16LE,S32LE}, rate=[1,32000], channels=[1,MAX]\"\nThen format and channels stay the same, while sample_rate is set to 32000 Hz.\nThis way, the initial values the the variables pointed to by the arguments\nare set to can be used as default output values. Note that if no downstream\ncaps can be retrieved, then this function does nothing, therefore it is\nnecessary to ensure that format, sample_rate, and channels have valid\ninitial values.\nDecoder lock is not held by this function, so it can be called from within\nany of the class vfuncs.\nParameters:\na GstBadAudio.NonstreamAudioDecoder\nGstAudio.AudioFormat value to fill with a sample format\nInteger to fill with a sample rate\nInteger to fill with a channel count\nGets sample format, sample rate, channel count from the allowed srcpad caps.\nThis is useful for when the subclass wishes to adjust one or more output\nparameters to whatever downstream is supporting. For example, the output\nsample rate is often a freely adjustable value in module players.\nThis function tries to find a value inside the srcpad peer's caps for\nformat, sample_rate, num_chnanels . Any of these can be NULL; they\n(and the corresponding downstream caps) are then skipped while retrieving\ninformation. Non-fixated caps are fixated first; the value closest to\ntheir present value is then chosen. For example, if the variables pointed\nto by the arguments are GST_AUDIO_FORMAT_16, 48000 Hz, and 2 channels,\nand the downstream caps are:\n\"audio/x-raw, format={S16LE,S32LE}, rate=[1,32000], channels=[1,MAX]\"\nThen format and channels stay the same, while sample_rate is set to 32000 Hz.\nThis way, the initial values the the variables pointed to by the arguments\nare set to can be used as default output values. Note that if no downstream\ncaps can be retrieved, then this function does nothing, therefore it is\nnecessary to ensure that format, sample_rate, and channels have valid\ninitial values.\nDecoder lock is not held by this function, so it can be called from within\nany of the class vfuncs.\nParameters:\na GstBadAudio.NonstreamAudioDecoder\nGstAudio.AudioFormat value to fill with a sample format\nInteger to fill with a sample rate\nInteger to fill with a channel count\n"});