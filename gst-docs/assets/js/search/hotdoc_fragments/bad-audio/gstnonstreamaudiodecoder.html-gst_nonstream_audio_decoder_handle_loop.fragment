fragment_downloaded_cb({"url":"bad-audio/gstnonstreamaudiodecoder.html#gst_nonstream_audio_decoder_handle_loop","fragment":"\n\tgst_nonstream_audio_decoder_handle_loop\n\n\n\tGstBadAudio.NonstreamAudioDecoder.prototype.handle_loop\n\n\n\tGstBadAudio.NonstreamAudioDecoder.handle_loop\n\nReports that a loop has been completed and creates a new appropriate\nsegment for the next loop.\nnew_position exists because a loop may not start at the beginning.\nThis function is only useful for subclasses which can be in the\nGST_NONSTREAM_AUDIO_OUTPUT_MODE_LOOPING output mode, since in the\nGST_NONSTREAM_AUDIO_OUTPUT_MODE_STEADY output mode, this function\ndoes nothing. See GstNonstreamAudioOutputMode for more details.\nThe subclass calls this during playback when it loops. It produces\na new segment with updated base time and internal time values, to allow\nfor seamless looping. It does not check the number of elapsed loops;\nthis is up the subclass.\nNote that if this function is called, then it must be done after the\nlast samples of the loop have been decoded and pushed downstream.\nThis function must be called with the decoder mutex lock held, since it\nis typically called from within decode (which in turn are called with\nthe lock already held).\nParameters:\na GstNonstreamAudioDecoder\nnew_position New position the next loop starts with\nReports that a loop has been completed and creates a new appropriate\nsegment for the next loop.\nnew_position exists because a loop may not start at the beginning.\nThis function is only useful for subclasses which can be in the\nGST_NONSTREAM_AUDIO_OUTPUT_MODE_LOOPING output mode, since in the\nGST_NONSTREAM_AUDIO_OUTPUT_MODE_STEADY output mode, this function\ndoes nothing. See GstBadAudio.NonstreamAudioOutputMode for more details.\nThe subclass calls this during playback when it loops. It produces\na new segment with updated base time and internal time values, to allow\nfor seamless looping. It does not check the number of elapsed loops;\nthis is up the subclass.\nNote that if this function is called, then it must be done after the\nlast samples of the loop have been decoded and pushed downstream.\nThis function must be called with the decoder mutex lock held, since it\nis typically called from within decode (which in turn are called with\nthe lock already held).\nParameters:\na GstBadAudio.NonstreamAudioDecoder\nnew_position New position the next loop starts with\nReports that a loop has been completed and creates a new appropriate\nsegment for the next loop.\nnew_position exists because a loop may not start at the beginning.\nThis function is only useful for subclasses which can be in the\nGST_NONSTREAM_AUDIO_OUTPUT_MODE_LOOPING output mode, since in the\nGST_NONSTREAM_AUDIO_OUTPUT_MODE_STEADY output mode, this function\ndoes nothing. See GstBadAudio.NonstreamAudioOutputMode for more details.\nThe subclass calls this during playback when it loops. It produces\na new segment with updated base time and internal time values, to allow\nfor seamless looping. It does not check the number of elapsed loops;\nthis is up the subclass.\nNote that if this function is called, then it must be done after the\nlast samples of the loop have been decoded and pushed downstream.\nThis function must be called with the decoder mutex lock held, since it\nis typically called from within decode (which in turn are called with\nthe lock already held).\nParameters:\na GstBadAudio.NonstreamAudioDecoder\nnew_position New position the next loop starts with\n"});