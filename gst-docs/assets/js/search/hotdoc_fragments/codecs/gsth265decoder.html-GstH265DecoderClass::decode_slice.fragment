fragment_downloaded_cb({"url":"codecs/gsth265decoder.html#GstH265DecoderClass::decode_slice","fragment":"\n\tdecode_slice\n\n\n\tvfunc_decode_slice\n\n\n\tdo_decode_slice\n\nProvides per slice data with parsed slice header and required raw bitstream\nfor subclass to decode it. If gst_h265_decoder_set_process_ref_pic_lists\nis called with TRUE by the subclass, ref_pic_list0 and ref_pic_list1\nare non-%NULL.\nParameters:\na GstH265Decoder\na GstH265Picture\na GstH265Slice\n(element-type GstH265Picture) (transfer none):\nan array of GstH265Picture pointers\n(element-type GstH265Picture) (transfer none):\nan array of GstH265Picture pointers\nProvides per slice data with parsed slice header and required raw bitstream\nfor subclass to decode it. If GstCodecs.H265Decoder.prototype.set_process_ref_pic_lists\nis called with true by the subclass, ref_pic_list0 and ref_pic_list1\nare non-%NULL.\nParameters:\na GstCodecs.H265Decoder\na GstCodecs.H265Picture\na GstCodecs.H265Slice\n(element-type GstH265Picture) (transfer none):\nan array of GstCodecs.H265Picture pointers\n(element-type GstH265Picture) (transfer none):\nan array of GstCodecs.H265Picture pointers\nProvides per slice data with parsed slice header and required raw bitstream\nfor subclass to decode it. If GstCodecs.H265Decoder.set_process_ref_pic_lists\nis called with True by the subclass, ref_pic_list0 and ref_pic_list1\nare non-%NULL.\nParameters:\na GstCodecs.H265Decoder\na GstCodecs.H265Picture\na GstCodecs.H265Slice\n(element-type GstH265Picture) (transfer none):\nan array of GstCodecs.H265Picture pointers\n(element-type GstH265Picture) (transfer none):\nan array of GstCodecs.H265Picture pointers\n"});